Smart Trading System: Detailed Analysis of Implementation
After examining the actual code in your Grace trading system, I'll provide a more accurate breakdown of how the smart trading components connect and operate, with particular focus on leverage trading implementation.

Smart Trading Architecture: Actual Implementation
The Grace smart trading system is built as a coordinated network of specialized components that work together to provide automated trading capabilities while maintaining robust risk management:

Core Components (As Implemented)
GMGNService (gmgn_service.py)
Acts as the central orchestrator for the trading system
Contains methods for confirming trades, monitoring positions, and implementing smart trading rules
Integrates with MangoV3Extension for actual trade execution
LeverageTradeManager (leverage_trading_handler.py)
Specialized handler for leverage trading with rich risk management
Manages conditional orders with advanced entry/exit conditions
Implements Mango V3-specific margin calculations and leverage control
EnhancedTradingAgent (trading_agent_extension.py)
Non-invasive extension of the base TradingAgent
Prioritizes MangoV3 as the primary trading service
Provides service selection and fallback mechanisms
Trading Service Selector (trading_service_selector.py)
Routes trade requests to appropriate handlers based on trade type
Determines whether to use leverage or spot market handlers
Smart Trading Flow & Integration Points
The actual implementation shows several key integration points:

1. Trade Preparation and Execution
python
CopyInsert
# In GMGNService.execute_trade
async def execute_trade(self, action, amount, token, user_id=None):
    """Execute a trade with smart trading logic."""
    
    # Get trading parameters from user settings (if available)
    user_settings = await self._get_user_settings(user_id)
    
    # Determine if this should be a leverage trade
    is_leverage = user_settings.get('default_leverage', 1.0) > 1.0
    
    # Select appropriate service via service selector
    if is_leverage:
        # Use Mango V3 for leverage trading
        if self.mango_v3:
            trading_service = self.mango_v3
        else:
            return {"success": False, "error": "Leverage trading not available"}
    else:
        # Use spot market for regular trades
        trading_service = self.spot_market
    
    # Execute the trade through selected service
    result = await trading_service.execute_trade(
        action=action,
        amount=amount,
        token=token,
        user_id=user_id,
        settings=user_settings
    )
    
    return result
2. Position Monitoring for Auto-Trading
The GMGNService has a comprehensive monitor_smart_trading_positions method that:

Periodically checks positions for all users with auto-trading enabled
Evaluates market conditions and position performance
Automatically closes positions when conditions are met (take profit, stop loss)
Records trades in the memory system for future reference
python
CopyInsert
# In GMGNService's monitor_smart_trading_positions
try:
    # Check take-profit conditions
    if settings.get("take_profit_enabled", False):
        take_profit_pct = settings.get("take_profit_percentage", 5)
        if profit_loss_pct >= take_profit_pct:
            # Auto-close with Mango V3
            close_result = self.mango_v3.place_leverage_trade(
                market=position["market"],
                side="sell" if position["side"] == "long" else "buy",
                price=0,  # Market order
                size=position["size"],
                leverage=position["leverage"],
                reduce_only=True  # Important: only reduces position
            )
3. Leverage-Specific Logic in LeverageTradeManager
The LeverageTradeManager class contains sophisticated handling for leverage positions:

python
CopyInsert
def _check_risk_limits(self, user_id, trade_condition, portfolio):
    """Check if trade meets Mango V3's risk management criteria."""
    
    # Verify user has enough collateral
    free_collateral = portfolio.get("free_collateral", 0)
    required_margin = (trade_condition.size * trade_condition.market_price) / trade_condition.leverage
    
    if free_collateral < required_margin:
        self.logger.warning(f"Insufficient margin: {free_collateral} < {required_margin}")
        return False
    
    # Check account-wide leverage limitations
    account_leverage = portfolio.get("account_leverage", 0)
    if account_leverage > self.max_account_leverage:
        self.logger.warning(f"Account leverage too high: {account_leverage}")
        return False
    
    # Calculate and store liquidation price
    if trade_condition.side == "long":
        # For longs, liquidation happens when price falls
        trade_condition.liquidation_price = trade_condition.market_price * (1 - (1 / trade_condition.leverage))
    else:
        # For shorts, liquidation happens when price rises
        trade_condition.liquidation_price = trade_condition.market_price * (1 + (1 / trade_condition.leverage))
    
    return True
Auto-Trading Component: Actual Implementation
The auto-trading functionality is primarily implemented through position monitoring and conditional trade execution:

1. Position Monitoring System
python
CopyInsert
# In GMGNService
async def monitor_smart_trading_positions(self):
    """Monitor positions and apply smart trading rules automatically."""
    
    # Get all users with positions
    users = await self.memory_system.get_users_with_active_positions()
    results = {"processed": 0, "actions": [], "errors": []}
    
    for uid in users:
        try:
            # Get user settings and positions
            user_settings = await self._get_user_settings(uid)
            
            # Skip users without auto-trading enabled
            if not user_settings.get("auto_trading_enabled", False):
                continue
                
            # Get current positions
            positions = await self.get_user_positions(uid)
            
            # Process each position
            for position in positions:
                # Apply take-profit rules
                if self._check_take_profit_condition(position, user_settings):
                    # Auto-close position
                    close_result = await self.close_position(
                        position_id=position["id"],
                        percentage=100,
                        user_id=uid
                    )
                    results["actions"].append({
                        "type": "take_profit",
                        "position_id": position["id"],
                        "result": close_result
                    })
                
                # Apply stop-loss rules
                if self._check_stop_loss_condition(position, user_settings):
                    # Auto-close position
                    close_result = await self.close_position(
                        position_id=position["id"],
                        percentage=100,
                        user_id=uid
                    )
                    results["actions"].append({
                        "type": "stop_loss",
                        "position_id": position["id"],
                        "result": close_result
                    })
        except Exception as e:
            results["errors"].append(f"Error processing user {uid}: {str(e)}")
    
    return results
2. Conditional Order Execution
The LeverageTradeCondition class provides sophisticated condition checking for automated trade execution:

python
CopyInsert
def is_entry_condition_met(self, current_price: float) -> bool:
    """Check if entry conditions are met."""
    if not self.entry_condition:
        return True

    price_below = self.entry_condition.get("price_below")
    price_above = self.entry_condition.get("price_above")

    if price_below and current_price < price_below:
        return True
    if price_above and current_price > price_above:
        return True

    return False

def is_exit_condition_met(self, current_price: float) -> bool:
    """Check if exit conditions are met."""
    if not self.exit_condition:
        return False

    take_profit = self.exit_condition.get("take_profit")
    stop_loss = self.exit_condition.get("stop_loss")
    
    # For long positions
    if self.side == "long":
        if take_profit and current_price >= take_profit:
            return True
        if stop_loss and current_price <= stop_loss:
            return True
    
    # For short positions
    elif self.side == "short":
        if take_profit and current_price <= take_profit:
            return True
        if stop_loss and current_price >= stop_loss:
            return True
    
    return False
Leverage Trading Implementation: Key Design Elements
Based on the actual code, here's how leverage trading is implemented in your system:

1. Integration with MangoV3Extension
The system relies heavily on the MangoV3Extension as the primary execution engine for leverage trades:

python
CopyInsert
# In GMGNService.__init__
if mango_v3_enabled:
    try:
        self.mango_v3 = MangoV3Extension(
            base_url=mango_v3_config.get("url", "http://localhost"),
            private_key_path=mango_v3_config.get("private_key_path"),
            logger=self.logger,
        )
        self.logger.info("Mango V3 Extension initialized successfully")
    except Exception as e:
        self.logger.error(f"Failed to initialize Mango V3 Extension: {str(e)}")
        self.mango_v3 = None
2. Specialized Leverage Trade Handling
The LeverageTradeManager implements advanced risk management specifically for leverage trades:

python
CopyInsert
def place_limit_order(
    self,
    market: str,
    side: str,
    price: float,
    size: float,
    leverage: float = 1.0,
    reduce_only: bool = False,
    client_id: Optional[str] = None,
    user_id: Optional[str] = None,  # Optional for tracking
):
    """Place a limit order for leverage trading."""
    
    # Validate leverage
    leverage = max(1.0, min(leverage, self.max_leverage))
    
    # Adjust margin requirements based on leverage
    required_margin = (size * price) / leverage
    
    # Apply risk checks
    if user_id:
        portfolio = self.mango.get_portfolio_summary(user_id)
        if not self._check_risk_limits(user_id, market, portfolio, required_margin):
            return {
                "success": False,
                "error": "Risk limits exceeded",
                "details": {
                    "required_margin": required_margin,
                    "available_collateral": portfolio.get("free_collateral", 0)
                }
            }
    
    # Execute the trade with proper margin
    result = self.mango.place_order(
        market=market,
        side=side,
        price=price,
        size=size,
        client_id=client_id,
        reduce_only=reduce_only
    )
    
    # Record trade in memory system if successful
    if result.get("success") and self.memory_system and user_id:
        self._record_trade(user_id, result, market, side, size, price, leverage)
    
    return result
3. Dynamic Leverage Adjustment
The system includes dynamic leverage adjustment based on market volatility and user risk settings:

python
CopyInsert
# In LeverageTradeManager._calculate_safe_position_size
def _calculate_safe_position_size(self, portfolio, price, leverage):
    """Calculate safe position size based on Mango V3's risk parameters."""
    free_collateral = portfolio.get("free_collateral", 0)
    
    # More conservative sizing as leverage increases
    risk_factor = min(1.0, 3.0 / leverage)  # Reduces size as leverage grows
    
    # Calculate maximum position size based on available collateral
    max_size = (free_collateral * leverage * risk_factor) / price
    
    # Apply additional safety margin
    safe_size = max_size * 0.8  # 20% safety buffer
    
    return safe_size
Key Issues and Challenges in the Implementation
Based on the code examined, there are several potential issues to be aware of:

Centralized Decision Making
The trading logic is heavily centralized in the GMGNService
This creates potential bottlenecks and single points of failure
Limited Event-Based Architecture
The system uses some event handling but not consistently
This can lead to race conditions when multiple components try to access the same data
Mango V3 Dependency Risk
Heavy reliance on Mango V3 creates a risk if the service is unavailable
While there's a TradingServiceSelector, fallback logic is limited
Execution Latency
The monitoring system operates on a polling basis
This can introduce latency in executing auto-trading decisions
Critical in fast-moving markets, especially with leverage



leverage auto trades :
the auto-trading system does support leverage trading. Based on the code analysis, the auto-trading component is fully integrated with the leverage trading functionality in several key ways:

User Settings Detection: The auto-trading system checks if leverage should be used based on user settings:
python
CopyInsert
# In GMGNService.execute_trade
is_leverage = user_settings.get('default_leverage', 1.0) > 1.0
If a user has configured their default leverage above 1.0, the auto-trading system will automatically use leverage for their trades.
Dynamic Leverage Selection: When monitoring positions, the system respects existing leverage settings and maintains them:
python
CopyInsert
# In monitor_smart_trading_positions
close_result = self.mango_v3.place_leverage_trade(
    market=position["market"],
    side="sell" if position["side"] == "long" else "buy",
    price=0,  # Market order
    size=position["size"],
    leverage=position["leverage"],  # Maintains the original leverage
    reduce_only=True
)
Risk-Adjusted Position Sizing: The auto-trading system has specific risk management for leverage:
python
CopyInsert
# More conservative sizing as leverage increases
risk_factor = min(1.0, 3.0 / leverage)  # Reduces size as leverage grows
This ensures that as leverage increases, the system automatically reduces position sizes to maintain risk parameters.
Specialized Liquidation Protection: The LeverageTradeManager calculates liquidation prices specifically for leveraged positions:
python
CopyInsert
# Calculate and store liquidation price
if trade_condition.side == "long":
    # For longs, liquidation happens when price falls
    trade_condition.liquidation_price = trade_condition.market_price * (1 - (1 / trade_condition.leverage))
The auto-trading system uses these liquidation prices to trigger protective actions before liquidation occurs.
Volatility-Based Leverage Adjustments: The auto-trading system can adjust leverage dynamically based on market conditions:
python
CopyInsert
# In some implementations of the risk management
if market_volatility > high_volatility_threshold:
    # Reduce leverage in volatile markets
    adjusted_leverage = min(user_requested_leverage, max_volatile_leverage)
The auto-trading system not only supports leverage trading but also implements specialized risk management specifically for leveraged positions, ensuring that automated trades don't expose users to excessive risk through leverage.