Grace Trading System: Architecture and Execution Flow
Architecture Overview
The Grace trading system implements a sophisticated multi-layered architecture that connects a React-based frontend with a Python backend infrastructure optimized for cryptocurrency trading. The system's design emphasizes clean separation of concerns while maintaining efficient communication between components.

Core System Components
Frontend Layer
React-based UI components (Trading.tsx, LightweightPositionsWidget.tsx)
TypeScript API clients (apiClient.ts)
Type definitions system (trading.ts, apiTypes.ts, tradingTypes.ts)
Event bus for cross-component communication
Backend API Layer
Flask/Quart API server (api_server.py)
API routers for domain-specific endpoints
Authentication and validation middleware
Trading Service Layer
GMGN service as orchestrator (gmgn_service.py)
MangoV3 extension as primary execution engine (mango_v3_extension.py)
Specialized handlers for different trade types:
Leverage trading handler (leverage_trading_handler.py)
Spot market trading (mango_spot_market.py)
Infrastructure Layer
Wallet connection system (wallet_connection.py)
Memory system for data persistence
Solana blockchain integration
Trade Execution Flow
1. User Interaction Initiation
The trade flow begins when a user interacts with the Trading component (Trading.tsx). 
This UI provides market selection, order type configuration, and execution buttons. Upon clicking "Buy" or "Sell":

// In Trading.tsx
const executeTrade = async (side: 'buy' | 'sell') => {
  // Validation, preparation of trade parameters
  const tradeResult = await TradingApi.executeTrade({
    action: side,
    token: state.selectedToken.symbol,
    amount: parseFloat(state.tradeForm.amount),
    isLeverage: state.tradeForm.isLeverage,
    leverage: state.tradeForm.isLeverage ? state.tradeForm.leverage : undefined
  });
  
  // Show confirmation dialog with trade details
  if (userConfirmed) {
    const confirmResult = await TradingApi.confirmTrade(
      tradeResult.result.confirmation_id
    );
  }
}
This two-phase execution (prepare â†’ confirm) ensures users can review trade details before final execution.

2. Frontend API Layer
The TradingApi (apiClient.ts) transforms UI actions into structured API calls:

export const TradingApi = {
  async executeTrade(params) {
    const response = await api.post('/api/trading/execute', {
      ...params,
      amount: params.amount.toString()
    });
    return response.data;
  },
  
  async confirmTrade(confirmationId) {
    const response = await api.post('/api/trading/confirm', {
      confirmation_id: confirmationId
    });
    return response.data;
  }
};
This layer handles:

Parameter formatting
Error management
Response normalization
Authentication header injection
3. Backend API Routing
The API server (api_server.py) receives requests through specific endpoints:

python
CopyInsert
@app.route("/api/trading/execute", methods=["POST"])
async def execute_trade():
    """Execute a trade with smart trading settings applied."""
    # Authentication and validation
    user_id = result["user_id"]
    data = await request.get_json()
    
    # Extract trade parameters
    action = data.get("action")  # 'buy' or 'sell'
    token = data.get("token")
    amount = data.get("amount")
    is_leverage = data.get("isLeverage", False)
    
    # Apply user's smart trading settings
    settings = await get_user_smart_settings(user_id)
    
    # Select appropriate trading service
    trade_service = trading_service_selector.get_service(
        is_leverage=is_leverage
    )
    
    # Execute first phase of trade
    trade_result = await trade_service.prepare_trade(
        action, token, amount, user_id, settings
    )
    
    return jsonify({"success": True, "result": trade_result})
The confirmation endpoint follows a similar pattern but executes the trade:

python
CopyInsert
@app.route("/api/trading/confirm", methods=["POST"])
async def confirm_trade():
    """Confirm and execute a prepared trade."""
    # Authentication and validation
    confirmation_id = data.get("confirmation_id")
    
    # Route to GMGN service for execution
    result = await gmgn_service.confirm_trade(
        confirmation_id, user_id
    )
    
    return jsonify(result)
4. Trade Service Selection and Orchestration
The GMGN service (gmgn_service.py) acts as the central orchestrator for all trading activities:

python
CopyInsert
class GMGNService:
    def __init__(self, memory_system=None, config=None):
        # Initialize various trading components
        self.mango_v3 = MangoV3Extension(...)
        self.leverage_handler = LeverageTradeManager(...)
        self.spot_market = MangoSpotMarket(...)
    
    async def prepare_trade(self, action, token, amount, user_id, settings):
        """Prepare a trade for execution (phase 1)."""
        # Generate confirmation ID
        confirmation_id = f"trade_{action}_{token}_{amount}_{int(time.time())}"
        
        # Store trade parameters in memory for confirmation phase
        self.memory_system.store_trade_params(confirmation_id, {
            "action": action,
            "token": token,
            "amount": amount,
            "user_id": user_id,
            "settings": settings
        })
        
        return {
            "confirmation_id": confirmation_id,
            "estimated_price": current_price,
            # Additional trade preview data
        }
    
    async def confirm_trade(self, confirmation_id, user_id):
        """Execute a confirmed trade (phase 2)."""
        # Retrieve stored trade parameters
        trade_params = self.memory_system.get_trade_params(confirmation_id)
        
        # Route to the appropriate execution engine
        if trade_params.get("is_leverage"):
            # For leverage trades
            return await self.mango_v3.confirm_trade(
                confirmation_id, user_id
            )
        else:
            # For spot trades
            return await self.mango_v3.confirm_trade(
                confirmation_id, user_id
            )
5. Trade Execution via Mango V3 Extension
The MangoV3 extension (mango_v3_extension.py) serves as the primary execution engine:

python
CopyInsert
class MangoV3Extension:
    """
    A lightweight extension to provide Mango V3 trading capabilities
    without modifying existing trade infrastructure.
    """
    
    def confirm_trade(self, confirmation_id, user_identifier=None):
        """
        Confirm and execute a trade based on the confirmation ID.
        """
        # Parse confirmation ID
        parts = confirmation_id.split("_")
        action = parts[1]  # 'buy' or 'sell'
        token = parts[2]   # token symbol
        amount = float(parts[3])  # trade amount
        
        # Detect if it's a leverage trade
        is_leverage = False
        leverage = 1.0  # Default to spot trade
        if len(parts) > 5 and parts[5].startswith("lev"):
            is_leverage = True
            leverage = float(parts[5].replace("lev", ""))
        
        # Execute the trade using place_leverage_trade
        result = self.place_leverage_trade(
            market=f"{token.upper()}/USDC",
            side=action,
            price=0,  # 0 for market orders
            size=amount,
            leverage=leverage,
            reduce_only=False,
            order_type="market",
            client_id=f"confirm_{confirmation_id}"
        )
        
        # Format response
        return {
            "success": True,
            "status": "success",
            "platform": "mango_v3",
            "confirmation_id": confirmation_id,
            "trade_id": result.get("order", {}).get("id"),
            "user_id": user_identifier,
            "execution_time": datetime.now().isoformat(),
            # Additional trade details
        }
For leverage trades, the system uses specialized methods:

python
CopyInsert
def place_leverage_trade(self, market, side, price, size, leverage=1.0,
                         reduce_only=False, order_type="limit", client_id=None):
    """
    Place a leveraged trade on Mango Markets.
    """
    # Adjust size based on leverage
    adjusted_size = size * leverage
    
    # Place the order
    result = self.client.place_spot_order(
        market=market,
        side=side,
        price=price,
        size=adjusted_size,
        client_id=client_id,
        order_type=order_type,
        reduce_only=reduce_only,
    )
    
    # Process result
    return {
        "success": True,
        "order": result,
        "leverage": leverage,
        "market": market,
        "side": side,
        "size": size,
        "adjusted_size": adjusted_size
    }
6. Position Management
After trade execution, the positions need to be updated. 
When a trade is confirmed, an event is emitted through the event bus:


// In Trading.tsx after trade confirmation
tradingEventBus.emit('trade:confirmed', {
  type: 'trade_confirmed',
  data: confirmResult,
  trade: {
    action: side,
    token: state.selectedToken.symbol,
    amount: state.tradeForm.amount,
    isLeverage: state.tradeForm.isLeverage,
    timestamp: Date.now()
  }
});
The LightweightPositionsWidget listens for these events:

// In typescriptLightweightPositionsWidget.tsx
useEffect(() => {
  const handleTradeConfirmation = (eventData) => {
    console.log('Trade confirmed, refreshing positions:', eventData);
    fetchPositions().catch(err => {
      console.error('Error refreshing positions:', err);
    });
  };
  
  tradingEventBus.on('trade:confirmed', handleTradeConfirmation);
  
  return () => {
    tradingEventBus.off('trade:confirmed', handleTradeConfirmation);
  };
}, [fetchPositions]);
7. Position Closure Flow

For closing positions, we implemented a similar but inverse flow. 
The user selects a position and uses the slider to determine how much to close:

// In LightweightPositionsWidget.tsx
const handleClosePosition = async (positionId, percentage) => {
  // Find position and calculate closing amount
  const positionToClose = positions.find(pos => pos.id === positionId);
  const closeAmount = positionToClose.amount * percentage / 100;
  
  // Use TradingApi to execute the closure
  const response = await TradingApi.sellPosition({
    positionId,
    token: positionToClose.token,
    amount: positionToClose.amount,
    type: positionToClose.type,
    percentage: percentage
  });
  
  // Update UI optimistically
  if (response.success) {
    if (percentage < 100) {
      // For partial closes, update position
      setPositions(prev => prev.map(pos => 
        pos.id === positionId 
          ? { ...pos, amount: pos.amount - closeAmount } 
          : pos
      ));
    } else {
      // For full closes, remove position
      setPositions(prev => prev.filter(pos => pos.id !== positionId));
    }
    
    // Emit event for other components
    tradingEventBus.emit('positionSold', {...});
  }
};
This request flows through the backend in a similar pattern to trade execution, but uses the reduce_only parameter in the MangoV3 extension to properly close positions.

Frontend Routing and Component Interaction
Component Structure
The frontend follows a hierarchical component structure:

Page Components
Trading.tsx: Main trading interface
Positions.tsx: Position management view
Shared Components
LightweightPositionsWidget.tsx: Displays and manages positions
PriceChart.tsx: TradingView chart integration
Service Layer
apiClient.ts: API communication
tradingEventBus.ts: Cross-component communication
Event-Based Communication

Components interact through a lightweight event bus system:

class TradingEventBus {
  private listeners: { [event: string]: ((data: any) => void)[] } = {};

  on(event: string, callback: (data: any) => void) {
    if (!this.listeners[event]) {
      this.listeners[event] = [];
    }
    this.listeners[event].push(callback);
  }

  off(event: string, callback: (data: any) => void) {
    if (this.listeners[event]) {
      this.listeners[event] = this.listeners[event].filter(cb => cb !== callback);
    }
  }

  emit(event: string, data?: any) {
    if (this.listeners[event]) {
      this.listeners[event].forEach(callback => callback(data));
    }
  }
}

export const tradingEventBus = new TradingEventBus();
This approach allows:

Loose coupling between components
Real-time updates across components
Clean architecture with separation of concerns
Type-Safe Data Flow
The system leverages TypeScript's type system extensively to ensure data consistency:


// Domain models in /types/trading.ts
export interface BasePosition {
  id: string;
  token: string;
  amount: number;
  entryPrice: number;
  currentPrice: number;
  pnl: number;
  pnlPercent: number;
  timestamp: string;
}

// API-specific types in apiTypes.ts
export interface UserPositionsResponse {
  positions: BasePosition[];
  metadata: any;
}

// UI-specific types in components
interface UIPosition extends BasePosition {
  // UI extensions
}
Key Architectural Advantages
The architecture offers several advantages:

Separation of Concerns:
Frontend focused on presentation and user interaction
Backend focused on execution logic and market integration
Clean boundaries between systems
Extensibility:
New trading types can be added with minimal changes
Additional market integrations can be implemented through extensions
UI components are reusable across different views
Two-Phase Execution:
Preparation phase provides estimates and validates parameters
Confirmation phase ensures user intent and executes trades
Prevents accidental trades and provides better UX
Real-Time Feedback:
Event-based system updates UI components in real-time
Optimistic updates provide immediate feedback
Background refreshes ensure data consistency
Consistent Error Handling:
Standardized error responses throughout the stack
Proper error propagation from backend to frontend
User-friendly error messages with actionable information

Conclusion

The Grace trading system implements a sophisticated architecture that connects 
a React frontend with a Python backend optimized for cryptocurrency trading.
By leveraging the MangoV3 extension as the central execution engine 
and implementing a clean event-based communication system, the platform provides a robust, 
extensible foundation for both spot and leverage trading.

The two-phase execution model ensures user confidence while maintaining a responsive UI,
and the recently implemented partial position closure feature demonstrates how the architecture 
can be extended to support more complex trading operations without major refactoring.