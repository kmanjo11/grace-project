/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "/_error";
exports.ids = ["/_error"];
exports.modules = {

/***/ "./api/apiClient.ts":
/*!**************************!*\
  !*** ./api/apiClient.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   API_ENDPOINTS: () => (/* binding */ API_ENDPOINTS),\n/* harmony export */   ApiError: () => (/* binding */ ApiError),\n/* harmony export */   ChatApi: () => (/* binding */ ChatApi),\n/* harmony export */   TradingApi: () => (/* binding */ TradingApi),\n/* harmony export */   addAuthHeaders: () => (/* binding */ addAuthHeaders),\n/* harmony export */   api: () => (/* binding */ api),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   getAuthToken: () => (/* binding */ getAuthToken),\n/* harmony export */   removeAuthToken: () => (/* binding */ removeAuthToken),\n/* harmony export */   saveAuthToken: () => (/* binding */ saveAuthToken)\n/* harmony export */ });\n/**\n * API Client for Grace App\n * \n * Provides standardized error handling and response processing for all API calls.\n */ // Front api constant\nconst API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || '/api';\n// Auth token key for localStorage\nconst AUTH_TOKEN_KEY = 'grace_auth_token';\n// Get auth token from localStorage\nconst getAuthToken = ()=>{\n    if (false) {}\n    return null;\n};\n// Save auth token to localStorage\nconst saveAuthToken = (token)=>{\n    if (false) {}\n};\n// Remove auth token from localStorage\nconst removeAuthToken = ()=>{\n    if (false) {}\n};\n// Add auth headers to request options\nconst addAuthHeaders = (options = {})=>{\n    const token = getAuthToken();\n    if (token) {\n        return {\n            ...options,\n            headers: {\n                ...options.headers,\n                'Authorization': `Bearer ${token}`,\n                'Content-Type': 'application/json'\n            }\n        };\n    }\n    return options;\n};\n// API Error types\nclass ApiError extends Error {\n    statusCode;\n    data;\n    constructor(message, statusCode, data){\n        super(message);\n        this.name = 'ApiError';\n        this.statusCode = statusCode;\n        this.data = data;\n    }\n}\n// API configuration - use environment variable if available, otherwise use relative path\n// Ensure API_BASE_URL ends with a slash\nconst getBaseUrl = ()=>{\n    if (API_BASE_URL.endsWith('/')) {\n        return API_BASE_URL.slice(0, -1);\n    }\n    return API_BASE_URL;\n};\n// API endpoints constants\nconst API_ENDPOINTS = {\n    AUTH: {\n        LOGIN: '/api/auth/login',\n        REGISTER: '/api/auth/register',\n        VERIFY_TOKEN: '/api/auth/verify_token',\n        LOGOUT: '/api/auth/logout',\n        REFRESH_TOKEN: '/api/auth/refresh',\n        FORGOT_PASSWORD: '/api/auth/forgot-password',\n        RESET_PASSWORD: '/api/auth/reset-password'\n    },\n    USER: {\n        PROFILE: '/api/user/profile',\n        LEVERAGE_POSITIONS: '/api/user/leverage_positions',\n        SPOT_POSITIONS: '/api/user/spot_positions',\n        POSITION_HISTORY: '/api/user/position_history',\n        TRADE_HISTORY: '/api/user/trade_history',\n        LIMIT_ORDERS: '/api/limit-orders'\n    },\n    WALLET: {\n        DATA: '/api/wallet/data',\n        INFO: '/api/wallet/info',\n        MANGO_BALANCE: '/api/wallet/mango-balance',\n        GENERATE: '/api/wallet/generate',\n        SEND: '/api/wallet/send',\n        CONNECT_PHANTOM: '/api/wallet/phantom/connect',\n        COMPLETE_PHANTOM: '/api/wallet/phantom/callback',\n        DISCONNECT_PHANTOM: '/api/wallet/phantom/disconnect',\n        // Map BALANCE to INFO since the server uses /api/wallet/info endpoint to get wallet balance\n        BALANCE: '/api/wallet/info',\n        TRANSACTIONS: '/api/wallet/transactions'\n    },\n    CHAT: {\n        // Get all chat sessions for the authenticated user\n        SESSIONS: '/api/chat/sessions',\n        // Create a new chat session\n        NEW_SESSION: '/api/chat/session/new',\n        // Get chat history for a specific session\n        HISTORY: (sessionId)=>`/api/chat/history/${sessionId}`,\n        // Send a chat message\n        MESSAGE: '/api/chat/message'\n    },\n    SOCIAL: {\n        // Core social media endpoints\n        SENTIMENT: '/api/social/sentiment',\n        TRENDING: '/api/social/trending-topics',\n        INFLUENTIAL: '/api/social/influential',\n        TWEETS: '/api/social/tweets'\n    },\n    MANGO: {\n        // Mango Markets API endpoints\n        BASE: '/api/mango',\n        OHLCV: '/api/mango/ohlcv',\n        MARKETS: '/api/mango/markets',\n        ORDER_BOOK: '/api/mango/orderbook',\n        TRADES: '/api/mango/trades',\n        MARKET_STATS: '/api/mango/market-stats',\n        COMMUNITIES: '/api/social/communities',\n        ENTITIES: '/api/social/entities',\n        FEED: '/api/social/feed',\n        CONNECTIONS: '/api/social/connections'\n    },\n    TRADING: {\n        EXECUTE: '/api/trading/execute',\n        CONFIRM: '/api/trading/confirm',\n        SMART_SETTINGS: '/api/trading/smart-settings',\n        TOKENS: '/api/trading/tokens',\n        PRICE_CHART: '/api/trading/price-chart',\n        SWAP: '/api/trading/swap',\n        SELL_POSITION: '/api/trading/sell-position',\n        USER_POSITIONS: '/api/user/positions',\n        LEVERAGE_POSITIONS: '/api/user/leverage_positions',\n        SPOT_POSITIONS: '/api/user/spot_positions'\n    },\n    SETTINGS: {\n        // Updated to match backend implementation\n        PROFILE: '/api/user/settings',\n        NOTIFICATIONS: '/api/settings/notifications',\n        // Additional backend settings endpoint\n        TRADING_SETTINGS: '/api/trading/smart-settings'\n    }\n};\n/**\n * Normalize different API response formats to a consistent structure\n * \n * This prioritizes API response formats in a predictable order:\n * 1. Auth responses with token and user\n * 2. Standard success responses with data\n * 3. Results-based responses\n * 4. Default pass-through\n */ function normalizeResponse(responseData) {\n    // Handle auth responses with token\n    if (responseData && typeof responseData === 'object' && 'token' in responseData) {\n        // Save the token when received in the response\n        saveAuthToken(responseData.token);\n        // Remove token from response data to avoid exposing it\n        const { token, ...rest } = responseData;\n        return rest;\n    }\n    // Handle standard success response format\n    if (responseData && typeof responseData === 'object' && 'success' in responseData) {\n        return responseData;\n    }\n    // Handle results-based response format\n    if (responseData && typeof responseData === 'object' && 'results' in responseData) {\n        return {\n            success: true,\n            data: responseData.results,\n            ...responseData\n        };\n    }\n    // Default: pass through the response data as-is\n    // Some endpoints return results in a 'results' property\n    if (responseData.results) {\n        return responseData.results;\n    }\n    // PRIORITY 4: Handle direct data format without success flag\n    // Some old endpoints return {data: {...}} directly\n    if (responseData.data && responseData.success === undefined) {\n        return responseData.data;\n    }\n    // Fall back to returning the entire response as is\n    return responseData;\n}\n/**\n * Process the API response and handle errors consistently\n */ async function processResponse(response) {\n    try {\n        // Clone the response so we can read it multiple times\n        const responseClone = response.clone();\n        // First try to parse as JSON, but handle non-JSON responses gracefully\n        let data;\n        try {\n            data = await response.json();\n            // If we get a new token in the response, save it\n            if (data && data.token) {\n                saveAuthToken(data.token);\n            }\n        } catch (e) {\n            // If we can't parse as JSON, return the text response\n            const text = await response.text();\n            return {\n                success: false,\n                error: text || 'Invalid response format',\n                statusCode: response.status,\n                rawResponse: responseClone\n            };\n        }\n        // Handle HTTP error status codes\n        if (!response.ok) {\n            // If we get a 401, clear the auth token\n            if (response.status === 401) {\n                removeAuthToken();\n                // You might want to redirect to login here or handle the unauthorized state\n                window.location.href = '/login';\n            }\n            return {\n                success: false,\n                error: data?.message || data?.error || `HTTP error ${response.status}`,\n                statusCode: response.status,\n                data,\n                rawResponse: responseClone\n            };\n        }\n        // Success case - normalize the response data\n        return {\n            success: true,\n            data: normalizeResponse(data),\n            statusCode: response.status,\n            rawResponse: responseClone\n        };\n    } catch (error) {\n        console.error('Error processing response:', error);\n        return {\n            success: false,\n            error: error instanceof Error ? error.message : 'Unknown error processing response',\n            rawResponse: response.clone()\n        };\n    }\n}\n/**\n * Make an API request with proper error handling\n */ async function apiRequest(endpoint, options = {}) {\n    try {\n        // Get base URL from environment or use relative path\n        const baseUrl = process.env.NEXT_PUBLIC_API_URL || '';\n        const url = endpoint.startsWith('http') ? endpoint : `${baseUrl}${endpoint}`;\n        // Add auth headers to the request\n        const requestOptions = addAuthHeaders({\n            ...options,\n            credentials: 'include',\n            headers: {\n                ...options.headers,\n                'Content-Type': 'application/json'\n            }\n        });\n        const response = await fetch(url, requestOptions);\n        return await processResponse(response);\n    } catch (error) {\n        if (error instanceof ApiError) {\n            // Rethrow ApiError instances\n            throw error;\n        }\n        // Handle network errors\n        throw new ApiError(error instanceof Error ? error.message : 'Network error', 0);\n    }\n}\n// Convenience methods for common HTTP methods\nconst api = {\n    async get (endpoint, options = {}) {\n        return apiRequest(endpoint, {\n            ...options,\n            method: 'GET'\n        });\n    },\n    async post (endpoint, data, options = {}) {\n        return apiRequest(endpoint, {\n            ...options,\n            method: 'POST',\n            body: JSON.stringify(data)\n        });\n    },\n    async put (endpoint, data, options = {}) {\n        return apiRequest(endpoint, {\n            ...options,\n            method: 'PUT',\n            body: JSON.stringify(data)\n        });\n    },\n    async delete (endpoint, options = {}) {\n        return apiRequest(endpoint, {\n            ...options,\n            method: 'DELETE'\n        });\n    }\n};\n// Chat API methods\nconst ChatApi = {\n    /**\n   * Get all chat sessions for the authenticated user\n   * @returns Promise with list of chat sessions\n   */ /**\n   * Get all chat sessions for the authenticated user\n   * @param limit Optional limit for pagination\n   * @param offset Optional offset for pagination\n   * @returns Promise with list of chat sessions and pagination info\n   */ async getSessions (limit, offset) {\n        try {\n            const params = new URLSearchParams();\n            if (limit) params.append('limit', limit.toString());\n            if (offset) params.append('offset', offset.toString());\n            const query = params.toString();\n            const url = query ? `${API_ENDPOINTS.CHAT.SESSIONS}?${query}` : API_ENDPOINTS.CHAT.SESSIONS;\n            const response = await api.get(url);\n            return {\n                sessions: response.data?.data || [],\n                total: response.data?.total || 0,\n                has_more: response.data?.has_more || false\n            };\n        } catch (error) {\n            const errorMessage = error.response?.data?.error || 'Failed to fetch chat sessions';\n            const usingFallback = error.response?.data?.using_fallback;\n            console.error('Error fetching chat sessions:', errorMessage, {\n                usingFallback\n            });\n            throw new Error(errorMessage);\n        }\n    },\n    /**\n   * Create a new chat session\n   * @param title Optional title for the new session\n   * @returns Promise with the new session ID\n   */ async createSession (title) {\n        try {\n            const response = await api.post(API_ENDPOINTS.CHAT.NEW_SESSION, {\n                title: title || 'New Chat'\n            });\n            if (!response.data?.session_id) {\n                throw new Error('Invalid response format from server');\n            }\n            return {\n                session_id: response.data.session_id\n            };\n        } catch (error) {\n            console.error('Error creating chat session:', error);\n            throw new Error('Failed to create chat session');\n        }\n    },\n    /**\n   * Get chat history for a specific session\n   * @param sessionId ID of the chat session\n   * @returns Promise with chat history\n   */ /**\n   * Get chat history for a specific session\n   * @param sessionId ID of the chat session\n   * @param limit Optional limit for pagination\n   * @param offset Optional offset for pagination\n   * @returns Promise with chat history and pagination info\n   */ async getHistory (sessionId, limit, offset) {\n        try {\n            const params = new URLSearchParams();\n            if (limit) params.append('limit', limit.toString());\n            if (offset) params.append('offset', offset.toString());\n            const query = params.toString();\n            const url = query ? `${API_ENDPOINTS.CHAT.HISTORY(sessionId)}?${query}` : API_ENDPOINTS.CHAT.HISTORY(sessionId);\n            const response = await api.get(url);\n            return {\n                messages: response.data?.data || [],\n                total: response.data?.total || 0,\n                has_more: response.data?.has_more || false\n            };\n        } catch (error) {\n            const errorMessage = error.response?.data?.error || 'Failed to fetch chat history';\n            const usingFallback = error.response?.data?.using_fallback;\n            console.error('Error fetching chat history:', errorMessage, {\n                usingFallback\n            });\n            throw new Error(errorMessage);\n        }\n    },\n    /**\n   * Send a message in a chat session\n   * @param sessionId ID of the chat session\n   * @param message The message content\n   * @returns Promise with the assistant's response\n   */ /**\n   * Send a message in a chat session\n   * @param sessionId ID of the chat session\n   * @param message The message content\n   * @param metadata Optional metadata to include with the message\n   * @returns Promise with the assistant's response\n   */ async sendMessage (sessionId, message, metadata) {\n        try {\n            const response = await api.post(API_ENDPOINTS.CHAT.MESSAGE, {\n                session_id: sessionId,\n                message,\n                timestamp: new Date().toISOString(),\n                ...metadata && {\n                    metadata\n                }\n            });\n            if (!response.data || !response.data.data) {\n                throw new Error('Invalid response format from server');\n            }\n            return {\n                response: response.data.data.response || '',\n                metadata: response.data.data.metadata,\n                session_id: response.data.data.session_id || sessionId,\n                message_id: response.data.data.message_id || `msg_${Date.now()}`,\n                timestamp: response.data.data.timestamp || new Date().toISOString()\n            };\n        } catch (error) {\n            const errorMessage = error.response?.data?.error || 'Failed to send chat message';\n            const usingFallback = error.response?.data?.using_fallback;\n            console.error('Error sending chat message:', errorMessage, {\n                usingFallback\n            });\n            throw new Error(errorMessage);\n        }\n    }\n};\n// Trading API methods\nconst TradingApi = {\n    /**\n   * Execute a trade (first step of two-phase trade execution)\n   * @param params Trade execution parameters\n   * @returns Trade execution result with confirmation ID if confirmation required\n   */ async executeTrade (params) {\n        try {\n            const response = await api.post('/api/trading/execute', {\n                ...params,\n                amount: params.amount.toString()\n            });\n            return response.data;\n        } catch (error) {\n            console.error('Trade execution failed:', error);\n            throw new Error(error.response?.data?.error || 'Trade execution failed');\n        }\n    },\n    /**\n   * Confirm a pending trade (second step of two-phase trade execution)\n   * @param confirmationId The confirmation ID from executeTrade response\n   * @returns Final trade execution result\n   */ async confirmTrade (confirmationId) {\n        try {\n            const response = await api.post('/api/trading/confirm', {\n                confirmation_id: confirmationId\n            });\n            return response.data;\n        } catch (error) {\n            console.error('Trade confirmation failed:', error);\n            throw new Error(error.response?.data?.error || 'Trade confirmation failed');\n        }\n    },\n    /**\n   * Close an existing position (leverage or spot)\n   * @param params Position parameters to close\n   * @returns Position closing result\n   */ async closePosition (params) {\n        try {\n            const response = await api.post('/api/trading/sell-position', params);\n            return response.data;\n        } catch (error) {\n            console.error('Position closing failed:', error);\n            throw new Error(error.response?.data?.error || 'Failed to close position');\n        }\n    },\n    /**\n   * Sell a spot token for another token (usually USDC)\n   * @param params Token selling parameters\n   * @returns Token selling result\n   */ async sellToken (params) {\n        try {\n            const response = await api.post('/api/trading/sell-token', {\n                ...params,\n                amount: params.amount.toString()\n            });\n            return response.data;\n        } catch (error) {\n            console.error('Token selling failed:', error);\n            throw new Error(error.response?.data?.error || 'Failed to sell token');\n        }\n    },\n    /**\n   * Sell or close a position (full or partial)\n   * @param params Position selling parameters\n   * @returns Result of the position sale\n   */ async sellPosition (params) {\n        try {\n            const requestData = {\n                ...params\n            };\n            // If percentage is provided, adjust the amount accordingly\n            if (params.percentage && params.percentage > 0 && params.percentage < 100) {\n                requestData.amount = params.amount * params.percentage / 100;\n            }\n            const response = await api.post(API_ENDPOINTS.TRADING.SELL_POSITION, requestData);\n            return response.data;\n        } catch (error) {\n            console.error('Failed to close position:', error);\n            throw new Error(error.response?.data?.error || 'Failed to close position');\n        }\n    },\n    /**\n   * Get user's leverage positions from Mango V3\n   * @returns User's leverage positions with success/error status\n   */ async getUserLeveragePositions () {\n        try {\n            const response = await api.get(API_ENDPOINTS.USER.LEVERAGE_POSITIONS);\n            // If response already has the right format, return it directly\n            if (response.data && typeof response.data === 'object' && 'success' in response.data) {\n                return response.data;\n            }\n            // Otherwise format according to Mango V3 spec\n            const positions = Array.isArray(response.data) ? response.data : [];\n            return {\n                success: true,\n                positions,\n                metadata: {\n                    total_positions: positions.length,\n                    timestamp: new Date().toISOString()\n                }\n            };\n        } catch (error) {\n            console.error('Error fetching leverage positions:', error);\n            return {\n                success: false,\n                positions: [],\n                error: {\n                    message: error instanceof Error ? error.message : 'Failed to fetch leverage positions',\n                    code: 'POSITION_FETCH_ERROR'\n                }\n            };\n        }\n    },\n    /**\n   * Get user's spot positions from wallet balances\n   * @returns User's spot positions with success/error status\n   */ async getUserSpotPositions () {\n        try {\n            const response = await api.get(API_ENDPOINTS.USER.SPOT_POSITIONS);\n            // If response already has the right format, return it directly\n            if (response.data && typeof response.data === 'object' && 'success' in response.data) {\n                return response.data;\n            }\n            // Otherwise format according to Mango V3 spec\n            const positions = Array.isArray(response.data) ? response.data : [];\n            return {\n                success: true,\n                positions,\n                metadata: {\n                    total_positions: positions.length,\n                    timestamp: new Date().toISOString()\n                }\n            };\n        } catch (error) {\n            console.error('Error fetching spot positions:', error);\n            return {\n                success: false,\n                positions: [],\n                error: {\n                    message: error instanceof Error ? error.message : 'Failed to fetch spot positions',\n                    code: 'POSITION_FETCH_ERROR'\n                }\n            };\n        }\n    },\n    /**\n   * Get position history for a user with pagination and filtering\n   * @param params Query parameters for filtering position history\n   * @returns Promise with position history data\n   */ getPositionHistory: async (params)=>{\n        try {\n            // Build query parameters\n            const queryParams = new URLSearchParams();\n            if (params?.market) queryParams.append('market', params.market);\n            if (params?.startTime) queryParams.append('start_time', String(params.startTime));\n            if (params?.endTime) queryParams.append('end_time', String(params.endTime));\n            if (params?.interval) queryParams.append('interval', params.interval);\n            if (params?.includePnl !== undefined) queryParams.append('include_pnl', String(params.includePnl));\n            if (params?.includeLivePnl) queryParams.append('include_live_pnl', 'true');\n            if (params?.cursor) queryParams.append('cursor', params.cursor);\n            if (params?.limit) queryParams.append('limit', String(params.limit));\n            const response = await fetch(`${API_ENDPOINTS.USER.POSITION_HISTORY}?${queryParams.toString()}`, {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${getAuthToken()}`\n                }\n            });\n            const data = await response.json();\n            // Handle error responses\n            if (!response.ok) {\n                const errorData = data?.error || {};\n                throw new ApiError(errorData.message || `HTTP error! status: ${response.status}`, response.status, {\n                    code: errorData.code || 'api_error',\n                    status: errorData.status || response.status,\n                    timestamp: errorData.timestamp || new Date().toISOString(),\n                    ...errorData.details && {\n                        details: errorData.details\n                    }\n                });\n            }\n            // Transform the successful response to match the PositionHistoryResponse type\n            return {\n                success: data.success,\n                position_history: data.position_history || [],\n                pnl_over_time: data.pnl_over_time || [],\n                pagination: data.pagination || {\n                    has_more: data.metadata?.has_more || false,\n                    next_cursor: data.metadata?.cursor,\n                    limit: params?.limit || 100,\n                    total: data.metadata?.total || 0\n                },\n                metadata: {\n                    user_identifier: data.metadata?.user_identifier || '',\n                    market: params?.market || 'all',\n                    start_time: data.metadata?.start_time || new Date().toISOString(),\n                    end_time: data.metadata?.end_time || new Date().toISOString(),\n                    interval: params?.interval || '1d',\n                    total_positions: data.metadata?.total || 0,\n                    has_more: data.metadata?.has_more || false,\n                    cursor: data.metadata?.cursor\n                }\n            };\n        } catch (error) {\n            console.error('Error fetching position history:', error);\n            // Handle ApiError instances\n            if (error instanceof ApiError) {\n                return {\n                    success: false,\n                    position_history: [],\n                    pnl_over_time: [],\n                    pagination: {\n                        has_more: false,\n                        next_cursor: undefined,\n                        limit: params?.limit || 100,\n                        total: 0\n                    },\n                    metadata: {\n                        user_identifier: '',\n                        market: params?.market || 'all',\n                        start_time: new Date().toISOString(),\n                        end_time: new Date().toISOString(),\n                        interval: params?.interval || '1d',\n                        total_positions: 0,\n                        has_more: false\n                    },\n                    error: error.message,\n                    error_details: error.data\n                };\n            }\n            // Handle other types of errors\n            return {\n                success: false,\n                position_history: [],\n                pnl_over_time: [],\n                pagination: {\n                    has_more: false,\n                    next_cursor: undefined,\n                    limit: params?.limit || 100,\n                    total: 0\n                },\n                metadata: {\n                    user_identifier: '',\n                    market: params?.market || 'all',\n                    start_time: new Date().toISOString(),\n                    end_time: new Date().toISOString(),\n                    interval: params?.interval || '1d',\n                    total_positions: 0,\n                    has_more: false\n                },\n                error: error instanceof Error ? error.message : 'Unknown error',\n                error_details: {\n                    code: 'unexpected_error',\n                    status: 500,\n                    timestamp: new Date().toISOString()\n                }\n            };\n        }\n    },\n    /**\n   * Get detailed position history for a specific position\n   * @param positionId ID of the position to get history for\n   * @param params Additional query parameters\n   * @returns Promise with detailed position history\n   */ getPositionDetails: async (positionId, params)=>{\n        try {\n            // Convert params to query string\n            const queryParams = new URLSearchParams({\n                positionId\n            });\n            if (params?.startTime) queryParams.append('startTime', String(params.startTime));\n            if (params?.endTime) queryParams.append('endTime', String(params.endTime));\n            if (params?.interval) queryParams.append('interval', params.interval);\n            const endpoint = `${API_ENDPOINTS.USER.POSITION_HISTORY}/details?${queryParams.toString()}`;\n            // Create headers object with proper typing\n            const authHeaders = addAuthHeaders();\n            const headers = new Headers();\n            headers.append('Content-Type', 'application/json');\n            // Add auth headers if they exist\n            if (authHeaders) {\n                Object.entries(authHeaders).forEach(([key, value])=>{\n                    if (value) headers.append(key, value);\n                });\n            }\n            const response = await api.get(endpoint, {\n                headers\n            });\n            if (!response.success) {\n                throw new Error(response.error || 'Failed to fetch position details');\n            }\n            return response.data.data;\n        } catch (error) {\n            console.error('Error fetching position details:', error);\n            throw error;\n        }\n    }\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (api);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./api/apiClient.ts\n");

/***/ }),

/***/ "./components/AuthContext.tsx":
/*!************************************!*\
  !*** ./components/AuthContext.tsx ***!
  \************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthProvider: () => (/* binding */ AuthProvider),\n/* harmony export */   useAuth: () => (/* binding */ useAuth)\n/* harmony export */ });\n/* harmony import */ var _emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/react/jsx-dev-runtime */ \"@emotion/react/jsx-dev-runtime\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _api_apiClient__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../api/apiClient */ \"./api/apiClient.ts\");\n/* harmony import */ var _utils_devAuth__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/devAuth */ \"./utils/devAuth.ts\");\n/* harmony import */ var _utils_authUtils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/authUtils */ \"./utils/authUtils.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__]);\n_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n// src/ui/components/AuthContext.tsx\n\n\n\n\n// Import admin backdoor utilities\n\n// Import standardized auth utils\n\n// Improved session persistence utility to avoid conflicts with form state\nconst SessionPersistence = {\n    STORAGE_KEY: 'GRACE_SESSION_SNAPSHOT',\n    // Safely capture session snapshot with minimal data to avoid interference\n    captureSnapshot (user, token) {\n        try {\n            if (!user || !token) {\n                this.clearSnapshot();\n                return;\n            }\n            // Store only essential user identification data\n            // Avoid storing complete state that might conflict with forms\n            const snapshot = {\n                timestamp: Date.now(),\n                user: {\n                    id: user.id,\n                    username: user.username,\n                    email: user.email\n                },\n                // Don't store the actual token, just indicate authentication\n                authenticated: true\n            };\n            // Use sessionStorage instead of localStorage to avoid persisting between browser sessions\n            // This helps prevent stale data from affecting forms on future visits\n            sessionStorage.setItem(this.STORAGE_KEY, JSON.stringify(snapshot));\n        } catch (error) {\n            console.warn('Failed to capture session snapshot', error);\n        // Silently fail - don't let snapshot errors affect the application\n        }\n    },\n    // Retrieve session snapshot with validation\n    retrieveSnapshot () {\n        try {\n            const snapshotStr = sessionStorage.getItem(this.STORAGE_KEY);\n            if (!snapshotStr) return {\n                user: null,\n                token: null\n            };\n            const snapshot = JSON.parse(snapshotStr);\n            // Validate snapshot with expiration check (30 minutes)\n            const MAX_AGE = 30 * 60 * 1000; // 30 minutes in milliseconds\n            const isExpired = Date.now() - (snapshot.timestamp || 0) > MAX_AGE;\n            if (snapshot && snapshot.user && !isExpired) {\n                return {\n                    user: snapshot.user,\n                    // Get actual token from authUtils to ensure consistency\n                    token: (0,_utils_authUtils__WEBPACK_IMPORTED_MODULE_4__.getAuthToken)()\n                };\n            }\n            // Clear expired snapshot\n            if (isExpired) this.clearSnapshot();\n            return {\n                user: null,\n                token: null\n            };\n        } catch (error) {\n            console.warn('Failed to retrieve session snapshot', error);\n            this.clearSnapshot(); // Clear invalid snapshot\n            return {\n                user: null,\n                token: null\n            };\n        }\n    },\n    // Clear session snapshot\n    clearSnapshot () {\n        try {\n            sessionStorage.removeItem(this.STORAGE_KEY);\n        } catch (error) {\n            console.warn('Failed to clear session snapshot', error);\n        }\n    }\n};\nconst AuthContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(null);\nfunction AuthProvider({ children }) {\n    const [user, setUser] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const [isAuthenticated, setIsAuthenticated] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    // Use state for token to ensure it's updated when changed\n    const [token, setToken] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)((0,_utils_authUtils__WEBPACK_IMPORTED_MODULE_4__.getAuthToken)());\n    // Add flag to prevent verification immediately after login\n    const [skipNextVerification, setSkipNextVerification] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    // Update token state whenever auth state changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"AuthProvider.useEffect\": ()=>{\n            setToken((0,_utils_authUtils__WEBPACK_IMPORTED_MODULE_4__.getAuthToken)());\n        }\n    }[\"AuthProvider.useEffect\"], [\n        isAuthenticated\n    ]);\n    // Admin backdoor for quick access\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"AuthProvider.useEffect\": ()=>{\n            // Check if we should use the admin backdoor\n            if ((0,_utils_devAuth__WEBPACK_IMPORTED_MODULE_3__.hasAdminBypass)() && !isAuthenticated && !token) {\n                (0,_utils_devAuth__WEBPACK_IMPORTED_MODULE_3__.bypassLogin)(login);\n            }\n        }\n    }[\"AuthProvider.useEffect\"], []);\n    // Combined effect to handle authentication verification with safeguards\n    // This is a single effect to avoid race conditions from multiple effects\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"AuthProvider.useEffect\": ()=>{\n            // Create a request identifier to handle race conditions with concurrent requests\n            const requestId = Date.now();\n            let isMounted = true;\n            const verifyAuthentication = {\n                \"AuthProvider.useEffect.verifyAuthentication\": async ()=>{\n                    // Skip verification if we just logged in to avoid race conditions\n                    if (skipNextVerification) {\n                        setSkipNextVerification(false);\n                        setLoading(false);\n                        return;\n                    }\n                    if (!token) {\n                        if (isMounted) setLoading(false);\n                        return;\n                    }\n                    try {\n                        // Introduce a small delay to avoid blocking UI rendering\n                        // This prevents form rendering issues during verification\n                        await new Promise({\n                            \"AuthProvider.useEffect.verifyAuthentication\": (resolve)=>setTimeout(resolve, 50)\n                        }[\"AuthProvider.useEffect.verifyAuthentication\"]);\n                        // Early exit if component unmounted during the delay\n                        if (!isMounted) return;\n                        // Check if token is expired using standardized function\n                        if ((0,_utils_authUtils__WEBPACK_IMPORTED_MODULE_4__.isTokenExpired)()) {\n                            // Token expired, attempt to refresh\n                            const refreshSuccessful = await refreshToken();\n                            if (!refreshSuccessful) {\n                                throw new Error('Token refresh failed');\n                            }\n                        } else {\n                            // Verify token using apiClient with proper endpoint constant\n                            const { success, data } = await _api_apiClient__WEBPACK_IMPORTED_MODULE_2__[\"default\"].get(_api_apiClient__WEBPACK_IMPORTED_MODULE_2__.API_ENDPOINTS.AUTH.VERIFY_TOKEN);\n                            // Early exit if component unmounted during API call\n                            if (!isMounted) return;\n                            if (!success) throw new Error('Token verification failed');\n                            // Extract user data from the backend response\n                            if (data.success && data.user) {\n                                const newUser = data.user;\n                                setUser(newUser);\n                                setIsAuthenticated(true);\n                                // Capture session snapshot - won't interfere with form rendering now\n                                SessionPersistence.captureSnapshot(newUser, token);\n                            } else {\n                                throw new Error('Invalid user data');\n                            }\n                        }\n                    } catch (error) {\n                        // Only proceed if this is still the active request\n                        if (!isMounted) return;\n                        // Any error in verification flow leads to logout\n                        (0,_utils_authUtils__WEBPACK_IMPORTED_MODULE_4__.clearAuthTokens)();\n                        setToken(null);\n                        setUser(null);\n                        setIsAuthenticated(false);\n                    } finally{\n                        if (isMounted) setLoading(false);\n                    }\n                }\n            }[\"AuthProvider.useEffect.verifyAuthentication\"];\n            verifyAuthentication();\n            // Cleanup function to prevent race conditions\n            return ({\n                \"AuthProvider.useEffect\": ()=>{\n                    isMounted = false;\n                }\n            })[\"AuthProvider.useEffect\"];\n        }\n    }[\"AuthProvider.useEffect\"], [\n        token\n    ]); // Only depend on token to avoid race conditions\n    // Enhanced logging utility for authentication events\n    const logAuthEvent = (eventType, details = {})=>{\n        const timestamp = new Date().toISOString();\n        const logEntry = {\n            timestamp,\n            eventType,\n            ...details\n        };\n        // Optional: Send to backend logging service or store locally\n        console.log(JSON.stringify(logEntry));\n        // Store in local storage for potential debugging\n        try {\n            const authLogs = JSON.parse(localStorage.getItem('auth_logs') || '[]');\n            authLogs.push(logEntry);\n            // Keep only last 50 log entries\n            localStorage.setItem('auth_logs', JSON.stringify(authLogs.slice(-50)));\n        } catch (e) {\n            console.error('Failed to log authentication event', e);\n        }\n    };\n    // Check if user has a wallet and generate one if not available\n    const checkAndGenerateWallet = async ()=>{\n        try {\n            // Skip if not authenticated\n            if (!isAuthenticated || !token) {\n                return;\n            }\n            // First check if wallet already exists\n            const walletResponse = await _api_apiClient__WEBPACK_IMPORTED_MODULE_2__[\"default\"].get(_api_apiClient__WEBPACK_IMPORTED_MODULE_2__.API_ENDPOINTS.WALLET.INFO, {});\n            // If no wallet or wallet address is empty, generate a new one\n            if (!walletResponse.success || !walletResponse.data?.wallet?.wallet_address) {\n                console.log('No wallet found for user, generating a new internal wallet...');\n                // Generate a new wallet\n                const generateResponse = await _api_apiClient__WEBPACK_IMPORTED_MODULE_2__[\"default\"].post(_api_apiClient__WEBPACK_IMPORTED_MODULE_2__.API_ENDPOINTS.WALLET.GENERATE, {});\n                if (generateResponse.success) {\n                    console.log('Wallet generated successfully:', generateResponse.data?.wallet?.wallet_address);\n                    // You could set wallet info in state here if needed\n                    return generateResponse.data?.wallet;\n                } else {\n                    console.error('Failed to generate wallet:', generateResponse.error);\n                }\n            } else {\n                console.log('User wallet already exists:', walletResponse.data?.wallet?.wallet_address);\n                return walletResponse.data?.wallet;\n            }\n        } catch (error) {\n            console.error('Error checking/generating wallet:', error instanceof Error ? error.message : 'Unknown error');\n        }\n    };\n    // Implement token refresh functionality with exponential backoff\n    const refreshToken = async (retryCount = 0)=>{\n        const MAX_RETRIES = 3;\n        const BASE_DELAY = 1000; // 1 second initial delay\n        try {\n            logAuthEvent('TOKEN_REFRESH_ATTEMPT', {\n                retryCount\n            });\n            // Exponential backoff with jitter\n            if (retryCount > 0) {\n                const delay = BASE_DELAY * Math.pow(2, retryCount) * (1 + Math.random());\n                await new Promise((resolve)=>setTimeout(resolve, delay));\n            }\n            // Use the dedicated refresh token endpoint\n            const response = await _api_apiClient__WEBPACK_IMPORTED_MODULE_2__[\"default\"].post(_api_apiClient__WEBPACK_IMPORTED_MODULE_2__.API_ENDPOINTS.AUTH.REFRESH_TOKEN, {});\n            if (!response.success || !response.data?.token) {\n                throw new Error('Token refresh failed: Invalid response');\n            }\n            const { token, username } = response.data;\n            // Determine storage type based on where the current token is stored\n            const inLocalStorage = localStorage.getItem(_utils_authUtils__WEBPACK_IMPORTED_MODULE_4__.TOKEN_KEY) !== null;\n            const rememberMe = inLocalStorage; // If in localStorage, user wanted persistent login\n            // Store the new token with the same preference\n            await (0,_utils_authUtils__WEBPACK_IMPORTED_MODULE_4__.storeAuthToken)(token, rememberMe);\n            // Update local token state\n            setToken(token);\n            setIsAuthenticated(true);\n            // Optional: Update username if provided\n            if (username) {\n                setUser((prevUser)=>({\n                        ...prevUser,\n                        username\n                    }));\n            }\n            logAuthEvent('TOKEN_REFRESH_SUCCESS', {\n                username\n            });\n            return true;\n        } catch (error) {\n            const errorMessage = error instanceof Error ? error.message : 'Unknown refresh error';\n            logAuthEvent('TOKEN_REFRESH_FAILURE', {\n                errorMessage,\n                retryCount,\n                errorStack: error instanceof Error ? error.stack : undefined\n            });\n            // Implement retry mechanism\n            if (retryCount < MAX_RETRIES) {\n                console.warn(`Token refresh attempt ${retryCount + 1} failed. Retrying...`);\n                return refreshToken(retryCount + 1);\n            }\n            // Final fallback: logout after max retries\n            console.error('Token refresh failed after maximum retries');\n            logout();\n            return false;\n        }\n    };\n    const login = async (data)=>{\n        try {\n            if (!data.token) {\n                throw new Error('No token found in login data');\n            }\n            // Store token with remember me preference if provided\n            const rememberMe = data.remember_me !== undefined ? data.remember_me : true; // Default to true for persistent login\n            // Store token and wait for it to complete\n            await (0,_utils_authUtils__WEBPACK_IMPORTED_MODULE_4__.storeAuthToken)(data.token, rememberMe);\n            // Update application state\n            setToken(data.token); // Ensure token state is synchronized\n            setUser(data.user || {});\n            setIsAuthenticated(true);\n            // Capture minimal session data after successful login\n            if (data.user) {\n                SessionPersistence.captureSnapshot(data.user, data.token);\n            }\n            // Set flag to skip next verification cycle to avoid race condition\n            setSkipNextVerification(true);\n            // Automatically check for wallet and generate if needed\n            // This ensures every user has a wallet automatically\n            setTimeout(()=>{\n                checkAndGenerateWallet();\n            }, 500); // Small delay to ensure auth is fully established\n        } catch (error) {\n            console.error('Login failed:', error instanceof Error ? error.message : 'Unknown error');\n            // Ensure auth state is reset if login fails\n            setTimeout(()=>{\n                (0,_utils_authUtils__WEBPACK_IMPORTED_MODULE_4__.clearAuthTokens)();\n                SessionPersistence.clearSnapshot();\n            }, 0);\n            setToken(null);\n            setUser(null);\n            setIsAuthenticated(false);\n        }\n    };\n    const logout = async ()=>{\n        try {\n            // Call logout endpoint if token exists\n            if (token) {\n                // Use standardized apiClient for logout\n                await _api_apiClient__WEBPACK_IMPORTED_MODULE_2__[\"default\"].post(_api_apiClient__WEBPACK_IMPORTED_MODULE_2__.API_ENDPOINTS.AUTH.LOGOUT, {});\n            }\n        } catch (error) {\n            console.error('Logout error:', error);\n        } finally{\n            // Clear session snapshot\n            SessionPersistence.clearSnapshot();\n            // Always clear local token storage\n            (0,_utils_authUtils__WEBPACK_IMPORTED_MODULE_4__.clearAuthTokens)();\n            setToken(null);\n            setUser(null);\n            setIsAuthenticated(false);\n        }\n    };\n    return /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(AuthContext.Provider, {\n        value: {\n            user,\n            login,\n            logout,\n            loading,\n            refreshToken,\n            isAuthenticated\n        },\n        children: children\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\manjo\\\\Downloads\\\\grace_project_docker\\\\grace_project\\\\src\\\\ui\\\\components\\\\AuthContext.tsx\",\n        lineNumber: 403,\n        columnNumber: 5\n    }, this);\n}\nconst useAuth = ()=>{\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(AuthContext);\n    if (!context) {\n        throw new Error('useAuth must be used within an AuthProvider');\n    }\n    return context;\n};\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/AuthContext.tsx\n");

/***/ }),

/***/ "./components/ErrorBoundary.tsx":
/*!**************************************!*\
  !*** ./components/ErrorBoundary.tsx ***!
  \**************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/react/jsx-dev-runtime */ \"@emotion/react/jsx-dev-runtime\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__]);\n_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\nclass ErrorBoundary extends react__WEBPACK_IMPORTED_MODULE_1__.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            hasError: false,\n            error: null\n        };\n    }\n    static getDerivedStateFromError(error) {\n        return {\n            hasError: true,\n            error\n        };\n    }\n    componentDidCatch(error, errorInfo) {\n        console.error(`Error in component ${this.props.componentName || 'unknown'}:`, error, errorInfo);\n        if (this.props.onError) {\n            this.props.onError(error, errorInfo);\n        }\n    }\n    render() {\n        if (this.state.hasError) {\n            if (this.props.fallback) {\n                return this.props.fallback;\n            }\n            return /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"error-boundary p-4 m-2 bg-red-100 border border-red-400 text-red-700 rounded\",\n                children: [\n                    /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                        className: \"font-bold\",\n                        children: [\n                            \"Something went wrong in \",\n                            this.props.componentName || 'this component'\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\manjo\\\\Downloads\\\\grace_project_docker\\\\grace_project\\\\src\\\\ui\\\\components\\\\ErrorBoundary.tsx\",\n                        lineNumber: 43,\n                        columnNumber: 11\n                    }, this),\n                    /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"details\", {\n                        className: \"whitespace-pre-wrap text-sm mt-2\",\n                        children: [\n                            /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"summary\", {\n                                children: \"View error details\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\manjo\\\\Downloads\\\\grace_project_docker\\\\grace_project\\\\src\\\\ui\\\\components\\\\ErrorBoundary.tsx\",\n                                lineNumber: 45,\n                                columnNumber: 13\n                            }, this),\n                            /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                className: \"mt-1\",\n                                children: this.state.error?.toString()\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\manjo\\\\Downloads\\\\grace_project_docker\\\\grace_project\\\\src\\\\ui\\\\components\\\\ErrorBoundary.tsx\",\n                                lineNumber: 46,\n                                columnNumber: 13\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\manjo\\\\Downloads\\\\grace_project_docker\\\\grace_project\\\\src\\\\ui\\\\components\\\\ErrorBoundary.tsx\",\n                        lineNumber: 44,\n                        columnNumber: 11\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"C:\\\\Users\\\\manjo\\\\Downloads\\\\grace_project_docker\\\\grace_project\\\\src\\\\ui\\\\components\\\\ErrorBoundary.tsx\",\n                lineNumber: 42,\n                columnNumber: 9\n            }, this);\n        }\n        return this.props.children;\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ErrorBoundary);\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL0Vycm9yQm91bmRhcnkudHN4IiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQStEO0FBYy9ELE1BQU1FLHNCQUFzQkQsNENBQVNBO0lBQ25DLFlBQVlFLEtBQVksQ0FBRTtRQUN4QixLQUFLLENBQUNBO1FBQ04sSUFBSSxDQUFDQyxLQUFLLEdBQUc7WUFDWEMsVUFBVTtZQUNWQyxPQUFPO1FBQ1Q7SUFDRjtJQUVBLE9BQU9DLHlCQUF5QkQsS0FBWSxFQUFTO1FBQ25ELE9BQU87WUFBRUQsVUFBVTtZQUFNQztRQUFNO0lBQ2pDO0lBRUFFLGtCQUFrQkYsS0FBWSxFQUFFRyxTQUFvQixFQUFRO1FBQzFEQyxRQUFRSixLQUFLLENBQUMsQ0FBQyxtQkFBbUIsRUFBRSxJQUFJLENBQUNILEtBQUssQ0FBQ1EsYUFBYSxJQUFJLFVBQVUsQ0FBQyxDQUFDLEVBQUVMLE9BQU9HO1FBQ3JGLElBQUksSUFBSSxDQUFDTixLQUFLLENBQUNTLE9BQU8sRUFBRTtZQUN0QixJQUFJLENBQUNULEtBQUssQ0FBQ1MsT0FBTyxDQUFDTixPQUFPRztRQUM1QjtJQUNGO0lBRUFJLFNBQW9CO1FBQ2xCLElBQUksSUFBSSxDQUFDVCxLQUFLLENBQUNDLFFBQVEsRUFBRTtZQUN2QixJQUFJLElBQUksQ0FBQ0YsS0FBSyxDQUFDVyxRQUFRLEVBQUU7Z0JBQ3ZCLE9BQU8sSUFBSSxDQUFDWCxLQUFLLENBQUNXLFFBQVE7WUFDNUI7WUFFQSxxQkFDRSx1RUFBQ0M7Z0JBQUlDLFdBQVU7O2tDQUNiLHVFQUFDQzt3QkFBR0QsV0FBVTs7NEJBQVk7NEJBQXlCLElBQUksQ0FBQ2IsS0FBSyxDQUFDUSxhQUFhLElBQUk7Ozs7Ozs7a0NBQy9FLHVFQUFDTzt3QkFBUUYsV0FBVTs7MENBQ2pCLHVFQUFDRzswQ0FBUTs7Ozs7OzBDQUNULHVFQUFDQztnQ0FBRUosV0FBVTswQ0FBUSxJQUFJLENBQUNaLEtBQUssQ0FBQ0UsS0FBSyxFQUFFZTs7Ozs7Ozs7Ozs7Ozs7Ozs7O1FBSS9DO1FBRUEsT0FBTyxJQUFJLENBQUNsQixLQUFLLENBQUNtQixRQUFRO0lBQzVCO0FBQ0Y7QUFFQSxpRUFBZXBCLGFBQWFBLEVBQUMiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbWFuam9cXERvd25sb2Fkc1xcZ3JhY2VfcHJvamVjdF9kb2NrZXJcXGdyYWNlX3Byb2plY3RcXHNyY1xcdWlcXGNvbXBvbmVudHNcXEVycm9yQm91bmRhcnkudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQsIEVycm9ySW5mbywgUmVhY3ROb2RlIH0gZnJvbSAncmVhY3QnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBjaGlsZHJlbjogUmVhY3ROb2RlO1xuICBmYWxsYmFjaz86IFJlYWN0Tm9kZTtcbiAgb25FcnJvcj86IChlcnJvcjogRXJyb3IsIGVycm9ySW5mbzogRXJyb3JJbmZvKSA9PiB2b2lkO1xuICBjb21wb25lbnROYW1lPzogc3RyaW5nO1xufVxuXG5pbnRlcmZhY2UgU3RhdGUge1xuICBoYXNFcnJvcjogYm9vbGVhbjtcbiAgZXJyb3I6IEVycm9yIHwgbnVsbDtcbn1cblxuY2xhc3MgRXJyb3JCb3VuZGFyeSBleHRlbmRzIENvbXBvbmVudDxQcm9wcywgU3RhdGU+IHtcbiAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7IFxuICAgICAgaGFzRXJyb3I6IGZhbHNlLFxuICAgICAgZXJyb3I6IG51bGxcbiAgICB9O1xuICB9XG5cbiAgc3RhdGljIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcihlcnJvcjogRXJyb3IpOiBTdGF0ZSB7XG4gICAgcmV0dXJuIHsgaGFzRXJyb3I6IHRydWUsIGVycm9yIH07XG4gIH1cblxuICBjb21wb25lbnREaWRDYXRjaChlcnJvcjogRXJyb3IsIGVycm9ySW5mbzogRXJyb3JJbmZvKTogdm9pZCB7XG4gICAgY29uc29sZS5lcnJvcihgRXJyb3IgaW4gY29tcG9uZW50ICR7dGhpcy5wcm9wcy5jb21wb25lbnROYW1lIHx8ICd1bmtub3duJ306YCwgZXJyb3IsIGVycm9ySW5mbyk7XG4gICAgaWYgKHRoaXMucHJvcHMub25FcnJvcikge1xuICAgICAgdGhpcy5wcm9wcy5vbkVycm9yKGVycm9yLCBlcnJvckluZm8pO1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlcigpOiBSZWFjdE5vZGUge1xuICAgIGlmICh0aGlzLnN0YXRlLmhhc0Vycm9yKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy5mYWxsYmFjaykge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5mYWxsYmFjaztcbiAgICAgIH1cbiAgICAgIFxuICAgICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJlcnJvci1ib3VuZGFyeSBwLTQgbS0yIGJnLXJlZC0xMDAgYm9yZGVyIGJvcmRlci1yZWQtNDAwIHRleHQtcmVkLTcwMCByb3VuZGVkXCI+XG4gICAgICAgICAgPGgzIGNsYXNzTmFtZT1cImZvbnQtYm9sZFwiPlNvbWV0aGluZyB3ZW50IHdyb25nIGluIHt0aGlzLnByb3BzLmNvbXBvbmVudE5hbWUgfHwgJ3RoaXMgY29tcG9uZW50J308L2gzPlxuICAgICAgICAgIDxkZXRhaWxzIGNsYXNzTmFtZT1cIndoaXRlc3BhY2UtcHJlLXdyYXAgdGV4dC1zbSBtdC0yXCI+XG4gICAgICAgICAgICA8c3VtbWFyeT5WaWV3IGVycm9yIGRldGFpbHM8L3N1bW1hcnk+XG4gICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJtdC0xXCI+e3RoaXMuc3RhdGUuZXJyb3I/LnRvU3RyaW5nKCl9PC9wPlxuICAgICAgICAgIDwvZGV0YWlscz5cbiAgICAgICAgPC9kaXY+XG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEVycm9yQm91bmRhcnk7XG4iXSwibmFtZXMiOlsiUmVhY3QiLCJDb21wb25lbnQiLCJFcnJvckJvdW5kYXJ5IiwicHJvcHMiLCJzdGF0ZSIsImhhc0Vycm9yIiwiZXJyb3IiLCJnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IiLCJjb21wb25lbnREaWRDYXRjaCIsImVycm9ySW5mbyIsImNvbnNvbGUiLCJjb21wb25lbnROYW1lIiwib25FcnJvciIsInJlbmRlciIsImZhbGxiYWNrIiwiZGl2IiwiY2xhc3NOYW1lIiwiaDMiLCJkZXRhaWxzIiwic3VtbWFyeSIsInAiLCJ0b1N0cmluZyIsImNoaWxkcmVuIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./components/ErrorBoundary.tsx\n");

/***/ }),

/***/ "./components/StateLoader.tsx":
/*!************************************!*\
  !*** ./components/StateLoader.tsx ***!
  \************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/react/jsx-dev-runtime */ \"@emotion/react/jsx-dev-runtime\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _context_AppStateContext__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../context/AppStateContext */ \"./context/AppStateContext.tsx\");\n/* harmony import */ var _utils_StateBackupService__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/StateBackupService */ \"./utils/StateBackupService.ts\");\n/* harmony import */ var _AuthContext__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./AuthContext */ \"./components/AuthContext.tsx\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__, _context_AppStateContext__WEBPACK_IMPORTED_MODULE_2__, _AuthContext__WEBPACK_IMPORTED_MODULE_4__]);\n([_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__, _context_AppStateContext__WEBPACK_IMPORTED_MODULE_2__, _AuthContext__WEBPACK_IMPORTED_MODULE_4__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n\nconst StateLoader = ({ children })=>{\n    const { isStateLoading, isStateHydrated, isStateRecovered, isStateSyncing, dispatch } = (0,_context_AppStateContext__WEBPACK_IMPORTED_MODULE_2__.useAppState)();\n    const { user, isAuthenticated } = (0,_AuthContext__WEBPACK_IMPORTED_MODULE_4__.useAuth)();\n    const [showSyncNotice, setShowSyncNotice] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [showHydrationNotice, setShowHydrationNotice] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [showRecoveryAttempt, setShowRecoveryAttempt] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const isInitialMount = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(true);\n    const backupService = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const recoveryAttemptMade = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    // Handle sync notice display and auto-hide\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"StateLoader.useEffect\": ()=>{\n            if (isStateSyncing) {\n                setShowSyncNotice(true);\n                // Auto-hide sync notice after 3 seconds\n                const timer = setTimeout({\n                    \"StateLoader.useEffect.timer\": ()=>setShowSyncNotice(false)\n                }[\"StateLoader.useEffect.timer\"], 3000);\n                return ({\n                    \"StateLoader.useEffect\": ()=>clearTimeout(timer)\n                })[\"StateLoader.useEffect\"];\n            }\n        }\n    }[\"StateLoader.useEffect\"], [\n        isStateSyncing\n    ]);\n    // Initialize the state backup service\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"StateLoader.useEffect\": ()=>{\n            if (isAuthenticated && user) {\n                try {\n                    // Initialize the backup service\n                    const service = _utils_StateBackupService__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getInstance();\n                    backupService.current = service;\n                    service.initialize().then({\n                        \"StateLoader.useEffect\": (success)=>{\n                            console.log(`State backup service initialized: ${success ? 'success' : 'fallback mode'}`);\n                        }\n                    }[\"StateLoader.useEffect\"]);\n                } catch (error) {\n                    console.error('Failed to initialize state backup service:', error);\n                }\n            }\n            return ({\n                \"StateLoader.useEffect\": ()=>{\n                    // Clean up backup service on unmount\n                    if (backupService.current) {\n                        backupService.current.stopPeriodicBackup();\n                    }\n                }\n            })[\"StateLoader.useEffect\"];\n        }\n    }[\"StateLoader.useEffect\"], [\n        isAuthenticated,\n        user\n    ]);\n    // Attempt recovery if needed\n    const attemptStateRecovery = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"StateLoader.useCallback[attemptStateRecovery]\": async ()=>{\n            if (!isStateHydrated && !isStateLoading && !recoveryAttemptMade.current) {\n                recoveryAttemptMade.current = true;\n                setShowRecoveryAttempt(true);\n                try {\n                    if (backupService.current) {\n                        const recoveredState = await backupService.current.attemptRecovery();\n                        if (recoveredState) {\n                            console.log('Successfully recovered state from backup source');\n                            dispatch({\n                                type: 'HYDRATE_STATE',\n                                payload: recoveredState\n                            });\n                            setShowHydrationNotice(true);\n                            setTimeout({\n                                \"StateLoader.useCallback[attemptStateRecovery]\": ()=>setShowHydrationNotice(false)\n                            }[\"StateLoader.useCallback[attemptStateRecovery]\"], 3000);\n                        }\n                    }\n                } catch (error) {\n                    console.error('Error during state recovery attempt:', error);\n                } finally{\n                    setShowRecoveryAttempt(false);\n                }\n            }\n        }\n    }[\"StateLoader.useCallback[attemptStateRecovery]\"], [\n        dispatch,\n        isStateHydrated,\n        isStateLoading\n    ]);\n    // Trigger recovery attempt if state is not hydrated\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"StateLoader.useEffect\": ()=>{\n            if (isAuthenticated && !isStateHydrated && !isStateLoading) {\n                const timer = setTimeout({\n                    \"StateLoader.useEffect.timer\": ()=>{\n                        attemptStateRecovery();\n                    }\n                }[\"StateLoader.useEffect.timer\"], 1000); // Wait 1 second before attempting recovery\n                return ({\n                    \"StateLoader.useEffect\": ()=>clearTimeout(timer)\n                })[\"StateLoader.useEffect\"];\n            }\n        }\n    }[\"StateLoader.useEffect\"], [\n        isAuthenticated,\n        isStateHydrated,\n        isStateLoading,\n        attemptStateRecovery\n    ]);\n    // Handle hydration notice only for non-initial state hydrations\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"StateLoader.useEffect\": ()=>{\n            // Skip the initial mount effect - this prevents showing notification on first load\n            if (isInitialMount.current) {\n                isInitialMount.current = false;\n                return;\n            }\n            // Only show hydration notice for subsequent hydrations\n            if (isStateHydrated && !isStateLoading) {\n                setShowHydrationNotice(true);\n                const timer = setTimeout({\n                    \"StateLoader.useEffect.timer\": ()=>setShowHydrationNotice(false)\n                }[\"StateLoader.useEffect.timer\"], 3000);\n                return ({\n                    \"StateLoader.useEffect\": ()=>clearTimeout(timer)\n                })[\"StateLoader.useEffect\"];\n            }\n        }\n    }[\"StateLoader.useEffect\"], [\n        isStateHydrated,\n        isStateLoading\n    ]);\n    if (isStateLoading || showRecoveryAttempt) {\n        return /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50\",\n            children: /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"bg-gray-900 p-6 rounded-lg shadow-lg text-center\",\n                children: [\n                    /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-gold mx-auto mb-4\"\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\manjo\\\\Downloads\\\\grace_project_docker\\\\grace_project\\\\src\\\\ui\\\\components\\\\StateLoader.tsx\",\n                        lineNumber: 108,\n                        columnNumber: 11\n                    }, undefined),\n                    /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                        className: \"text-xl font-semibold text-gold mb-2\",\n                        children: showRecoveryAttempt ? 'Recovering Your Data' : 'Loading Your Trading State'\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\manjo\\\\Downloads\\\\grace_project_docker\\\\grace_project\\\\src\\\\ui\\\\components\\\\StateLoader.tsx\",\n                        lineNumber: 109,\n                        columnNumber: 11\n                    }, undefined),\n                    /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                        className: \"text-gray-400\",\n                        children: showRecoveryAttempt ? 'Attempting to recover your session data...' : 'Restoring your previous session...'\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\manjo\\\\Downloads\\\\grace_project_docker\\\\grace_project\\\\src\\\\ui\\\\components\\\\StateLoader.tsx\",\n                        lineNumber: 112,\n                        columnNumber: 11\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"C:\\\\Users\\\\manjo\\\\Downloads\\\\grace_project_docker\\\\grace_project\\\\src\\\\ui\\\\components\\\\StateLoader.tsx\",\n                lineNumber: 107,\n                columnNumber: 9\n            }, undefined)\n        }, void 0, false, {\n            fileName: \"C:\\\\Users\\\\manjo\\\\Downloads\\\\grace_project_docker\\\\grace_project\\\\src\\\\ui\\\\components\\\\StateLoader.tsx\",\n            lineNumber: 106,\n            columnNumber: 7\n        }, undefined);\n    }\n    // Show recovery notification if state was recovered from corruption\n    if (isStateRecovered) {\n        return /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n            children: [\n                /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"fixed bottom-4 right-4 bg-gray-900 text-yellow-500 px-4 py-2 rounded shadow-lg  border border-yellow-600 transition-opacity duration-1000 z-40\",\n                    children: /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"flex items-center\",\n                        children: [\n                            /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"svg\", {\n                                xmlns: \"http://www.w3.org/2000/svg\",\n                                className: \"h-5 w-5 mr-2\",\n                                fill: \"none\",\n                                viewBox: \"0 0 24 24\",\n                                stroke: \"currentColor\",\n                                children: /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                                    strokeLinecap: \"round\",\n                                    strokeLinejoin: \"round\",\n                                    strokeWidth: 2,\n                                    d: \"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\"\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\manjo\\\\Downloads\\\\grace_project_docker\\\\grace_project\\\\src\\\\ui\\\\components\\\\StateLoader.tsx\",\n                                    lineNumber: 130,\n                                    columnNumber: 15\n                                }, undefined)\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\manjo\\\\Downloads\\\\grace_project_docker\\\\grace_project\\\\src\\\\ui\\\\components\\\\StateLoader.tsx\",\n                                lineNumber: 129,\n                                columnNumber: 13\n                            }, undefined),\n                            /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                children: \"Session was partially recovered due to data corruption\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\manjo\\\\Downloads\\\\grace_project_docker\\\\grace_project\\\\src\\\\ui\\\\components\\\\StateLoader.tsx\",\n                                lineNumber: 132,\n                                columnNumber: 13\n                            }, undefined)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\manjo\\\\Downloads\\\\grace_project_docker\\\\grace_project\\\\src\\\\ui\\\\components\\\\StateLoader.tsx\",\n                        lineNumber: 128,\n                        columnNumber: 11\n                    }, undefined)\n                }, void 0, false, {\n                    fileName: \"C:\\\\Users\\\\manjo\\\\Downloads\\\\grace_project_docker\\\\grace_project\\\\src\\\\ui\\\\components\\\\StateLoader.tsx\",\n                    lineNumber: 126,\n                    columnNumber: 9\n                }, undefined),\n                children\n            ]\n        }, void 0, true);\n    }\n    // Show a brief flash notification when state is hydrated but not on initial load\n    if (showHydrationNotice) {\n        return /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n            children: [\n                /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"fixed bottom-4 right-4 bg-gray-900 text-green-400 px-4 py-2 rounded shadow-lg  transition-opacity duration-1000 z-40\",\n                    children: /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"flex items-center\",\n                        children: [\n                            /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"svg\", {\n                                xmlns: \"http://www.w3.org/2000/svg\",\n                                className: \"h-5 w-5 mr-2\",\n                                fill: \"none\",\n                                viewBox: \"0 0 24 24\",\n                                stroke: \"currentColor\",\n                                children: /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                                    strokeLinecap: \"round\",\n                                    strokeLinejoin: \"round\",\n                                    strokeWidth: 2,\n                                    d: \"M5 13l4 4L19 7\"\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\manjo\\\\Downloads\\\\grace_project_docker\\\\grace_project\\\\src\\\\ui\\\\components\\\\StateLoader.tsx\",\n                                    lineNumber: 148,\n                                    columnNumber: 15\n                                }, undefined)\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\manjo\\\\Downloads\\\\grace_project_docker\\\\grace_project\\\\src\\\\ui\\\\components\\\\StateLoader.tsx\",\n                                lineNumber: 147,\n                                columnNumber: 13\n                            }, undefined),\n                            /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                children: \"Session restored successfully\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\manjo\\\\Downloads\\\\grace_project_docker\\\\grace_project\\\\src\\\\ui\\\\components\\\\StateLoader.tsx\",\n                                lineNumber: 150,\n                                columnNumber: 13\n                            }, undefined)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\manjo\\\\Downloads\\\\grace_project_docker\\\\grace_project\\\\src\\\\ui\\\\components\\\\StateLoader.tsx\",\n                        lineNumber: 146,\n                        columnNumber: 11\n                    }, undefined)\n                }, void 0, false, {\n                    fileName: \"C:\\\\Users\\\\manjo\\\\Downloads\\\\grace_project_docker\\\\grace_project\\\\src\\\\ui\\\\components\\\\StateLoader.tsx\",\n                    lineNumber: 144,\n                    columnNumber: 9\n                }, undefined),\n                children\n            ]\n        }, void 0, true);\n    }\n    // Show cross-tab sync notification\n    if (showSyncNotice) {\n        return /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n            children: [\n                /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"fixed bottom-4 right-4 bg-gray-800 text-blue-400 px-4 py-2 rounded shadow-lg  transition-opacity duration-300 z-40 border border-blue-600\",\n                    children: /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"flex items-center\",\n                        children: [\n                            /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"svg\", {\n                                xmlns: \"http://www.w3.org/2000/svg\",\n                                className: \"h-5 w-5 mr-2 animate-pulse\",\n                                fill: \"none\",\n                                viewBox: \"0 0 24 24\",\n                                stroke: \"currentColor\",\n                                children: /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                                    strokeLinecap: \"round\",\n                                    strokeLinejoin: \"round\",\n                                    strokeWidth: 2,\n                                    d: \"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\"\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\manjo\\\\Downloads\\\\grace_project_docker\\\\grace_project\\\\src\\\\ui\\\\components\\\\StateLoader.tsx\",\n                                    lineNumber: 166,\n                                    columnNumber: 15\n                                }, undefined)\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\manjo\\\\Downloads\\\\grace_project_docker\\\\grace_project\\\\src\\\\ui\\\\components\\\\StateLoader.tsx\",\n                                lineNumber: 165,\n                                columnNumber: 13\n                            }, undefined),\n                            /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                children: \"Syncing state from another tab...\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\manjo\\\\Downloads\\\\grace_project_docker\\\\grace_project\\\\src\\\\ui\\\\components\\\\StateLoader.tsx\",\n                                lineNumber: 168,\n                                columnNumber: 13\n                            }, undefined)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\manjo\\\\Downloads\\\\grace_project_docker\\\\grace_project\\\\src\\\\ui\\\\components\\\\StateLoader.tsx\",\n                        lineNumber: 164,\n                        columnNumber: 11\n                    }, undefined)\n                }, void 0, false, {\n                    fileName: \"C:\\\\Users\\\\manjo\\\\Downloads\\\\grace_project_docker\\\\grace_project\\\\src\\\\ui\\\\components\\\\StateLoader.tsx\",\n                    lineNumber: 162,\n                    columnNumber: 9\n                }, undefined),\n                children\n            ]\n        }, void 0, true);\n    }\n    // Default render\n    return /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: children\n    }, void 0, false);\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (StateLoader);\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/StateLoader.tsx\n");

/***/ }),

/***/ "./context/AppStateContext.tsx":
/*!*************************************!*\
  !*** ./context/AppStateContext.tsx ***!
  \*************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AppStateProvider: () => (/* binding */ AppStateProvider),\n/* harmony export */   useAppState: () => (/* binding */ useAppState)\n/* harmony export */ });\n/* harmony import */ var _emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/react/jsx-dev-runtime */ \"@emotion/react/jsx-dev-runtime\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _utils_StatePersistence__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/StatePersistence */ \"./utils/StatePersistence.ts\");\n/* harmony import */ var _components_AuthContext__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../components/AuthContext */ \"./components/AuthContext.tsx\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__, _components_AuthContext__WEBPACK_IMPORTED_MODULE_3__]);\n([_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__, _components_AuthContext__WEBPACK_IMPORTED_MODULE_3__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n// Initial state object\nconst initialState = {\n    timestamp: Date.now(),\n    userSession: {},\n    authSession: {},\n    // Standard chatContext from DynamicStateSnapshot\n    chatContext: {\n        currentConversationId: undefined,\n        draftMessage: '',\n        lastMessageTimestamp: 0\n    },\n    // Extended chat state\n    chatState: {\n        activeSessions: [],\n        sessions: {},\n        draftMessages: {}\n    },\n    pageState: {},\n    widgetStates: {},\n    // State metadata\n    isHydrated: false,\n    isLoading: false,\n    lastSaved: 0,\n    // Extended state\n    tradingState: {},\n    walletState: {},\n    socialState: {},\n    uiState: {\n        darkMode: true,\n        sidebarOpen: true\n    },\n    xfeed: {\n        followedAccounts: [],\n        lastUpdated: undefined\n    }\n};\n// State reducer\nfunction appStateReducer(state, action) {\n    switch(action.type){\n        case 'SET_TRADING_STATE':\n            return {\n                ...state,\n                tradingState: {\n                    ...state.tradingState,\n                    ...action.payload\n                }\n            };\n        case 'SET_WALLET_STATE':\n            return {\n                ...state,\n                walletState: {\n                    ...state.walletState,\n                    ...action.payload\n                }\n            };\n        case 'SET_CHAT_STATE':\n            return {\n                ...state,\n                chatState: {\n                    ...state.chatState,\n                    ...action.payload\n                }\n            };\n        case 'SET_SOCIAL_STATE':\n            return {\n                ...state,\n                socialState: {\n                    ...state.socialState,\n                    ...action.payload\n                }\n            };\n        case 'SET_UI_STATE':\n            return {\n                ...state,\n                uiState: {\n                    ...state.uiState,\n                    ...action.payload\n                }\n            };\n        case 'SET_PAGE_STATE':\n            return {\n                ...state,\n                pageState: {\n                    ...state.pageState,\n                    ...action.payload\n                }\n            };\n        case 'SET_WIDGET_STATES':\n            return {\n                ...state,\n                widgetStates: {\n                    ...state.widgetStates,\n                    ...action.payload\n                }\n            };\n        case 'SET_CHAT_CONTEXT':\n            return {\n                ...state,\n                chatContext: {\n                    ...state.chatContext,\n                    ...action.payload\n                }\n            };\n        case 'SET_USER_SESSION':\n            return {\n                ...state,\n                userSession: {\n                    ...state.userSession,\n                    ...action.payload\n                }\n            };\n        case 'UPDATE_AUTH':\n            const { user, token } = action.payload;\n            return {\n                ...state,\n                userSession: {\n                    ...state.userSession,\n                    token: token || '',\n                    username: user?.username || ''\n                },\n                authSession: {\n                    ...state.authSession,\n                    token: token || '',\n                    expiresAt: token ? Math.floor(Date.now() / 1000) + 24 * 60 * 60 : undefined\n                }\n            };\n        case 'UPDATE_XFEED':\n            return {\n                ...state,\n                xfeed: {\n                    ...state.xfeed,\n                    ...action.payload,\n                    lastUpdated: Date.now()\n                }\n            };\n        case 'HYDRATE_STATE':\n            return {\n                ...action.payload\n            };\n        case 'RESET_STATE':\n            return initialState;\n        // Compatibility aliases\n        case 'HYDRATE':\n            return {\n                ...action.payload\n            };\n        case 'RESET':\n            return initialState;\n        default:\n            return state;\n    }\n}\nconst AppStateContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\nfunction AppStateProvider({ children }) {\n    const [state, dispatch] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useReducer)(appStateReducer, initialState);\n    const [isStateLoading, setIsStateLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const [isStateHydrated, setIsStateHydrated] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [isStateRecovered, setIsStateRecovered] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [isStateSyncing, setIsStateSyncing] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const isUpdatingFromStorage = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    // Get auth state from AuthContext\n    const { user, isAuthenticated } = (0,_components_AuthContext__WEBPACK_IMPORTED_MODULE_3__.useAuth)();\n    // Sync auth state with AppState\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"AppStateProvider.useEffect\": ()=>{\n            dispatch({\n                type: 'UPDATE_AUTH',\n                payload: {\n                    user: isAuthenticated ? user : null,\n                    token: isAuthenticated ? localStorage.getItem('authToken') : null\n                }\n            });\n        }\n    }[\"AppStateProvider.useEffect\"], [\n        user,\n        isAuthenticated\n    ]);\n    // Hydrate state from storage on initial load\n    const hydrateFromStorage = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"AppStateProvider.useCallback[hydrateFromStorage]\": async (navigate)=>{\n            try {\n                setIsStateLoading(true);\n                // Get the stored state using the synchronous retrieveSnapshot method\n                const storedState = _utils_StatePersistence__WEBPACK_IMPORTED_MODULE_2__[\"default\"].retrieveSnapshot();\n                if (!storedState) {\n                    console.log('No stored state found');\n                    setIsStateHydrated(true);\n                    return;\n                }\n                console.log('Hydrating state from storage:', storedState);\n                // Create a clean state object with proper defaults\n                const hydratedState = {\n                    // Required fields from AppState\n                    timestamp: storedState.timestamp || Date.now(),\n                    isHydrated: true,\n                    lastSaved: 0,\n                    // Map user session\n                    userSession: {\n                        token: storedState.userSession?.token || '',\n                        username: storedState.userSession?.username || ''\n                    },\n                    // Map chat context (required by DynamicStateSnapshot)\n                    chatContext: {\n                        currentConversationId: storedState.chatContext?.currentConversationId,\n                        draftMessage: storedState.chatContext?.draftMessage || '',\n                        lastMessageTimestamp: storedState.chatContext?.lastMessageTimestamp || 0\n                    },\n                    // Map page state\n                    pageState: {\n                        lastVisitedPath: storedState.pageState?.lastVisitedPath || '/',\n                        scrollPositions: storedState.pageState?.scrollPositions || {}\n                    },\n                    // Map widget states\n                    widgetStates: {\n                        tradingPositions: storedState.widgetStates?.tradingPositions || [],\n                        walletBalance: storedState.widgetStates?.walletBalance || 0\n                    },\n                    // Map extended chat state\n                    chatState: {\n                        activeSessions: storedState.chatState?.activeSessions || [],\n                        currentSessionId: storedState.chatState?.currentSessionId,\n                        sessions: storedState.chatState?.sessions || {},\n                        draftMessages: storedState.chatState?.draftMessages || {}\n                    },\n                    // Map trading state\n                    tradingState: storedState.tradingState ? {\n                        selectedToken: storedState.tradingState.selectedToken,\n                        watchlist: storedState.tradingState.watchlist || [],\n                        tradeHistory: storedState.tradingState.tradeHistory || [],\n                        tradeForm: storedState.tradingState.tradeForm,\n                        resolution: storedState.tradingState.resolution,\n                        search: storedState.tradingState.search,\n                        positions: storedState.tradingState.positions || []\n                    } : {},\n                    // Map wallet state\n                    walletState: storedState.walletState ? {\n                        connectedWallets: storedState.walletState.connectedWallets || [],\n                        transactions: storedState.walletState.transactions || []\n                    } : {},\n                    // Map social state\n                    socialState: storedState.socialState ? {\n                        posts: storedState.socialState.posts || [],\n                        following: storedState.socialState.following || [],\n                        notifications: storedState.socialState.notifications || []\n                    } : {},\n                    // Map UI state with defaults\n                    uiState: {\n                        darkMode: storedState.uiState?.darkMode ?? true,\n                        sidebarOpen: storedState.uiState?.sidebarOpen ?? true,\n                        activeTabs: storedState.uiState?.activeTabs || {}\n                    },\n                    // Initialize xfeed with default values since it's not in DynamicStateSnapshot\n                    xfeed: {\n                        followedAccounts: [],\n                        lastUpdated: undefined\n                    }\n                };\n                // Apply the hydrated state\n                dispatch({\n                    type: 'HYDRATE_STATE',\n                    payload: hydratedState\n                });\n                // Handle navigation if needed\n                if (navigate && hydratedState.pageState?.lastVisitedPath) {\n                    navigate(hydratedState.pageState.lastVisitedPath);\n                    // Restore scroll position after a small delay\n                    if (hydratedState.pageState.scrollPositions) {\n                        setTimeout({\n                            \"AppStateProvider.useCallback[hydrateFromStorage]\": ()=>{\n                                const scrollY = hydratedState.pageState?.scrollPositions?.[hydratedState.pageState.lastVisitedPath || ''];\n                                if (typeof scrollY === 'number') {\n                                    window.scrollTo(0, scrollY);\n                                }\n                            }\n                        }[\"AppStateProvider.useCallback[hydrateFromStorage]\"], 100);\n                    }\n                }\n                // Check for active session in localStorage\n                const activeSessionId = localStorage.getItem('activeSessionId');\n                if (activeSessionId && !hydratedState.chatContext?.currentConversationId) {\n                    dispatch({\n                        type: 'SET_CHAT_CONTEXT',\n                        payload: {\n                            ...hydratedState.chatContext,\n                            currentConversationId: activeSessionId\n                        }\n                    });\n                }\n                // Mark as hydrated\n                setIsStateHydrated(true);\n            } catch (error) {\n                console.error('Error hydrating state:', error);\n                // Even if there's an error, we should mark as hydrated to prevent infinite loading\n                setIsStateHydrated(true);\n            } finally{\n                setIsStateLoading(false);\n            }\n        }\n    }[\"AppStateProvider.useCallback[hydrateFromStorage]\"], []);\n    // Initial hydration on mount\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"AppStateProvider.useEffect\": ()=>{\n            // Set loading state\n            dispatch({\n                type: 'SET_UI_STATE',\n                payload: {\n                    isLoading: true\n                }\n            });\n            // Small delay to allow UI to render loading state\n            const timer = setTimeout({\n                \"AppStateProvider.useEffect.timer\": ()=>{\n                    hydrateFromStorage();\n                    dispatch({\n                        type: 'SET_UI_STATE',\n                        payload: {\n                            isLoading: false\n                        }\n                    });\n                }\n            }[\"AppStateProvider.useEffect.timer\"], 300);\n            return ({\n                \"AppStateProvider.useEffect\": ()=>clearTimeout(timer)\n            })[\"AppStateProvider.useEffect\"];\n        }\n    }[\"AppStateProvider.useEffect\"], [\n        hydrateFromStorage\n    ]);\n    // Listen for changes from other tabs\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"AppStateProvider.useEffect\": ()=>{\n            const handleStorageChange = {\n                \"AppStateProvider.useEffect.handleStorageChange\": (event)=>{\n                    // Only process events for our storage key\n                    const STORAGE_KEY = 'GRACE_DYNAMIC_SNAPSHOT'; // Must match the key in StatePersistenceManager\n                    if (event.key === STORAGE_KEY) {\n                        // Prevent processing our own updates\n                        if (isUpdatingFromStorage.current) {\n                            return;\n                        }\n                        console.log('State changed in another tab, synchronizing...');\n                        try {\n                            // Update flag to prevent circular updates\n                            isUpdatingFromStorage.current = true;\n                            // Parse new state from storage\n                            const newState = event.newValue ? JSON.parse(event.newValue) : null;\n                            // Validate state before applying\n                            if (newState && typeof newState === 'object' && newState.timestamp) {\n                                // Signal that we're syncing from another tab\n                                setIsStateSyncing(true);\n                                // Only apply if the timestamp is newer\n                                if (!state.timestamp || newState.timestamp > state.timestamp) {\n                                    dispatch({\n                                        type: 'HYDRATE_STATE',\n                                        payload: newState\n                                    });\n                                    console.log('State synchronized from another tab');\n                                }\n                            }\n                            // Reset syncing state after a delay\n                            setTimeout({\n                                \"AppStateProvider.useEffect.handleStorageChange\": ()=>setIsStateSyncing(false)\n                            }[\"AppStateProvider.useEffect.handleStorageChange\"], 1000);\n                        } catch (error) {\n                            console.error('Error synchronizing state from another tab:', error);\n                        } finally{\n                            // Reset flag after a short delay\n                            setTimeout({\n                                \"AppStateProvider.useEffect.handleStorageChange\": ()=>{\n                                    isUpdatingFromStorage.current = false;\n                                }\n                            }[\"AppStateProvider.useEffect.handleStorageChange\"], 100);\n                        }\n                    }\n                }\n            }[\"AppStateProvider.useEffect.handleStorageChange\"];\n            // Add event listener for storage events\n            window.addEventListener('storage', handleStorageChange);\n            // Cleanup event listener on unmount\n            return ({\n                \"AppStateProvider.useEffect\": ()=>{\n                    window.removeEventListener('storage', handleStorageChange);\n                }\n            })[\"AppStateProvider.useEffect\"];\n        }\n    }[\"AppStateProvider.useEffect\"], [\n        state.timestamp\n    ]);\n    // Save state to storage whenever it changes with debounce to prevent race conditions\n    const debouncedSaveTimeout = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const lastSavedTimestamp = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(0);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"AppStateProvider.useEffect\": ()=>{\n            // Skip initial render to avoid overwriting with empty state\n            // Only proceed if we have some meaningful state to save\n            const hasContent = Object.keys(state.tradingState || {}).length > 0 || Object.keys(state.walletState || {}).length > 0 || Object.keys(state.chatContext || {}).length > 0 || Object.keys(state.chatState?.sessions || {}).length > 0;\n            if (hasContent) {\n                // Clear any existing timeout to debounce frequent updates\n                if (debouncedSaveTimeout.current !== null) {\n                    clearTimeout(debouncedSaveTimeout.current);\n                }\n                // Debounce state saves to prevent excessive writes and race conditions\n                debouncedSaveTimeout.current = window.setTimeout({\n                    \"AppStateProvider.useEffect\": ()=>{\n                        // Only save if we're not currently processing an update from storage\n                        if (!isUpdatingFromStorage.current) {\n                            // Don't save too frequently - at most once every 2 seconds\n                            const now = Date.now();\n                            if (now - lastSavedTimestamp.current > 2000) {\n                                lastSavedTimestamp.current = now;\n                                // Ensure timestamp is updated\n                                const stateToSave = {\n                                    ...state,\n                                    timestamp: now\n                                };\n                                // Add metadata for debugging\n                                if (state.chatContext?.currentConversationId) {\n                                    console.log(`Saving state with active conversation: ${state.chatContext.currentConversationId}`);\n                                }\n                                try {\n                                    ({\n                                        \"AppStateProvider.useEffect\": async ()=>{\n                                            try {\n                                                await _utils_StatePersistence__WEBPACK_IMPORTED_MODULE_2__[\"default\"].captureSnapshot(stateToSave);\n                                                console.log('State saved to localStorage', new Date().toISOString());\n                                                // Also ensure the activeSessionId is set in localStorage if we have a current conversation\n                                                if (state.chatContext?.currentConversationId) {\n                                                    localStorage.setItem('activeSessionId', state.chatContext.currentConversationId);\n                                                }\n                                            } catch (error) {\n                                                console.error('Error saving state to localStorage:', error);\n                                            }\n                                        }\n                                    })[\"AppStateProvider.useEffect\"]();\n                                } catch (error) {\n                                    console.error('Error in state persistence flow:', error);\n                                }\n                            }\n                        }\n                        debouncedSaveTimeout.current = null;\n                    }\n                }[\"AppStateProvider.useEffect\"], 300); // 300ms debounce time\n            }\n            // Cleanup timeout on unmount\n            return ({\n                \"AppStateProvider.useEffect\": ()=>{\n                    if (debouncedSaveTimeout.current !== null) {\n                        clearTimeout(debouncedSaveTimeout.current);\n                    }\n                }\n            })[\"AppStateProvider.useEffect\"];\n        }\n    }[\"AppStateProvider.useEffect\"], [\n        state\n    ]);\n    const contextValue = {\n        state,\n        dispatch,\n        isStateLoading,\n        isStateHydrated,\n        isStateRecovered,\n        isStateSyncing,\n        hydrateFromStorage\n    };\n    return /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(AppStateContext.Provider, {\n        value: contextValue,\n        children: children\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\manjo\\\\Downloads\\\\grace_project_docker\\\\grace_project\\\\src\\\\ui\\\\context\\\\AppStateContext.tsx\",\n        lineNumber: 548,\n        columnNumber: 5\n    }, this);\n}\n// Custom hook for using the app state\nfunction useAppState() {\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(AppStateContext);\n    if (context === undefined) {\n        throw new Error('useAppState must be used within an AppStateProvider');\n    }\n    return context;\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./context/AppStateContext.tsx\n");

/***/ }),

/***/ "./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES&page=%2F_error&preferredRegion=&absolutePagePath=.%2Fnode_modules%5Cnext%5Cdist%5Cpages%5C_error.js&absoluteAppPath=private-next-pages%2F_app&absoluteDocumentPath=private-next-pages%2F_document&middlewareConfigBase64=e30%3D!":
/*!*****************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES&page=%2F_error&preferredRegion=&absolutePagePath=.%2Fnode_modules%5Cnext%5Cdist%5Cpages%5C_error.js&absoluteAppPath=private-next-pages%2F_app&absoluteDocumentPath=private-next-pages%2F_document&middlewareConfigBase64=e30%3D! ***!
  \*****************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   getServerSideProps: () => (/* binding */ getServerSideProps),\n/* harmony export */   getStaticPaths: () => (/* binding */ getStaticPaths),\n/* harmony export */   getStaticProps: () => (/* binding */ getStaticProps),\n/* harmony export */   handler: () => (/* binding */ handler),\n/* harmony export */   reportWebVitals: () => (/* binding */ reportWebVitals),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   unstable_getServerProps: () => (/* binding */ unstable_getServerProps),\n/* harmony export */   unstable_getServerSideProps: () => (/* binding */ unstable_getServerSideProps),\n/* harmony export */   unstable_getStaticParams: () => (/* binding */ unstable_getStaticParams),\n/* harmony export */   unstable_getStaticPaths: () => (/* binding */ unstable_getStaticPaths),\n/* harmony export */   unstable_getStaticProps: () => (/* binding */ unstable_getStaticProps)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_pages_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/pages/module.compiled */ \"./node_modules/next/dist/server/route-modules/pages/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_pages_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"./node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"./node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var next_dist_shared_lib_router_utils_format_url__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/dist/shared/lib/router/utils/format-url */ \"next/dist/shared/lib/router/utils/format-url\");\n/* harmony import */ var next_dist_shared_lib_router_utils_format_url__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_router_utils_format_url__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/server/request-meta */ \"./node_modules/next/dist/server/request-meta.js\");\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_app_render_interop_default__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/app-render/interop-default */ \"./node_modules/next/dist/server/app-render/interop-default.js\");\n/* harmony import */ var next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! next/dist/server/instrumentation/utils */ \"./node_modules/next/dist/server/instrumentation/utils.js\");\n/* harmony import */ var next_dist_shared_lib_page_path_normalize_data_path__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! next/dist/shared/lib/page-path/normalize-data-path */ \"next/dist/shared/lib/page-path/normalize-data-path\");\n/* harmony import */ var next_dist_shared_lib_page_path_normalize_data_path__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_page_path_normalize_data_path__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! next/dist/server/response-cache */ \"./node_modules/next/dist/server/response-cache/index.js\");\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var private_next_pages_document__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! private-next-pages/_document */ \"./node_modules/next/dist/pages/_document.js\");\n/* harmony import */ var private_next_pages_document__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(private_next_pages_document__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var private_next_pages_app__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! private-next-pages/_app */ \"./pages/_app.tsx\");\n/* harmony import */ var _node_modules_next_dist_pages_error_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./node_modules\\next\\dist\\pages\\_error.js */ \"./node_modules/next/dist/pages/_error.js\");\n/* harmony import */ var _node_modules_next_dist_pages_error_js__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(_node_modules_next_dist_pages_error_js__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! next/dist/server/lib/cache-control */ \"./node_modules/next/dist/server/lib/cache-control.js\");\n/* harmony import */ var next_dist_shared_lib_utils__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! next/dist/shared/lib/utils */ \"next/dist/shared/lib/utils\");\n/* harmony import */ var next_dist_shared_lib_utils__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_utils__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var next_dist_lib_redirect_status__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! next/dist/lib/redirect-status */ \"./node_modules/next/dist/lib/redirect-status.js\");\n/* harmony import */ var next_dist_lib_redirect_status__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(next_dist_lib_redirect_status__WEBPACK_IMPORTED_MODULE_16__);\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! next/dist/lib/constants */ \"./node_modules/next/dist/lib/constants.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_17__);\n/* harmony import */ var next_dist_server_send_payload__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! next/dist/server/send-payload */ \"./node_modules/next/dist/server/send-payload.js\");\n/* harmony import */ var next_dist_server_send_payload__WEBPACK_IMPORTED_MODULE_18___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_send_payload__WEBPACK_IMPORTED_MODULE_18__);\n/* harmony import */ var next_dist_server_render_result__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! next/dist/server/render-result */ \"./node_modules/next/dist/server/render-result.js\");\n/* harmony import */ var next_dist_server_response_cache_utils__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! next/dist/server/response-cache/utils */ \"./node_modules/next/dist/server/response-cache/utils.js\");\n/* harmony import */ var next_dist_server_response_cache_utils__WEBPACK_IMPORTED_MODULE_20___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_response_cache_utils__WEBPACK_IMPORTED_MODULE_20__);\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! next/dist/shared/lib/no-fallback-error.external */ \"next/dist/shared/lib/no-fallback-error.external\");\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_21___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_21__);\n/* harmony import */ var next_dist_client_components_redirect_status_code__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! next/dist/client/components/redirect-status-code */ \"./node_modules/next/dist/client/components/redirect-status-code.js\");\n/* harmony import */ var next_dist_client_components_redirect_status_code__WEBPACK_IMPORTED_MODULE_22___default = /*#__PURE__*/__webpack_require__.n(next_dist_client_components_redirect_status_code__WEBPACK_IMPORTED_MODULE_22__);\n/* harmony import */ var next_dist_shared_lib_router_utils_is_bot__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! next/dist/shared/lib/router/utils/is-bot */ \"next/dist/shared/lib/router/utils/is-bot\");\n/* harmony import */ var next_dist_shared_lib_router_utils_is_bot__WEBPACK_IMPORTED_MODULE_23___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_router_utils_is_bot__WEBPACK_IMPORTED_MODULE_23__);\n/* harmony import */ var next_dist_shared_lib_router_utils_add_path_prefix__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! next/dist/shared/lib/router/utils/add-path-prefix */ \"next/dist/shared/lib/router/utils/add-path-prefix\");\n/* harmony import */ var next_dist_shared_lib_router_utils_add_path_prefix__WEBPACK_IMPORTED_MODULE_24___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_router_utils_add_path_prefix__WEBPACK_IMPORTED_MODULE_24__);\n/* harmony import */ var next_dist_shared_lib_router_utils_remove_trailing_slash__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! next/dist/shared/lib/router/utils/remove-trailing-slash */ \"next/dist/shared/lib/router/utils/remove-trailing-slash\");\n/* harmony import */ var next_dist_shared_lib_router_utils_remove_trailing_slash__WEBPACK_IMPORTED_MODULE_25___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_router_utils_remove_trailing_slash__WEBPACK_IMPORTED_MODULE_25__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([private_next_pages_app__WEBPACK_IMPORTED_MODULE_12__]);\nprivate_next_pages_app__WEBPACK_IMPORTED_MODULE_12__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\n\n\n\n\n\n\n\n// Import the app and document modules.\n\n\n// Import the userland code.\n\n\n\n\n\n\n\n\n\n\n\n\n\n// Re-export the component (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_10__.hoist)(_node_modules_next_dist_pages_error_js__WEBPACK_IMPORTED_MODULE_13__, 'default'));\n// Re-export methods.\nconst getStaticProps = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_10__.hoist)(_node_modules_next_dist_pages_error_js__WEBPACK_IMPORTED_MODULE_13__, 'getStaticProps');\nconst getStaticPaths = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_10__.hoist)(_node_modules_next_dist_pages_error_js__WEBPACK_IMPORTED_MODULE_13__, 'getStaticPaths');\nconst getServerSideProps = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_10__.hoist)(_node_modules_next_dist_pages_error_js__WEBPACK_IMPORTED_MODULE_13__, 'getServerSideProps');\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_10__.hoist)(_node_modules_next_dist_pages_error_js__WEBPACK_IMPORTED_MODULE_13__, 'config');\nconst reportWebVitals = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_10__.hoist)(_node_modules_next_dist_pages_error_js__WEBPACK_IMPORTED_MODULE_13__, 'reportWebVitals');\n// Re-export legacy methods.\nconst unstable_getStaticProps = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_10__.hoist)(_node_modules_next_dist_pages_error_js__WEBPACK_IMPORTED_MODULE_13__, 'unstable_getStaticProps');\nconst unstable_getStaticPaths = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_10__.hoist)(_node_modules_next_dist_pages_error_js__WEBPACK_IMPORTED_MODULE_13__, 'unstable_getStaticPaths');\nconst unstable_getStaticParams = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_10__.hoist)(_node_modules_next_dist_pages_error_js__WEBPACK_IMPORTED_MODULE_13__, 'unstable_getStaticParams');\nconst unstable_getServerProps = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_10__.hoist)(_node_modules_next_dist_pages_error_js__WEBPACK_IMPORTED_MODULE_13__, 'unstable_getServerProps');\nconst unstable_getServerSideProps = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_10__.hoist)(_node_modules_next_dist_pages_error_js__WEBPACK_IMPORTED_MODULE_13__, 'unstable_getServerSideProps');\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_route_modules_pages_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES,\n        page: \"/_error\",\n        pathname: \"/_error\",\n        // The following aren't used in production.\n        bundlePath: '',\n        filename: ''\n    },\n    distDir: \"out\" || 0,\n    projectDir:  false || '',\n    components: {\n        // default export might not exist when optimized for data only\n        App: private_next_pages_app__WEBPACK_IMPORTED_MODULE_12__[\"default\"],\n        Document: (private_next_pages_document__WEBPACK_IMPORTED_MODULE_11___default())\n    },\n    userland: _node_modules_next_dist_pages_error_js__WEBPACK_IMPORTED_MODULE_13__\n});\nasync function handler(req, res, ctx) {\n    var _serverFilesManifest_config_experimental, _serverFilesManifest_config;\n    let srcPage = \"/_error\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {} else if (srcPage === '/index') {\n        // we always normalize /index specifically\n        srcPage = '/';\n    }\n    const multiZoneDraftMode = \"false\";\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage,\n        multiZoneDraftMode\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return;\n    }\n    const { buildId, query, params, parsedUrl, originalQuery, originalPathname, buildManifest, nextFontManifest, serverFilesManifest, reactLoadableManifest, prerenderManifest, isDraftMode, isOnDemandRevalidate, revalidateOnlyGenerated, locale, locales, defaultLocale, routerServerContext, nextConfig, resolvedPathname } = prepareResult;\n    const isExperimentalCompile = serverFilesManifest == null ? void 0 : (_serverFilesManifest_config = serverFilesManifest.config) == null ? void 0 : (_serverFilesManifest_config_experimental = _serverFilesManifest_config.experimental) == null ? void 0 : _serverFilesManifest_config_experimental.isExperimentalCompile;\n    const hasServerProps = Boolean(getServerSideProps);\n    const hasStaticProps = Boolean(getStaticProps);\n    const hasStaticPaths = Boolean(getStaticPaths);\n    const hasGetInitialProps = Boolean(((_node_modules_next_dist_pages_error_js__WEBPACK_IMPORTED_MODULE_13___default()) || _node_modules_next_dist_pages_error_js__WEBPACK_IMPORTED_MODULE_13__).getInitialProps);\n    const isAmp = query.amp && config.amp;\n    let cacheKey = null;\n    let isIsrFallback = false;\n    let isNextDataRequest = prepareResult.isNextDataRequest && (hasStaticProps || hasServerProps);\n    const is404Page = srcPage === '/404';\n    const is500Page = srcPage === '/500';\n    const isErrorPage = srcPage === '/_error';\n    if (!routeModule.isDev && !isDraftMode && hasStaticProps) {\n        cacheKey = `${locale ? `/${locale}` : ''}${(srcPage === '/' || resolvedPathname === '/') && locale ? '' : resolvedPathname}${isAmp ? '.amp' : ''}`;\n        if (is404Page || is500Page || isErrorPage) {\n            cacheKey = `${locale ? `/${locale}` : ''}${srcPage}${isAmp ? '.amp' : ''}`;\n        }\n        // ensure /index and / is normalized to one key\n        cacheKey = cacheKey === '/index' ? '/' : cacheKey;\n    }\n    if (hasStaticPaths && !isDraftMode) {\n        const decodedPathname = (0,next_dist_shared_lib_router_utils_remove_trailing_slash__WEBPACK_IMPORTED_MODULE_25__.removeTrailingSlash)(locale ? (0,next_dist_shared_lib_router_utils_add_path_prefix__WEBPACK_IMPORTED_MODULE_24__.addPathPrefix)(resolvedPathname, `/${locale}`) : resolvedPathname);\n        const isPrerendered = Boolean(prerenderManifest.routes[decodedPathname]) || prerenderManifest.notFoundRoutes.includes(decodedPathname);\n        const prerenderInfo = prerenderManifest.dynamicRoutes[srcPage];\n        if (prerenderInfo) {\n            if (prerenderInfo.fallback === false && !isPrerendered) {\n                throw new next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_21__.NoFallbackError();\n            }\n            if (typeof prerenderInfo.fallback === 'string' && !isPrerendered && !isNextDataRequest) {\n                isIsrFallback = true;\n            }\n        }\n    }\n    // When serving a bot request, we want to serve a blocking render and not\n    // the prerendered page. This ensures that the correct content is served\n    // to the bot in the head.\n    if (isIsrFallback && (0,next_dist_shared_lib_router_utils_is_bot__WEBPACK_IMPORTED_MODULE_23__.isBot)(req.headers['user-agent'] || '') || (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_5__.getRequestMeta)(req, 'minimalMode')) {\n        isIsrFallback = false;\n    }\n    const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_3__.getTracer)();\n    const activeSpan = tracer.getActiveScopeSpan();\n    try {\n        const method = req.method || 'GET';\n        const resolvedUrl = (0,next_dist_shared_lib_router_utils_format_url__WEBPACK_IMPORTED_MODULE_4__.formatUrl)({\n            pathname: nextConfig.trailingSlash ? parsedUrl.pathname : (0,next_dist_shared_lib_router_utils_remove_trailing_slash__WEBPACK_IMPORTED_MODULE_25__.removeTrailingSlash)(parsedUrl.pathname || '/'),\n            // make sure to only add query values from original URL\n            query: hasStaticProps ? {} : originalQuery\n        });\n        const publicRuntimeConfig = (routerServerContext == null ? void 0 : routerServerContext.publicRuntimeConfig) || nextConfig.publicRuntimeConfig;\n        const handleResponse = async (span)=>{\n            const responseGenerator = async ({ previousCacheEntry })=>{\n                var _previousCacheEntry_value;\n                const doRender = async ()=>{\n                    try {\n                        var _nextConfig_i18n, _nextConfig_experimental_amp, _nextConfig_experimental_amp1;\n                        return await routeModule.render(req, res, {\n                            query: hasStaticProps && !isExperimentalCompile ? {\n                                ...params,\n                                ...isAmp ? {\n                                    amp: query.amp\n                                } : {}\n                            } : {\n                                ...query,\n                                ...params\n                            },\n                            params,\n                            page: srcPage,\n                            renderContext: {\n                                isDraftMode,\n                                isFallback: isIsrFallback,\n                                developmentNotFoundSourcePage: (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_5__.getRequestMeta)(req, 'developmentNotFoundSourcePage')\n                            },\n                            sharedContext: {\n                                buildId,\n                                customServer: Boolean(routerServerContext == null ? void 0 : routerServerContext.isCustomServer) || undefined,\n                                deploymentId: false\n                            },\n                            renderOpts: {\n                                params,\n                                routeModule,\n                                page: srcPage,\n                                pageConfig: config || {},\n                                Component: (0,next_dist_server_app_render_interop_default__WEBPACK_IMPORTED_MODULE_6__.interopDefault)(_node_modules_next_dist_pages_error_js__WEBPACK_IMPORTED_MODULE_13__),\n                                ComponentMod: _node_modules_next_dist_pages_error_js__WEBPACK_IMPORTED_MODULE_13__,\n                                getStaticProps,\n                                getStaticPaths,\n                                getServerSideProps,\n                                supportsDynamicResponse: !hasStaticProps,\n                                buildManifest,\n                                nextFontManifest,\n                                reactLoadableManifest,\n                                assetPrefix: nextConfig.assetPrefix,\n                                strictNextHead: nextConfig.experimental.strictNextHead ?? true,\n                                previewProps: prerenderManifest.preview,\n                                images: nextConfig.images,\n                                nextConfigOutput: nextConfig.output,\n                                optimizeCss: Boolean(nextConfig.experimental.optimizeCss),\n                                nextScriptWorkers: Boolean(nextConfig.experimental.nextScriptWorkers),\n                                domainLocales: (_nextConfig_i18n = nextConfig.i18n) == null ? void 0 : _nextConfig_i18n.domains,\n                                crossOrigin: nextConfig.crossOrigin,\n                                multiZoneDraftMode,\n                                basePath: nextConfig.basePath,\n                                canonicalBase: nextConfig.amp.canonicalBase || '',\n                                ampOptimizerConfig: (_nextConfig_experimental_amp = nextConfig.experimental.amp) == null ? void 0 : _nextConfig_experimental_amp.optimizer,\n                                disableOptimizedLoading: nextConfig.experimental.disableOptimizedLoading,\n                                largePageDataBytes: nextConfig.experimental.largePageDataBytes,\n                                // Only the `publicRuntimeConfig` key is exposed to the client side\n                                // It'll be rendered as part of __NEXT_DATA__ on the client side\n                                runtimeConfig: Object.keys(publicRuntimeConfig).length > 0 ? publicRuntimeConfig : undefined,\n                                isExperimentalCompile,\n                                experimental: {\n                                    clientTraceMetadata: nextConfig.experimental.clientTraceMetadata || []\n                                },\n                                locale,\n                                locales,\n                                defaultLocale,\n                                setIsrStatus: routerServerContext == null ? void 0 : routerServerContext.setIsrStatus,\n                                isNextDataRequest: isNextDataRequest && (hasServerProps || hasStaticProps),\n                                resolvedUrl,\n                                // For getServerSideProps and getInitialProps we need to ensure we use the original URL\n                                // and not the resolved URL to prevent a hydration mismatch on\n                                // asPath\n                                resolvedAsPath: hasServerProps || hasGetInitialProps ? (0,next_dist_shared_lib_router_utils_format_url__WEBPACK_IMPORTED_MODULE_4__.formatUrl)({\n                                    // we use the original URL pathname less the _next/data prefix if\n                                    // present\n                                    pathname: isNextDataRequest ? (0,next_dist_shared_lib_page_path_normalize_data_path__WEBPACK_IMPORTED_MODULE_8__.normalizeDataPath)(originalPathname) : originalPathname,\n                                    query: originalQuery\n                                }) : resolvedUrl,\n                                isOnDemandRevalidate,\n                                ErrorDebug: (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_5__.getRequestMeta)(req, 'PagesErrorDebug'),\n                                err: (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_5__.getRequestMeta)(req, 'invokeError'),\n                                dev: routeModule.isDev,\n                                // needed for experimental.optimizeCss feature\n                                distDir: `${routeModule.projectDir}/${routeModule.distDir}`,\n                                ampSkipValidation: (_nextConfig_experimental_amp1 = nextConfig.experimental.amp) == null ? void 0 : _nextConfig_experimental_amp1.skipValidation,\n                                ampValidator: (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_5__.getRequestMeta)(req, 'ampValidator')\n                            }\n                        }).then((renderResult)=>{\n                            const { metadata } = renderResult;\n                            let cacheControl = metadata.cacheControl;\n                            if ('isNotFound' in metadata && metadata.isNotFound) {\n                                return {\n                                    value: null,\n                                    cacheControl\n                                };\n                            }\n                            // Handle `isRedirect`.\n                            if (metadata.isRedirect) {\n                                return {\n                                    value: {\n                                        kind: next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_9__.CachedRouteKind.REDIRECT,\n                                        props: metadata.pageData ?? metadata.flightData\n                                    },\n                                    cacheControl\n                                };\n                            }\n                            return {\n                                value: {\n                                    kind: next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_9__.CachedRouteKind.PAGES,\n                                    html: renderResult,\n                                    pageData: renderResult.metadata.pageData,\n                                    headers: renderResult.metadata.headers,\n                                    status: renderResult.metadata.statusCode\n                                },\n                                cacheControl\n                            };\n                        }).finally(()=>{\n                            if (!span) return;\n                            span.setAttributes({\n                                'http.status_code': res.statusCode,\n                                'next.rsc': false\n                            });\n                            const rootSpanAttributes = tracer.getRootSpanAttributes();\n                            // We were unable to get attributes, probably OTEL is not enabled\n                            if (!rootSpanAttributes) {\n                                return;\n                            }\n                            if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_2__.BaseServerSpan.handleRequest) {\n                                console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                                return;\n                            }\n                            const route = rootSpanAttributes.get('next.route');\n                            if (route) {\n                                const name = `${method} ${route}`;\n                                span.setAttributes({\n                                    'next.route': route,\n                                    'http.route': route,\n                                    'next.span_name': name\n                                });\n                                span.updateName(name);\n                            } else {\n                                span.updateName(`${method} ${req.url}`);\n                            }\n                        });\n                    } catch (err) {\n                        // if this is a background revalidate we need to report\n                        // the request error here as it won't be bubbled\n                        if (previousCacheEntry == null ? void 0 : previousCacheEntry.isStale) {\n                            await routeModule.onRequestError(req, err, {\n                                routerKind: 'Pages Router',\n                                routePath: srcPage,\n                                routeType: 'render',\n                                revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_7__.getRevalidateReason)({\n                                    isRevalidate: hasStaticProps,\n                                    isOnDemandRevalidate\n                                })\n                            }, routerServerContext);\n                        }\n                        throw err;\n                    }\n                };\n                // if we've already generated this page we no longer\n                // serve the fallback\n                if (previousCacheEntry) {\n                    isIsrFallback = false;\n                }\n                if (isIsrFallback) {\n                    const fallbackResponse = await routeModule.getResponseCache(req).get(routeModule.isDev ? null : locale ? `/${locale}${srcPage}` : srcPage, async ({ previousCacheEntry: previousFallbackCacheEntry = null })=>{\n                        if (!routeModule.isDev) {\n                            return (0,next_dist_server_response_cache_utils__WEBPACK_IMPORTED_MODULE_20__.toResponseCacheEntry)(previousFallbackCacheEntry);\n                        }\n                        return doRender();\n                    }, {\n                        routeKind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES,\n                        isFallback: true,\n                        isRoutePPREnabled: false,\n                        isOnDemandRevalidate: false,\n                        incrementalCache: await routeModule.getIncrementalCache(req, nextConfig, prerenderManifest),\n                        waitUntil: ctx.waitUntil\n                    });\n                    if (fallbackResponse) {\n                        // Remove the cache control from the response to prevent it from being\n                        // used in the surrounding cache.\n                        delete fallbackResponse.cacheControl;\n                        fallbackResponse.isMiss = true;\n                        return fallbackResponse;\n                    }\n                }\n                if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_5__.getRequestMeta)(req, 'minimalMode') && isOnDemandRevalidate && revalidateOnlyGenerated && !previousCacheEntry) {\n                    res.statusCode = 404;\n                    // on-demand revalidate always sets this header\n                    res.setHeader('x-nextjs-cache', 'REVALIDATED');\n                    res.end('This page could not be found');\n                    return null;\n                }\n                if (isIsrFallback && (previousCacheEntry == null ? void 0 : (_previousCacheEntry_value = previousCacheEntry.value) == null ? void 0 : _previousCacheEntry_value.kind) === next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_9__.CachedRouteKind.PAGES) {\n                    return {\n                        value: {\n                            kind: next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_9__.CachedRouteKind.PAGES,\n                            html: new next_dist_server_render_result__WEBPACK_IMPORTED_MODULE_19__[\"default\"](Buffer.from(previousCacheEntry.value.html), {\n                                contentType: 'text/html;utf-8',\n                                metadata: {\n                                    statusCode: previousCacheEntry.value.status,\n                                    headers: previousCacheEntry.value.headers\n                                }\n                            }),\n                            pageData: {},\n                            status: previousCacheEntry.value.status,\n                            headers: previousCacheEntry.value.headers\n                        },\n                        cacheControl: {\n                            revalidate: 0,\n                            expire: undefined\n                        }\n                    };\n                }\n                return doRender();\n            };\n            const result = await routeModule.handleResponse({\n                cacheKey,\n                req,\n                nextConfig,\n                routeKind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES,\n                isOnDemandRevalidate,\n                revalidateOnlyGenerated,\n                waitUntil: ctx.waitUntil,\n                responseGenerator: responseGenerator,\n                prerenderManifest\n            });\n            // if we got a cache hit this wasn't an ISR fallback\n            // but it wasn't generated during build so isn't in the\n            // prerender-manifest\n            if (isIsrFallback && !(result == null ? void 0 : result.isMiss)) {\n                isIsrFallback = false;\n            }\n            // response is finished is no cache entry\n            if (!result) {\n                return;\n            }\n            if (hasStaticProps && !(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_5__.getRequestMeta)(req, 'minimalMode')) {\n                res.setHeader('x-nextjs-cache', isOnDemandRevalidate ? 'REVALIDATED' : result.isMiss ? 'MISS' : result.isStale ? 'STALE' : 'HIT');\n            }\n            let cacheControl;\n            if (!hasStaticProps || isIsrFallback) {\n                if (!res.getHeader('Cache-Control')) {\n                    cacheControl = {\n                        revalidate: 0,\n                        expire: undefined\n                    };\n                }\n            } else if (is404Page) {\n                const notFoundRevalidate = (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_5__.getRequestMeta)(req, 'notFoundRevalidate');\n                cacheControl = {\n                    revalidate: typeof notFoundRevalidate === 'undefined' ? 0 : notFoundRevalidate,\n                    expire: undefined\n                };\n            } else if (is500Page) {\n                cacheControl = {\n                    revalidate: 0,\n                    expire: undefined\n                };\n            } else if (result.cacheControl) {\n                // If the cache entry has a cache control with a revalidate value that's\n                // a number, use it.\n                if (typeof result.cacheControl.revalidate === 'number') {\n                    var _result_cacheControl;\n                    if (result.cacheControl.revalidate < 1) {\n                        throw Object.defineProperty(new Error(`Invalid revalidate configuration provided: ${result.cacheControl.revalidate} < 1`), \"__NEXT_ERROR_CODE\", {\n                            value: \"E22\",\n                            enumerable: false,\n                            configurable: true\n                        });\n                    }\n                    cacheControl = {\n                        revalidate: result.cacheControl.revalidate,\n                        expire: ((_result_cacheControl = result.cacheControl) == null ? void 0 : _result_cacheControl.expire) ?? nextConfig.expireTime\n                    };\n                } else {\n                    // revalidate: false\n                    cacheControl = {\n                        revalidate: next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_17__.CACHE_ONE_YEAR,\n                        expire: undefined\n                    };\n                }\n            }\n            // If cache control is already set on the response we don't\n            // override it to allow users to customize it via next.config\n            if (cacheControl && !res.getHeader('Cache-Control')) {\n                res.setHeader('Cache-Control', (0,next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_14__.getCacheControlHeader)(cacheControl));\n            }\n            // notFound: true case\n            if (!result.value) {\n                var _result_cacheControl1;\n                // add revalidate metadata before rendering 404 page\n                // so that we can use this as source of truth for the\n                // cache-control header instead of what the 404 page returns\n                // for the revalidate value\n                (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_5__.addRequestMeta)(req, 'notFoundRevalidate', (_result_cacheControl1 = result.cacheControl) == null ? void 0 : _result_cacheControl1.revalidate);\n                res.statusCode = 404;\n                if (isNextDataRequest) {\n                    res.end('{\"notFound\":true}');\n                    return;\n                }\n                // TODO: should route-module itself handle rendering the 404\n                if (routerServerContext == null ? void 0 : routerServerContext.render404) {\n                    await routerServerContext.render404(req, res, parsedUrl, false);\n                } else {\n                    res.end('This page could not be found');\n                }\n                return;\n            }\n            if (result.value.kind === next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_9__.CachedRouteKind.REDIRECT) {\n                if (isNextDataRequest) {\n                    res.setHeader('content-type', 'application/json');\n                    res.end(JSON.stringify(result.value.props));\n                    return;\n                } else {\n                    const handleRedirect = (pageData)=>{\n                        const redirect = {\n                            destination: pageData.pageProps.__N_REDIRECT,\n                            statusCode: pageData.pageProps.__N_REDIRECT_STATUS,\n                            basePath: pageData.pageProps.__N_REDIRECT_BASE_PATH\n                        };\n                        const statusCode = (0,next_dist_lib_redirect_status__WEBPACK_IMPORTED_MODULE_16__.getRedirectStatus)(redirect);\n                        const { basePath } = nextConfig;\n                        if (basePath && redirect.basePath !== false && redirect.destination.startsWith('/')) {\n                            redirect.destination = `${basePath}${redirect.destination}`;\n                        }\n                        if (redirect.destination.startsWith('/')) {\n                            redirect.destination = (0,next_dist_shared_lib_utils__WEBPACK_IMPORTED_MODULE_15__.normalizeRepeatedSlashes)(redirect.destination);\n                        }\n                        res.statusCode = statusCode;\n                        res.setHeader('Location', redirect.destination);\n                        if (statusCode === next_dist_client_components_redirect_status_code__WEBPACK_IMPORTED_MODULE_22__.RedirectStatusCode.PermanentRedirect) {\n                            res.setHeader('Refresh', `0;url=${redirect.destination}`);\n                        }\n                        res.end(redirect.destination);\n                    };\n                    await handleRedirect(result.value.props);\n                    return null;\n                }\n            }\n            if (result.value.kind !== next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_9__.CachedRouteKind.PAGES) {\n                throw Object.defineProperty(new Error(`Invariant: received non-pages cache entry in pages handler`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E695\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            // In dev, we should not cache pages for any reason.\n            if (routeModule.isDev) {\n                res.setHeader('Cache-Control', 'no-store, must-revalidate');\n            }\n            // Draft mode should never be cached\n            if (isDraftMode) {\n                res.setHeader('Cache-Control', 'private, no-cache, no-store, max-age=0, must-revalidate');\n            }\n            // when invoking _error before pages/500 we don't actually\n            // send the _error response\n            if ((0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_5__.getRequestMeta)(req, 'customErrorRender') || isErrorPage && (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_5__.getRequestMeta)(req, 'minimalMode') && res.statusCode === 500) {\n                return null;\n            }\n            await (0,next_dist_server_send_payload__WEBPACK_IMPORTED_MODULE_18__.sendRenderResult)({\n                req,\n                res,\n                // If we are rendering the error page it's not a data request\n                // anymore\n                result: isNextDataRequest && !isErrorPage && !is500Page ? new next_dist_server_render_result__WEBPACK_IMPORTED_MODULE_19__[\"default\"](Buffer.from(JSON.stringify(result.value.pageData)), {\n                    contentType: 'application/json',\n                    metadata: result.value.html.metadata\n                }) : result.value.html,\n                generateEtags: nextConfig.generateEtags,\n                poweredByHeader: nextConfig.poweredByHeader,\n                cacheControl: routeModule.isDev ? undefined : cacheControl,\n                type: isNextDataRequest ? 'json' : 'html'\n            });\n        };\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await handleResponse();\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_2__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_3__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, handleResponse));\n        }\n    } catch (err) {\n        await routeModule.onRequestError(req, err, {\n            routerKind: 'Pages Router',\n            routePath: srcPage,\n            routeType: 'render',\n            revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_7__.getRevalidateReason)({\n                isRevalidate: hasStaticProps,\n                isOnDemandRevalidate\n            })\n        }, routerServerContext);\n        // rethrow so that we can handle serving error page\n        throw err;\n    }\n}\n\n//# sourceMappingURL=pages.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES&page=%2F_error&preferredRegion=&absolutePagePath=.%2Fnode_modules%5Cnext%5Cdist%5Cpages%5C_error.js&absoluteAppPath=private-next-pages%2F_app&absoluteDocumentPath=private-next-pages%2F_document&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "./pages/_app.tsx":
/*!************************!*\
  !*** ./pages/_app.tsx ***!
  \************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ App)\n/* harmony export */ });\n/* harmony import */ var _emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/react/jsx-dev-runtime */ \"@emotion/react/jsx-dev-runtime\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _components_AuthContext__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../components/AuthContext */ \"./components/AuthContext.tsx\");\n/* harmony import */ var _context_AppStateContext__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../context/AppStateContext */ \"./context/AppStateContext.tsx\");\n/* harmony import */ var _components_ErrorBoundary__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../components/ErrorBoundary */ \"./components/ErrorBoundary.tsx\");\n/* harmony import */ var _components_StateLoader__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../components/StateLoader */ \"./components/StateLoader.tsx\");\n/* harmony import */ var react_toastify__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react-toastify */ \"react-toastify\");\n/* harmony import */ var react_toastify_dist_ReactToastify_css__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! react-toastify/dist/ReactToastify.css */ \"./node_modules/react-toastify/dist/ReactToastify.css\");\n/* harmony import */ var react_toastify_dist_ReactToastify_css__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(react_toastify_dist_ReactToastify_css__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var _styles_animations_css__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../styles/animations.css */ \"./styles/animations.css\");\n/* harmony import */ var _styles_animations_css__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_styles_animations_css__WEBPACK_IMPORTED_MODULE_8__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__, _components_AuthContext__WEBPACK_IMPORTED_MODULE_2__, _context_AppStateContext__WEBPACK_IMPORTED_MODULE_3__, _components_ErrorBoundary__WEBPACK_IMPORTED_MODULE_4__, _components_StateLoader__WEBPACK_IMPORTED_MODULE_5__, react_toastify__WEBPACK_IMPORTED_MODULE_6__]);\n([_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__, _components_AuthContext__WEBPACK_IMPORTED_MODULE_2__, _context_AppStateContext__WEBPACK_IMPORTED_MODULE_3__, _components_ErrorBoundary__WEBPACK_IMPORTED_MODULE_4__, _components_StateLoader__WEBPACK_IMPORTED_MODULE_5__, react_toastify__WEBPACK_IMPORTED_MODULE_6__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n\n\n\n\n\n// Pages that should have the layout (header/navigation)\nconst pagesWithLayout = [\n    '/chat',\n    '/wallet',\n    '/trading',\n    '/social',\n    '/settings'\n];\nfunction App({ Component, pageProps, router }) {\n    const shouldHaveLayout = pagesWithLayout.includes(router.pathname);\n    return /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_ErrorBoundary__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n        componentName: \"Main App\",\n        children: /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_AuthContext__WEBPACK_IMPORTED_MODULE_2__.AuthProvider, {\n            children: /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_context_AppStateContext__WEBPACK_IMPORTED_MODULE_3__.AppStateProvider, {\n                children: /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_StateLoader__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n                    children: [\n                        /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Component, {\n                            ...pageProps\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\manjo\\\\Downloads\\\\grace_project_docker\\\\grace_project\\\\src\\\\ui\\\\pages\\\\_app.tsx\",\n                            lineNumber: 26,\n                            columnNumber: 13\n                        }, this),\n                        /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_toastify__WEBPACK_IMPORTED_MODULE_6__.ToastContainer, {\n                            position: \"bottom-right\",\n                            theme: \"dark\"\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\manjo\\\\Downloads\\\\grace_project_docker\\\\grace_project\\\\src\\\\ui\\\\pages\\\\_app.tsx\",\n                            lineNumber: 27,\n                            columnNumber: 13\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"C:\\\\Users\\\\manjo\\\\Downloads\\\\grace_project_docker\\\\grace_project\\\\src\\\\ui\\\\pages\\\\_app.tsx\",\n                    lineNumber: 25,\n                    columnNumber: 11\n                }, this)\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\manjo\\\\Downloads\\\\grace_project_docker\\\\grace_project\\\\src\\\\ui\\\\pages\\\\_app.tsx\",\n                lineNumber: 24,\n                columnNumber: 9\n            }, this)\n        }, void 0, false, {\n            fileName: \"C:\\\\Users\\\\manjo\\\\Downloads\\\\grace_project_docker\\\\grace_project\\\\src\\\\ui\\\\pages\\\\_app.tsx\",\n            lineNumber: 23,\n            columnNumber: 7\n        }, this)\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\manjo\\\\Downloads\\\\grace_project_docker\\\\grace_project\\\\src\\\\ui\\\\pages\\\\_app.tsx\",\n        lineNumber: 22,\n        columnNumber: 5\n    }, this);\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wYWdlcy9fYXBwLnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUMwQjtBQUUrQjtBQUNLO0FBRU47QUFDSjtBQUNKO0FBRUQ7QUFDYjtBQUdsQyx3REFBd0Q7QUFDeEQsTUFBTU0sa0JBQWtCO0lBQUM7SUFBUztJQUFXO0lBQVk7SUFBVztDQUFZO0FBRWpFLFNBQVNDLElBQUksRUFBRUMsU0FBUyxFQUFFQyxTQUFTLEVBQUVDLE1BQU0sRUFBWTtJQUNwRSxNQUFNQyxtQkFBbUJMLGdCQUFnQk0sUUFBUSxDQUFDRixPQUFPRyxRQUFRO0lBRWpFLHFCQUNFLHVFQUFDVixpRUFBYUE7UUFBQ1csZUFBYztrQkFDM0IscUZBQUNiLGlFQUFZQTtzQkFDWCxxRkFBQ0Msc0VBQWdCQTswQkFDZixxRkFBQ0UsK0RBQVdBOztzQ0FDVix1RUFBQ0k7NEJBQVcsR0FBR0MsU0FBUzs7Ozs7O3NDQUN4Qix1RUFBQ0osMERBQWNBOzRCQUFDVSxVQUFTOzRCQUFlQyxPQUFNOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFNMUQiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbWFuam9cXERvd25sb2Fkc1xcZ3JhY2VfcHJvamVjdF9kb2NrZXJcXGdyYWNlX3Byb2plY3RcXHNyY1xcdWlcXHBhZ2VzXFxfYXBwLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBBcHBQcm9wcyB9IGZyb20gJ25leHQvYXBwJzsgXG5pbXBvcnQgeyBBdXRoUHJvdmlkZXIgfSBmcm9tICcuLi9jb21wb25lbnRzL0F1dGhDb250ZXh0JztcbmltcG9ydCB7IEFwcFN0YXRlUHJvdmlkZXIgfSBmcm9tICcuLi9jb250ZXh0L0FwcFN0YXRlQ29udGV4dCc7XG5pbXBvcnQgQXBwUm91dGVyIGZyb20gJy4uL1JvdXRlcic7XG5pbXBvcnQgRXJyb3JCb3VuZGFyeSBmcm9tICcuLi9jb21wb25lbnRzL0Vycm9yQm91bmRhcnknO1xuaW1wb3J0IFN0YXRlTG9hZGVyIGZyb20gJy4uL2NvbXBvbmVudHMvU3RhdGVMb2FkZXInO1xuaW1wb3J0IHsgVG9hc3RDb250YWluZXIgfSBmcm9tICdyZWFjdC10b2FzdGlmeSc7XG5pbXBvcnQgTGF5b3V0IGZyb20gJy4vbGF5b3V0JztcbmltcG9ydCAncmVhY3QtdG9hc3RpZnkvZGlzdC9SZWFjdFRvYXN0aWZ5LmNzcyc7XG5pbXBvcnQgJy4uL3N0eWxlcy9hbmltYXRpb25zLmNzcyc7XG5cblxuLy8gUGFnZXMgdGhhdCBzaG91bGQgaGF2ZSB0aGUgbGF5b3V0IChoZWFkZXIvbmF2aWdhdGlvbilcbmNvbnN0IHBhZ2VzV2l0aExheW91dCA9IFsnL2NoYXQnLCAnL3dhbGxldCcsICcvdHJhZGluZycsICcvc29jaWFsJywgJy9zZXR0aW5ncyddO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBBcHAoeyBDb21wb25lbnQsIHBhZ2VQcm9wcywgcm91dGVyIH06IEFwcFByb3BzKSB7XG4gIGNvbnN0IHNob3VsZEhhdmVMYXlvdXQgPSBwYWdlc1dpdGhMYXlvdXQuaW5jbHVkZXMocm91dGVyLnBhdGhuYW1lKTtcblxuICByZXR1cm4gKFxuICAgIDxFcnJvckJvdW5kYXJ5IGNvbXBvbmVudE5hbWU9XCJNYWluIEFwcFwiPlxuICAgICAgPEF1dGhQcm92aWRlcj5cbiAgICAgICAgPEFwcFN0YXRlUHJvdmlkZXI+XG4gICAgICAgICAgPFN0YXRlTG9hZGVyPlxuICAgICAgICAgICAgPENvbXBvbmVudCB7Li4ucGFnZVByb3BzfSAvPlxuICAgICAgICAgICAgPFRvYXN0Q29udGFpbmVyIHBvc2l0aW9uPVwiYm90dG9tLXJpZ2h0XCIgdGhlbWU9XCJkYXJrXCIgLz5cbiAgICAgICAgICA8L1N0YXRlTG9hZGVyPlxuICAgICAgICA8L0FwcFN0YXRlUHJvdmlkZXI+XG4gICAgICA8L0F1dGhQcm92aWRlcj5cbiAgICA8L0Vycm9yQm91bmRhcnk+XG4gICk7XG59Il0sIm5hbWVzIjpbIlJlYWN0IiwiQXV0aFByb3ZpZGVyIiwiQXBwU3RhdGVQcm92aWRlciIsIkVycm9yQm91bmRhcnkiLCJTdGF0ZUxvYWRlciIsIlRvYXN0Q29udGFpbmVyIiwicGFnZXNXaXRoTGF5b3V0IiwiQXBwIiwiQ29tcG9uZW50IiwicGFnZVByb3BzIiwicm91dGVyIiwic2hvdWxkSGF2ZUxheW91dCIsImluY2x1ZGVzIiwicGF0aG5hbWUiLCJjb21wb25lbnROYW1lIiwicG9zaXRpb24iLCJ0aGVtZSJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./pages/_app.tsx\n");

/***/ }),

/***/ "./styles/animations.css":
/*!*******************************!*\
  !*** ./styles/animations.css ***!
  \*******************************/
/***/ (() => {



/***/ }),

/***/ "./utils/StateBackupService.ts":
/*!*************************************!*\
  !*** ./utils/StateBackupService.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _StatePersistence__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./StatePersistence */ \"./utils/StatePersistence.ts\");\n// StateBackupService.ts - Manages additional state backup mechanisms\n\nclass StateBackupService {\n    static instance;\n    serviceWorkerRegistration = null;\n    backupInterval = null;\n    lastBackupTime = 0;\n    BACKUP_INTERVAL_MS = 60000;\n    isRegistering = false;\n    constructor(){\n    // Private constructor for singleton pattern\n    }\n    static getInstance() {\n        if (!StateBackupService.instance) {\n            StateBackupService.instance = new StateBackupService();\n        }\n        return StateBackupService.instance;\n    }\n    /**\n   * Initialize the backup service\n   */ async initialize() {\n        try {\n            // Register service worker if supported\n            if ('serviceWorker' in navigator && !this.isRegistering) {\n                this.isRegistering = true;\n                try {\n                    this.serviceWorkerRegistration = await navigator.serviceWorker.register('/serviceWorker.js', {\n                        scope: '/'\n                    });\n                    console.log('Service Worker registered successfully', this.serviceWorkerRegistration);\n                    // Set up service worker message handling\n                    navigator.serviceWorker.addEventListener('message', this.handleServiceWorkerMessage);\n                    // Start periodic backup\n                    this.startPeriodicBackup();\n                    this.isRegistering = false;\n                    return true;\n                } catch (error) {\n                    console.error('Service Worker registration failed:', error);\n                    this.isRegistering = false;\n                    // Even if service worker fails, we can still use local storage backups\n                    this.startPeriodicBackup();\n                    return false;\n                }\n            } else {\n                // Fallback for browsers without service worker support\n                console.log('Service Workers not supported or already registering, using local storage only');\n                this.startPeriodicBackup();\n                return false;\n            }\n        } catch (error) {\n            console.error('Error initializing backup service:', error);\n            return false;\n        }\n    }\n    /**\n   * Handle messages from service worker\n   */ handleServiceWorkerMessage = (event)=>{\n        if (event.data && event.data.type === 'BACKUP_STATE_COMPLETE') {\n            if (event.data.success) {\n                console.log('Service Worker backup complete');\n            } else {\n                console.error('Service Worker backup failed:', event.data.error);\n            }\n        }\n    };\n    /**\n   * Start periodic state backups\n   */ startPeriodicBackup() {\n        if (this.backupInterval) {\n            clearInterval(this.backupInterval);\n        }\n        this.backupInterval = window.setInterval(()=>{\n            this.backupCurrentState();\n        }, this.BACKUP_INTERVAL_MS);\n        console.log('Periodic state backup started');\n        // Also backup on certain events\n        window.addEventListener('beforeunload', this.backupCurrentState);\n        window.addEventListener('pagehide', this.backupCurrentState);\n        // Backup now\n        this.backupCurrentState();\n    }\n    /**\n   * Stop periodic backups\n   */ stopPeriodicBackup() {\n        if (this.backupInterval) {\n            clearInterval(this.backupInterval);\n            this.backupInterval = null;\n            window.removeEventListener('beforeunload', this.backupCurrentState);\n            window.removeEventListener('pagehide', this.backupCurrentState);\n            console.log('Periodic state backup stopped');\n        }\n    }\n    /**\n   * Backup the current application state\n   */ backupCurrentState = async ()=>{\n        try {\n            // Don't backup too frequently\n            const now = Date.now();\n            if (now - this.lastBackupTime < 10000) {\n                return;\n            }\n            this.lastBackupTime = now;\n            // Get current state snapshot\n            const snapshot = _StatePersistence__WEBPACK_IMPORTED_MODULE_0__[\"default\"].retrieveSnapshot();\n            if (!snapshot) {\n                console.log('No state snapshot to backup');\n                return;\n            }\n            // Backup to service worker if available\n            if (navigator.serviceWorker.controller) {\n                navigator.serviceWorker.controller.postMessage({\n                    type: 'BACKUP_STATE',\n                    state: snapshot\n                });\n                console.log('State backup sent to Service Worker');\n            }\n            // Secondary browser storage backup using a different key\n            try {\n                localStorage.setItem('GRACE_STATE_BACKUP', JSON.stringify({\n                    timestamp: now,\n                    state: snapshot\n                }));\n            } catch (storageError) {\n                console.error('Error backing up to localStorage:', storageError);\n            }\n        } catch (error) {\n            console.error('State backup failed:', error);\n        }\n    };\n    /**\n   * Attempt to recover state from all backup sources\n   */ async attemptRecovery() {\n        try {\n            console.log('Attempting state recovery from all sources');\n            // Try main persistence manager first\n            const mainSnapshot = _StatePersistence__WEBPACK_IMPORTED_MODULE_0__[\"default\"].retrieveSnapshot();\n            if (mainSnapshot) {\n                console.log('Recovered state from main persistence manager');\n                return mainSnapshot;\n            }\n            // Try localStorage backup\n            try {\n                const backupJson = localStorage.getItem('GRACE_STATE_BACKUP');\n                if (backupJson) {\n                    const backup = JSON.parse(backupJson);\n                    if (backup && backup.state) {\n                        console.log('Recovered state from localStorage backup');\n                        return backup.state;\n                    }\n                }\n            } catch (e) {\n                console.error('Error reading from localStorage backup:', e);\n            }\n            // Try service worker backup (this gets complex with async)\n            if (navigator.serviceWorker.controller) {\n                return new Promise((resolve)=>{\n                    // Set up a one-time message handler\n                    const messageHandler = (event)=>{\n                        if (event.data && event.data.type === 'RECOVERY_RESULT') {\n                            navigator.serviceWorker.removeEventListener('message', messageHandler);\n                            if (event.data.state) {\n                                console.log('Recovered state from Service Worker');\n                                resolve(event.data.state);\n                            } else {\n                                console.log('No state found in Service Worker');\n                                resolve(null);\n                            }\n                        }\n                    };\n                    navigator.serviceWorker.addEventListener('message', messageHandler);\n                    // Request recovery - we've already checked controller is not null\n                    navigator.serviceWorker.controller.postMessage({\n                        type: 'RECOVER_STATE'\n                    });\n                    // Set timeout for recovery attempt\n                    setTimeout(()=>{\n                        navigator.serviceWorker.removeEventListener('message', messageHandler);\n                        console.log('Service Worker recovery timed out');\n                        resolve(null);\n                    }, 3000);\n                });\n            }\n            console.log('No state recovered from any source');\n            return null;\n        } catch (error) {\n            console.error('Error during state recovery:', error);\n            return null;\n        }\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (StateBackupService);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./utils/StateBackupService.ts\n");

/***/ }),

/***/ "./utils/StateOperationLock.ts":
/*!*************************************!*\
  !*** ./utils/StateOperationLock.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * StateOperationLock - Prevents race conditions in state operations\n * \n * This utility provides a central locking mechanism to prevent concurrent state operations\n * from interfering with each other, which can cause race conditions and lost updates.\n */ class StateOperationLock {\n    static instance;\n    activeLocks = new Map();\n    DEFAULT_TIMEOUT = 5000;\n    // Make this a singleton\n    constructor(){}\n    static getInstance() {\n        if (!StateOperationLock.instance) {\n            StateOperationLock.instance = new StateOperationLock();\n        }\n        return StateOperationLock.instance;\n    }\n    /**\n   * Acquires a lock for a specific operation\n   * @param resourceId Identifier for the resource being locked (e.g., 'chat', 'trading')\n   * @param operation Description of the operation being performed\n   * @param timeoutMs Lock timeout in milliseconds\n   * @returns Lock ID if acquired, null if failed\n   */ acquireLock(resourceId, operation, timeoutMs = this.DEFAULT_TIMEOUT) {\n        // Clean expired locks first\n        this.cleanExpiredLocks();\n        // Check if the resource is already locked\n        if (this.activeLocks.has(resourceId)) {\n            console.warn(`Resource ${resourceId} is already locked for operation: ${this.activeLocks.get(resourceId)?.operation}`);\n            return null;\n        }\n        // Create a new lock\n        const lockId = `lock_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;\n        const now = Date.now();\n        const lockInfo = {\n            id: lockId,\n            operation,\n            acquiredAt: now,\n            expiresAt: now + timeoutMs\n        };\n        // Set the lock\n        this.activeLocks.set(resourceId, lockInfo);\n        console.log(`Lock acquired for ${resourceId}: ${operation}`);\n        // Set automatic release after timeout\n        setTimeout(()=>{\n            this.releaseLock(resourceId, lockId);\n        }, timeoutMs);\n        return lockId;\n    }\n    /**\n   * Releases a lock if the lockId matches\n   * @param resourceId Resource identifier\n   * @param lockId Lock ID returned from acquireLock\n   * @returns true if released, false if not found or ID doesn't match\n   */ releaseLock(resourceId, lockId) {\n        const lock = this.activeLocks.get(resourceId);\n        if (!lock) {\n            console.warn(`No lock found for resource ${resourceId}`);\n            return false;\n        }\n        if (lock.id !== lockId) {\n            console.warn(`Lock ID mismatch for ${resourceId}: expected ${lock.id}, got ${lockId}`);\n            return false;\n        }\n        // Release the lock\n        this.activeLocks.delete(resourceId);\n        console.log(`Lock released for ${resourceId}`);\n        return true;\n    }\n    /**\n   * Checks if a resource is currently locked\n   * @param resourceId Resource identifier\n   * @returns true if locked, false otherwise\n   */ isLocked(resourceId) {\n        this.cleanExpiredLocks();\n        return this.activeLocks.has(resourceId);\n    }\n    /**\n   * Clean up any expired locks\n   */ cleanExpiredLocks() {\n        const now = Date.now();\n        for (const [resourceId, lock] of this.activeLocks.entries()){\n            if (lock.expiresAt < now) {\n                console.log(`Lock for ${resourceId} expired and was auto-released`);\n                this.activeLocks.delete(resourceId);\n            }\n        }\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (StateOperationLock.getInstance());\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./utils/StateOperationLock.ts\n");

/***/ }),

/***/ "./utils/StatePersistence.ts":
/*!***********************************!*\
  !*** ./utils/StatePersistence.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   preventUnintendedRefresh: () => (/* binding */ preventUnintendedRefresh)\n/* harmony export */ });\n/* harmony import */ var _StateOperationLock__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./StateOperationLock */ \"./utils/StateOperationLock.ts\");\n\nclass StatePersistenceManager {\n    static getStoredState() {\n        throw new Error('Method not implemented.');\n    }\n    // Storage keys - making this public so it can be referenced by sync logic\n    static STORAGE_KEY = 'GRACE_DYNAMIC_SNAPSHOT';\n    static MAX_SNAPSHOT_AGE = 24 * 60 * 60 * 1000;\n    static STORAGE_VERSION = 1;\n    static MAX_STORAGE_SIZE = 4 * 1024 * 1024;\n    // Advanced logging mechanism\n    static log(message, level = 'info') {\n        const timestamp = new Date().toISOString();\n        const logMessage = `[StatePersistence:${level.toUpperCase()}] ${timestamp} - ${message}`;\n        switch(level){\n            case 'info':\n                console.log(logMessage);\n                break;\n            case 'warn':\n                console.warn(logMessage);\n                break;\n            case 'error':\n                console.error(logMessage);\n                break;\n        }\n    // Optional: Send to error tracking service\n    // this.reportToErrorTracking(message, level);\n    }\n    // Check storage quota and manage size\n    static async checkStorageQuota() {\n        try {\n            // Use the Storage API if available (modern browsers)\n            if ('storage' in navigator && 'estimate' in navigator.storage) {\n                const estimate = await navigator.storage.estimate();\n                const { usage, quota } = estimate;\n                if (usage && quota) {\n                    const usageRatio = usage / quota;\n                    this.log(`Storage usage: ${(usageRatio * 100).toFixed(2)}% (${Math.round(usage / 1024 / 1024)}MB / ${Math.round(quota / 1024 / 1024)}MB)`);\n                    // If over 90% of quota, try to clean up\n                    if (usageRatio > 0.9) {\n                        this.log('Storage quota nearing limit, cleaning up old data', 'warn');\n                        return this.cleanupStorage();\n                    }\n                }\n            } else {\n                // Fallback for browsers without Storage API\n                // Check current storage size\n                let totalSize = 0;\n                for(let i = 0; i < localStorage.length; i++){\n                    const key = localStorage.key(i);\n                    if (key) {\n                        const value = localStorage.getItem(key) || '';\n                        totalSize += key.length + value.length;\n                    }\n                }\n                // Convert to MB for easier debugging\n                const sizeMB = totalSize / (1024 * 1024);\n                this.log(`Estimated localStorage usage: ${sizeMB.toFixed(2)}MB`);\n                // If over 4MB, clean up (typical localStorage limit is 5MB)\n                if (totalSize > this.MAX_STORAGE_SIZE) {\n                    this.log('Storage size nearing limit, cleaning up old data', 'warn');\n                    return this.cleanupStorage();\n                }\n            }\n            return true;\n        } catch (error) {\n            this.log(`Error checking storage quota: ${error}`, 'error');\n            return true; // Continue anyway to not block operation\n        }\n    }\n    // Clean up storage when approaching quota limits\n    static cleanupStorage() {\n        try {\n            // Strategy 1: Remove old chat messages (typically the largest data)\n            const keysToCheck = [];\n            for(let i = 0; i < localStorage.length; i++){\n                const key = localStorage.key(i);\n                if (key && (key.startsWith('messages_') || key.includes('draft_'))) {\n                    keysToCheck.push(key);\n                }\n            }\n            // Sort by last access time if available\n            const keysWithTime = keysToCheck.map((key)=>{\n                // Ensure key is a string before calling replace\n                const sessionId = String(key).replace('messages_', '').replace('draft_', '');\n                const lastSynced = localStorage.getItem(`lastSynced_${sessionId}`);\n                const timestamp = lastSynced ? new Date(lastSynced).getTime() : 0;\n                return {\n                    key,\n                    timestamp\n                };\n            });\n            // Sort oldest first\n            keysWithTime.sort((a, b)=>a.timestamp - b.timestamp);\n            // Remove oldest 30% of items\n            const itemsToRemove = Math.ceil(keysWithTime.length * 0.3);\n            for(let i = 0; i < itemsToRemove; i++){\n                if (i < keysWithTime.length) {\n                    localStorage.removeItem(keysWithTime[i].key);\n                    this.log(`Removed old data: ${keysWithTime[i].key}`);\n                }\n            }\n            // Strategy 2: If main snapshot is too large, try to trim it\n            const snapshot = localStorage.getItem(this.STORAGE_KEY);\n            if (snapshot && snapshot.length > 1024 * 1024) {\n                try {\n                    const parsedSnapshot = JSON.parse(snapshot);\n                    // Trim message history to reduce size\n                    if (parsedSnapshot.chatContext && parsedSnapshot.chatContext.messages) {\n                        // Keep only last 20 messages\n                        parsedSnapshot.chatContext.messages = parsedSnapshot.chatContext.messages.slice(-20);\n                    }\n                    // Store the trimmed version\n                    localStorage.setItem(this.STORAGE_KEY, JSON.stringify(parsedSnapshot));\n                    this.log('Trimmed main snapshot size');\n                } catch (e) {\n                    this.log(`Error trimming snapshot: ${e}`, 'error');\n                }\n            }\n            return true;\n        } catch (error) {\n            this.log(`Error cleaning up storage: ${error}`, 'error');\n            return false;\n        }\n    }\n    // Validate snapshot structure and schema\n    static validateSnapshotSchema(snapshot) {\n        if (!snapshot || typeof snapshot !== 'object') return false;\n        // Check required fields\n        if (typeof snapshot.timestamp !== 'number') return false;\n        // Check for required sub-objects\n        const requiredObjects = [\n            'userSession',\n            'chatContext',\n            'pageState',\n            'widgetStates'\n        ];\n        for (const obj of requiredObjects){\n            if (!snapshot[obj] || typeof snapshot[obj] !== 'object') {\n                return false;\n            }\n        }\n        return true;\n    }\n    // Create a backup of the current snapshot\n    static createBackup() {\n        try {\n            const currentSnapshot = localStorage.getItem(this.STORAGE_KEY);\n            if (currentSnapshot) {\n                localStorage.setItem(`${this.STORAGE_KEY}_BACKUP`, currentSnapshot);\n            }\n        } catch (error) {\n            this.log(`Failed to create backup: ${error}`, 'warn');\n        }\n    }\n    // Capture the current application state with enhanced safety\n    static async captureSnapshot(partialState) {\n        // Acquire a lock for state operations to prevent race conditions\n        const lockId = _StateOperationLock__WEBPACK_IMPORTED_MODULE_0__[\"default\"].acquireLock('state_snapshot', 'capture_snapshot');\n        if (!lockId) {\n            this.log('Could not acquire lock for state operation, another operation is in progress', 'warn');\n            return;\n        }\n        try {\n            // Validate storage availability\n            if (!this.isStorageAvailable()) {\n                this.log('Local storage not available', 'warn');\n                return;\n            }\n            // Check quota before writing\n            const quotaOk = await this.checkStorageQuota();\n            if (!quotaOk) {\n                this.log('Storage quota issues, data may not be saved completely', 'warn');\n            }\n            const existingSnapshot = this.retrieveSnapshot();\n            const newSnapshot = {\n                timestamp: Date.now(),\n                version: this.STORAGE_VERSION,\n                userSession: partialState?.userSession || existingSnapshot?.userSession || {},\n                chatContext: partialState?.chatContext || existingSnapshot?.chatContext || {},\n                pageState: partialState?.pageState || existingSnapshot?.pageState || {},\n                widgetStates: partialState?.widgetStates || existingSnapshot?.widgetStates || {}\n            };\n            // Create a backup of the current state before updating\n            this.createBackup();\n            // Attempt to save state\n            try {\n                localStorage.setItem(this.STORAGE_KEY, JSON.stringify(newSnapshot));\n                this.log('State snapshot captured successfully');\n            } catch (storageError) {\n                // If failed due to quota, force cleanup and try again\n                this.log(`Storage error, forcing cleanup: ${storageError}`, 'warn');\n                this.cleanupStorage();\n                // Try one more time with a more minimal state\n                const minimalSnapshot = {\n                    timestamp: Date.now(),\n                    version: this.STORAGE_VERSION,\n                    userSession: newSnapshot.userSession,\n                    // Minimal objects to ensure basic functionality\n                    chatContext: {\n                        currentConversationId: newSnapshot.chatContext.currentConversationId\n                    },\n                    pageState: {\n                        lastVisitedPath: newSnapshot.pageState.lastVisitedPath\n                    },\n                    widgetStates: {}\n                };\n                localStorage.setItem(this.STORAGE_KEY, JSON.stringify(minimalSnapshot));\n                this.log('Minimal state snapshot saved as fallback');\n            }\n        } catch (error) {\n            this.log(`Failed to capture state snapshot: ${error}`, 'error');\n        } finally{\n            // Always release the lock\n            _StateOperationLock__WEBPACK_IMPORTED_MODULE_0__[\"default\"].releaseLock('state_snapshot', lockId);\n        }\n    }\n    // Check local storage availability\n    static isStorageAvailable() {\n        try {\n            const testKey = '__storage_test__';\n            localStorage.setItem(testKey, testKey);\n            localStorage.removeItem(testKey);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n    // Validate snapshot age and integrity\n    static validateSnapshot(snapshot) {\n        if (!snapshot) return false;\n        // Check schema/structure validity\n        if (!this.validateSnapshotSchema(snapshot)) {\n            this.log('Snapshot has invalid schema, discarding', 'warn');\n            return false;\n        }\n        const currentTime = Date.now();\n        const snapshotAge = currentTime - snapshot.timestamp;\n        if (snapshotAge > this.MAX_SNAPSHOT_AGE) {\n            this.log('Snapshot too old, discarding', 'warn');\n            return false;\n        }\n        return true;\n    }\n    // Retrieve the last saved state snapshot with corruption recovery\n    static retrieveSnapshot() {\n        // We don't lock for reads, but we do check if there's a write in progress\n        if (_StateOperationLock__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isLocked('state_snapshot')) {\n            this.log('State snapshot is currently being updated, using existing snapshot', 'warn');\n        }\n        try {\n            const snapshot = localStorage.getItem(this.STORAGE_KEY);\n            if (!snapshot) return null;\n            try {\n                const parsedSnapshot = JSON.parse(snapshot);\n                // Validate snapshot integrity\n                if (this.validateSnapshot(parsedSnapshot)) {\n                    return parsedSnapshot;\n                } else {\n                    this.log('Invalid snapshot detected, attempting recovery', 'warn');\n                    return this.attemptSnapshotRecovery();\n                }\n            } catch (parseError) {\n                this.log(`JSON parse error: ${parseError}, attempting recovery`, 'error');\n                return this.attemptSnapshotRecovery();\n            }\n        } catch (error) {\n            this.log(`Failed to retrieve state snapshot: ${error}`, 'error');\n            return null;\n        }\n    }\n    // Attempt to recover corrupted state\n    static attemptSnapshotRecovery() {\n        try {\n            this.log('Attempting state recovery', 'warn');\n            // Strategy 1: Check for backup\n            const backupSnapshot = localStorage.getItem(`${this.STORAGE_KEY}_BACKUP`);\n            if (backupSnapshot) {\n                try {\n                    const parsedBackup = JSON.parse(backupSnapshot);\n                    if (this.validateSnapshot(parsedBackup)) {\n                        this.log('Recovered state from backup', 'info');\n                        return parsedBackup;\n                    }\n                } catch (e) {\n                    this.log('Backup snapshot also corrupted', 'warn');\n                }\n            }\n            // Strategy 2: Build from individual pieces in localStorage\n            const recoveredState = {\n                timestamp: Date.now(),\n                version: this.STORAGE_VERSION,\n                userSession: {},\n                chatContext: {},\n                pageState: {},\n                widgetStates: {}\n            };\n            // Try to get last path from localStorage\n            const activeSessionId = localStorage.getItem('activeSessionId');\n            if (activeSessionId) {\n                recoveredState.chatContext.currentConversationId = activeSessionId;\n            }\n            // Set recovery flag\n            recoveredState.recovered = true;\n            this.log('Created minimal recovered state', 'info');\n            return recoveredState;\n        } catch (error) {\n            this.log(`Recovery failed: ${error}`, 'error');\n            return null;\n        }\n    }\n    // Hydrate application state\n    static hydrateState(navigate) {\n        const snapshot = this.retrieveSnapshot();\n        if (snapshot) {\n            // Optionally navigate to last visited path\n            if (navigate && snapshot.pageState.lastVisitedPath) {\n                navigate(snapshot.pageState.lastVisitedPath);\n            }\n            return snapshot;\n        }\n        return {};\n    }\n    // Clear the snapshot (used during logout)\n    static clearSnapshot() {\n        localStorage.removeItem(this.STORAGE_KEY);\n    }\n}\n// Prevent accidental page unload\nfunction preventUnintendedRefresh(e) {\n    e.preventDefault();\n    e.returnValue = ''; // Required for Chrome\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (StatePersistenceManager);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi91dGlscy9TdGF0ZVBlcnNpc3RlbmNlLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUNzRDtBQTZEdEQsTUFBTUM7SUFDSixPQUFPQyxpQkFBaUI7UUFDdEIsTUFBTSxJQUFJQyxNQUFNO0lBQ2xCO0lBQ0EsMEVBQTBFO0lBQzFFLE9BQWNDLGNBQWMseUJBQXlCO0lBQ3JELE9BQWVDLG1CQUFtQixLQUFLLEtBQUssS0FBSyxLQUFLO0lBQ3RELE9BQWVDLGtCQUFrQixFQUFFO0lBQ25DLE9BQWVDLG1CQUFtQixJQUFJLE9BQU8sS0FBSztJQUVsRCw2QkFBNkI7SUFDN0IsT0FBZUMsSUFBSUMsT0FBZSxFQUFFQyxRQUFtQyxNQUFNLEVBQUU7UUFDN0UsTUFBTUMsWUFBWSxJQUFJQyxPQUFPQyxXQUFXO1FBQ3hDLE1BQU1DLGFBQWEsQ0FBQyxrQkFBa0IsRUFBRUosTUFBTUssV0FBVyxHQUFHLEVBQUUsRUFBRUosVUFBVSxHQUFHLEVBQUVGLFNBQVM7UUFFeEYsT0FBT0M7WUFDTCxLQUFLO2dCQUFRTSxRQUFRUixHQUFHLENBQUNNO2dCQUFhO1lBQ3RDLEtBQUs7Z0JBQVFFLFFBQVFDLElBQUksQ0FBQ0g7Z0JBQWE7WUFDdkMsS0FBSztnQkFBU0UsUUFBUUUsS0FBSyxDQUFDSjtnQkFBYTtRQUMzQztJQUVBLDJDQUEyQztJQUMzQyw4Q0FBOEM7SUFDaEQ7SUFFQSxzQ0FBc0M7SUFDdEMsYUFBcUJLLG9CQUFzQztRQUN6RCxJQUFJO1lBQ0YscURBQXFEO1lBQ3JELElBQUksYUFBYUMsYUFBYSxjQUFjQSxVQUFVQyxPQUFPLEVBQUU7Z0JBQzdELE1BQU1DLFdBQVcsTUFBTUYsVUFBVUMsT0FBTyxDQUFDQyxRQUFRO2dCQUNqRCxNQUFNLEVBQUVDLEtBQUssRUFBRUMsS0FBSyxFQUFFLEdBQUdGO2dCQUV6QixJQUFJQyxTQUFTQyxPQUFPO29CQUNsQixNQUFNQyxhQUFhRixRQUFRQztvQkFDM0IsSUFBSSxDQUFDaEIsR0FBRyxDQUFDLENBQUMsZUFBZSxFQUFFLENBQUNpQixhQUFhLEdBQUUsRUFBR0MsT0FBTyxDQUFDLEdBQUcsR0FBRyxFQUFFQyxLQUFLQyxLQUFLLENBQUNMLFFBQVEsT0FBTyxNQUFNLEtBQUssRUFBRUksS0FBS0MsS0FBSyxDQUFDSixRQUFRLE9BQU8sTUFBTSxHQUFHLENBQUM7b0JBRXpJLHdDQUF3QztvQkFDeEMsSUFBSUMsYUFBYSxLQUFLO3dCQUNwQixJQUFJLENBQUNqQixHQUFHLENBQUMscURBQXFEO3dCQUM5RCxPQUFPLElBQUksQ0FBQ3FCLGNBQWM7b0JBQzVCO2dCQUNGO1lBQ0YsT0FBTztnQkFDTCw0Q0FBNEM7Z0JBQzVDLDZCQUE2QjtnQkFDN0IsSUFBSUMsWUFBWTtnQkFDaEIsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlDLGFBQWFDLE1BQU0sRUFBRUYsSUFBSztvQkFDNUMsTUFBTUcsTUFBTUYsYUFBYUUsR0FBRyxDQUFDSDtvQkFDN0IsSUFBSUcsS0FBSzt3QkFDUCxNQUFNQyxRQUFRSCxhQUFhSSxPQUFPLENBQUNGLFFBQVE7d0JBQzNDSixhQUFhSSxJQUFJRCxNQUFNLEdBQUdFLE1BQU1GLE1BQU07b0JBQ3hDO2dCQUNGO2dCQUVBLHFDQUFxQztnQkFDckMsTUFBTUksU0FBU1AsWUFBYSxRQUFPLElBQUc7Z0JBQ3RDLElBQUksQ0FBQ3RCLEdBQUcsQ0FBQyxDQUFDLDhCQUE4QixFQUFFNkIsT0FBT1gsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDO2dCQUUvRCw0REFBNEQ7Z0JBQzVELElBQUlJLFlBQVksSUFBSSxDQUFDdkIsZ0JBQWdCLEVBQUU7b0JBQ3JDLElBQUksQ0FBQ0MsR0FBRyxDQUFDLG9EQUFvRDtvQkFDN0QsT0FBTyxJQUFJLENBQUNxQixjQUFjO2dCQUM1QjtZQUNGO1lBRUEsT0FBTztRQUNULEVBQUUsT0FBT1gsT0FBTztZQUNkLElBQUksQ0FBQ1YsR0FBRyxDQUFDLENBQUMsOEJBQThCLEVBQUVVLE9BQU8sRUFBRTtZQUNuRCxPQUFPLE1BQU0seUNBQXlDO1FBQ3hEO0lBQ0Y7SUFFQSxpREFBaUQ7SUFDakQsT0FBZVcsaUJBQTBCO1FBQ3ZDLElBQUk7WUFDRixvRUFBb0U7WUFDcEUsTUFBTVMsY0FBd0IsRUFBRTtZQUNoQyxJQUFLLElBQUlQLElBQUksR0FBR0EsSUFBSUMsYUFBYUMsTUFBTSxFQUFFRixJQUFLO2dCQUM1QyxNQUFNRyxNQUFNRixhQUFhRSxHQUFHLENBQUNIO2dCQUM3QixJQUFJRyxPQUFRQSxDQUFBQSxJQUFJSyxVQUFVLENBQUMsZ0JBQWdCTCxJQUFJTSxRQUFRLENBQUMsU0FBUSxHQUFJO29CQUNsRUYsWUFBWUcsSUFBSSxDQUFDUDtnQkFDbkI7WUFDRjtZQUVBLHdDQUF3QztZQUN4QyxNQUFNUSxlQUFlSixZQUFZSyxHQUFHLENBQUNULENBQUFBO2dCQUNuQyxnREFBZ0Q7Z0JBQ2hELE1BQU1VLFlBQVlDLE9BQU9YLEtBQUtZLE9BQU8sQ0FBQyxhQUFhLElBQUlBLE9BQU8sQ0FBQyxVQUFVO2dCQUN6RSxNQUFNQyxhQUFhZixhQUFhSSxPQUFPLENBQUMsQ0FBQyxXQUFXLEVBQUVRLFdBQVc7Z0JBQ2pFLE1BQU1qQyxZQUFZb0MsYUFBYSxJQUFJbkMsS0FBS21DLFlBQVlDLE9BQU8sS0FBSztnQkFDaEUsT0FBTztvQkFBRWQ7b0JBQUt2QjtnQkFBVTtZQUMxQjtZQUVBLG9CQUFvQjtZQUNwQitCLGFBQWFPLElBQUksQ0FBQyxDQUFDQyxHQUFHQyxJQUFNRCxFQUFFdkMsU0FBUyxHQUFHd0MsRUFBRXhDLFNBQVM7WUFFckQsNkJBQTZCO1lBQzdCLE1BQU15QyxnQkFBZ0J6QixLQUFLMEIsSUFBSSxDQUFDWCxhQUFhVCxNQUFNLEdBQUc7WUFDdEQsSUFBSyxJQUFJRixJQUFJLEdBQUdBLElBQUlxQixlQUFlckIsSUFBSztnQkFDdEMsSUFBSUEsSUFBSVcsYUFBYVQsTUFBTSxFQUFFO29CQUMzQkQsYUFBYXNCLFVBQVUsQ0FBQ1osWUFBWSxDQUFDWCxFQUFFLENBQUNHLEdBQUc7b0JBQzNDLElBQUksQ0FBQzFCLEdBQUcsQ0FBQyxDQUFDLGtCQUFrQixFQUFFa0MsWUFBWSxDQUFDWCxFQUFFLENBQUNHLEdBQUcsRUFBRTtnQkFDckQ7WUFDRjtZQUVBLDREQUE0RDtZQUM1RCxNQUFNcUIsV0FBV3ZCLGFBQWFJLE9BQU8sQ0FBQyxJQUFJLENBQUNoQyxXQUFXO1lBQ3RELElBQUltRCxZQUFZQSxTQUFTdEIsTUFBTSxHQUFHLE9BQU8sTUFBTTtnQkFDN0MsSUFBSTtvQkFDRixNQUFNdUIsaUJBQWlCQyxLQUFLQyxLQUFLLENBQUNIO29CQUVsQyxzQ0FBc0M7b0JBQ3RDLElBQUlDLGVBQWVHLFdBQVcsSUFBSUgsZUFBZUcsV0FBVyxDQUFDQyxRQUFRLEVBQUU7d0JBQ3JFLDZCQUE2Qjt3QkFDN0JKLGVBQWVHLFdBQVcsQ0FBQ0MsUUFBUSxHQUNqQ0osZUFBZUcsV0FBVyxDQUFDQyxRQUFRLENBQUNDLEtBQUssQ0FBQyxDQUFDO29CQUMvQztvQkFFQSw0QkFBNEI7b0JBQzVCN0IsYUFBYThCLE9BQU8sQ0FBQyxJQUFJLENBQUMxRCxXQUFXLEVBQUVxRCxLQUFLTSxTQUFTLENBQUNQO29CQUN0RCxJQUFJLENBQUNoRCxHQUFHLENBQUM7Z0JBQ1gsRUFBRSxPQUFPd0QsR0FBRztvQkFDVixJQUFJLENBQUN4RCxHQUFHLENBQUMsQ0FBQyx5QkFBeUIsRUFBRXdELEdBQUcsRUFBRTtnQkFDNUM7WUFDRjtZQUVBLE9BQU87UUFDVCxFQUFFLE9BQU85QyxPQUFPO1lBQ2QsSUFBSSxDQUFDVixHQUFHLENBQUMsQ0FBQywyQkFBMkIsRUFBRVUsT0FBTyxFQUFFO1lBQ2hELE9BQU87UUFDVDtJQUNGO0lBRUEseUNBQXlDO0lBQ3pDLE9BQWUrQyx1QkFBdUJWLFFBQWEsRUFBVztRQUM1RCxJQUFJLENBQUNBLFlBQVksT0FBT0EsYUFBYSxVQUFVLE9BQU87UUFFdEQsd0JBQXdCO1FBQ3hCLElBQUksT0FBT0EsU0FBUzVDLFNBQVMsS0FBSyxVQUFVLE9BQU87UUFFbkQsaUNBQWlDO1FBQ2pDLE1BQU11RCxrQkFBa0I7WUFBQztZQUFlO1lBQWU7WUFBYTtTQUFlO1FBQ25GLEtBQUssTUFBTUMsT0FBT0QsZ0JBQWlCO1lBQ2pDLElBQUksQ0FBQ1gsUUFBUSxDQUFDWSxJQUFJLElBQUksT0FBT1osUUFBUSxDQUFDWSxJQUFJLEtBQUssVUFBVTtnQkFDdkQsT0FBTztZQUNUO1FBQ0Y7UUFFQSxPQUFPO0lBQ1Q7SUFFQSwwQ0FBMEM7SUFDMUMsT0FBZUMsZUFBcUI7UUFDbEMsSUFBSTtZQUNGLE1BQU1DLGtCQUFrQnJDLGFBQWFJLE9BQU8sQ0FBQyxJQUFJLENBQUNoQyxXQUFXO1lBQzdELElBQUlpRSxpQkFBaUI7Z0JBQ25CckMsYUFBYThCLE9BQU8sQ0FBQyxHQUFHLElBQUksQ0FBQzFELFdBQVcsQ0FBQyxPQUFPLENBQUMsRUFBRWlFO1lBQ3JEO1FBQ0YsRUFBRSxPQUFPbkQsT0FBTztZQUNkLElBQUksQ0FBQ1YsR0FBRyxDQUFDLENBQUMseUJBQXlCLEVBQUVVLE9BQU8sRUFBRTtRQUNoRDtJQUNGO0lBRUEsNkRBQTZEO0lBQzdELGFBQWFvRCxnQkFBZ0JDLFlBQTRDLEVBQWlCO1FBQ3hGLGlFQUFpRTtRQUNqRSxNQUFNQyxTQUFTeEUsdUVBQThCLENBQUMsa0JBQWtCO1FBQ2hFLElBQUksQ0FBQ3dFLFFBQVE7WUFDWCxJQUFJLENBQUNoRSxHQUFHLENBQUMsZ0ZBQWdGO1lBQ3pGO1FBQ0Y7UUFFQSxJQUFJO1lBQ0YsZ0NBQWdDO1lBQ2hDLElBQUksQ0FBQyxJQUFJLENBQUNrRSxrQkFBa0IsSUFBSTtnQkFDOUIsSUFBSSxDQUFDbEUsR0FBRyxDQUFDLCtCQUErQjtnQkFDeEM7WUFDRjtZQUVBLDZCQUE2QjtZQUM3QixNQUFNbUUsVUFBVSxNQUFNLElBQUksQ0FBQ3hELGlCQUFpQjtZQUM1QyxJQUFJLENBQUN3RCxTQUFTO2dCQUNaLElBQUksQ0FBQ25FLEdBQUcsQ0FBQywwREFBMEQ7WUFDckU7WUFFQSxNQUFNb0UsbUJBQW1CLElBQUksQ0FBQ0MsZ0JBQWdCO1lBQzlDLE1BQU1DLGNBQW9DO2dCQUN4Q25FLFdBQVdDLEtBQUttRSxHQUFHO2dCQUNuQkMsU0FBUyxJQUFJLENBQUMxRSxlQUFlO2dCQUM3QjJFLGFBQWFWLGNBQWNVLGVBQWVMLGtCQUFrQkssZUFBZSxDQUFDO2dCQUM1RXRCLGFBQWFZLGNBQWNaLGVBQWVpQixrQkFBa0JqQixlQUFlLENBQUM7Z0JBQzVFdUIsV0FBV1gsY0FBY1csYUFBYU4sa0JBQWtCTSxhQUFhLENBQUM7Z0JBQ3RFQyxjQUFjWixjQUFjWSxnQkFBZ0JQLGtCQUFrQk8sZ0JBQWdCLENBQUM7WUFDakY7WUFFQSx1REFBdUQ7WUFDdkQsSUFBSSxDQUFDZixZQUFZO1lBRWpCLHdCQUF3QjtZQUN4QixJQUFJO2dCQUNGcEMsYUFBYThCLE9BQU8sQ0FBQyxJQUFJLENBQUMxRCxXQUFXLEVBQUVxRCxLQUFLTSxTQUFTLENBQUNlO2dCQUN0RCxJQUFJLENBQUN0RSxHQUFHLENBQUM7WUFDWCxFQUFFLE9BQU80RSxjQUFjO2dCQUNyQixzREFBc0Q7Z0JBQ3RELElBQUksQ0FBQzVFLEdBQUcsQ0FBQyxDQUFDLGdDQUFnQyxFQUFFNEUsY0FBYyxFQUFFO2dCQUM1RCxJQUFJLENBQUN2RCxjQUFjO2dCQUVuQiw4Q0FBOEM7Z0JBQzlDLE1BQU13RCxrQkFBa0I7b0JBQ3RCMUUsV0FBV0MsS0FBS21FLEdBQUc7b0JBQ25CQyxTQUFTLElBQUksQ0FBQzFFLGVBQWU7b0JBQzdCMkUsYUFBYUgsWUFBWUcsV0FBVztvQkFDcEMsZ0RBQWdEO29CQUNoRHRCLGFBQWE7d0JBQUUyQix1QkFBdUJSLFlBQVluQixXQUFXLENBQUMyQixxQkFBcUI7b0JBQUM7b0JBQ3BGSixXQUFXO3dCQUFFSyxpQkFBaUJULFlBQVlJLFNBQVMsQ0FBQ0ssZUFBZTtvQkFBQztvQkFDcEVKLGNBQWMsQ0FBQztnQkFDakI7Z0JBRUFuRCxhQUFhOEIsT0FBTyxDQUFDLElBQUksQ0FBQzFELFdBQVcsRUFBRXFELEtBQUtNLFNBQVMsQ0FBQ3NCO2dCQUN0RCxJQUFJLENBQUM3RSxHQUFHLENBQUM7WUFDWDtRQUNGLEVBQUUsT0FBT1UsT0FBTztZQUNkLElBQUksQ0FBQ1YsR0FBRyxDQUFDLENBQUMsa0NBQWtDLEVBQUVVLE9BQU8sRUFBRTtRQUN6RCxTQUFVO1lBQ1IsMEJBQTBCO1lBQzFCbEIsdUVBQThCLENBQUMsa0JBQWtCd0U7UUFDbkQ7SUFDRjtJQUVBLG1DQUFtQztJQUNuQyxPQUFlRSxxQkFBOEI7UUFDM0MsSUFBSTtZQUNGLE1BQU1lLFVBQVU7WUFDaEJ6RCxhQUFhOEIsT0FBTyxDQUFDMkIsU0FBU0E7WUFDOUJ6RCxhQUFhc0IsVUFBVSxDQUFDbUM7WUFDeEIsT0FBTztRQUNULEVBQUUsT0FBT3pCLEdBQUc7WUFDVixPQUFPO1FBQ1Q7SUFDRjtJQUVBLHNDQUFzQztJQUN0QyxPQUFlMEIsaUJBQWlCbkMsUUFBOEIsRUFBVztRQUN2RSxJQUFJLENBQUNBLFVBQVUsT0FBTztRQUV0QixrQ0FBa0M7UUFDbEMsSUFBSSxDQUFDLElBQUksQ0FBQ1Usc0JBQXNCLENBQUNWLFdBQVc7WUFDMUMsSUFBSSxDQUFDL0MsR0FBRyxDQUFDLDJDQUEyQztZQUNwRCxPQUFPO1FBQ1Q7UUFFQSxNQUFNbUYsY0FBYy9FLEtBQUttRSxHQUFHO1FBQzVCLE1BQU1hLGNBQWNELGNBQWNwQyxTQUFTNUMsU0FBUztRQUVwRCxJQUFJaUYsY0FBYyxJQUFJLENBQUN2RixnQkFBZ0IsRUFBRTtZQUN2QyxJQUFJLENBQUNHLEdBQUcsQ0FBQyxnQ0FBZ0M7WUFDekMsT0FBTztRQUNUO1FBRUEsT0FBTztJQUNUO0lBRUEsa0VBQWtFO0lBQ2xFLE9BQU9xRSxtQkFBZ0Q7UUFDckQsMEVBQTBFO1FBQzFFLElBQUk3RSxvRUFBMkIsQ0FBQyxtQkFBbUI7WUFDakQsSUFBSSxDQUFDUSxHQUFHLENBQUMsc0VBQXNFO1FBQ2pGO1FBRUEsSUFBSTtZQUNGLE1BQU0rQyxXQUFXdkIsYUFBYUksT0FBTyxDQUFDLElBQUksQ0FBQ2hDLFdBQVc7WUFDdEQsSUFBSSxDQUFDbUQsVUFBVSxPQUFPO1lBRXRCLElBQUk7Z0JBQ0YsTUFBTUMsaUJBQXVDQyxLQUFLQyxLQUFLLENBQUNIO2dCQUV4RCw4QkFBOEI7Z0JBQzlCLElBQUksSUFBSSxDQUFDbUMsZ0JBQWdCLENBQUNsQyxpQkFBaUI7b0JBQ3pDLE9BQU9BO2dCQUNULE9BQU87b0JBQ0wsSUFBSSxDQUFDaEQsR0FBRyxDQUFDLGtEQUFrRDtvQkFDM0QsT0FBTyxJQUFJLENBQUNzRix1QkFBdUI7Z0JBQ3JDO1lBQ0YsRUFBRSxPQUFPQyxZQUFZO2dCQUNuQixJQUFJLENBQUN2RixHQUFHLENBQUMsQ0FBQyxrQkFBa0IsRUFBRXVGLFdBQVcscUJBQXFCLENBQUMsRUFBRTtnQkFDakUsT0FBTyxJQUFJLENBQUNELHVCQUF1QjtZQUNyQztRQUNGLEVBQUUsT0FBTzVFLE9BQU87WUFDZCxJQUFJLENBQUNWLEdBQUcsQ0FBQyxDQUFDLG1DQUFtQyxFQUFFVSxPQUFPLEVBQUU7WUFDeEQsT0FBTztRQUNUO0lBQ0Y7SUFFQSxxQ0FBcUM7SUFDckMsT0FBZTRFLDBCQUF1RDtRQUNwRSxJQUFJO1lBQ0YsSUFBSSxDQUFDdEYsR0FBRyxDQUFDLDZCQUE2QjtZQUV0QywrQkFBK0I7WUFDL0IsTUFBTXdGLGlCQUFpQmhFLGFBQWFJLE9BQU8sQ0FBQyxHQUFHLElBQUksQ0FBQ2hDLFdBQVcsQ0FBQyxPQUFPLENBQUM7WUFDeEUsSUFBSTRGLGdCQUFnQjtnQkFDbEIsSUFBSTtvQkFDRixNQUFNQyxlQUFleEMsS0FBS0MsS0FBSyxDQUFDc0M7b0JBQ2hDLElBQUksSUFBSSxDQUFDTixnQkFBZ0IsQ0FBQ08sZUFBZTt3QkFDdkMsSUFBSSxDQUFDekYsR0FBRyxDQUFDLCtCQUErQjt3QkFDeEMsT0FBT3lGO29CQUNUO2dCQUNGLEVBQUUsT0FBT2pDLEdBQUc7b0JBQ1YsSUFBSSxDQUFDeEQsR0FBRyxDQUFDLGtDQUFrQztnQkFDN0M7WUFDRjtZQUVBLDJEQUEyRDtZQUMzRCxNQUFNMEYsaUJBQXVDO2dCQUMzQ3ZGLFdBQVdDLEtBQUttRSxHQUFHO2dCQUNuQkMsU0FBUyxJQUFJLENBQUMxRSxlQUFlO2dCQUM3QjJFLGFBQWEsQ0FBQztnQkFDZHRCLGFBQWEsQ0FBQztnQkFDZHVCLFdBQVcsQ0FBQztnQkFDWkMsY0FBYyxDQUFDO1lBQ2pCO1lBRUEseUNBQXlDO1lBQ3pDLE1BQU1nQixrQkFBa0JuRSxhQUFhSSxPQUFPLENBQUM7WUFDN0MsSUFBSStELGlCQUFpQjtnQkFDbkJELGVBQWV2QyxXQUFXLENBQUMyQixxQkFBcUIsR0FBR2E7WUFDckQ7WUFFQSxvQkFBb0I7WUFDcEJELGVBQWVFLFNBQVMsR0FBRztZQUUzQixJQUFJLENBQUM1RixHQUFHLENBQUMsbUNBQW1DO1lBQzVDLE9BQU8wRjtRQUNULEVBQUUsT0FBT2hGLE9BQU87WUFDZCxJQUFJLENBQUNWLEdBQUcsQ0FBQyxDQUFDLGlCQUFpQixFQUFFVSxPQUFPLEVBQUU7WUFDdEMsT0FBTztRQUNUO0lBQ0Y7SUFFQSw0QkFBNEI7SUFDNUIsT0FBT21GLGFBQWFDLFFBQTJCLEVBQWlDO1FBQzlFLE1BQU0vQyxXQUFXLElBQUksQ0FBQ3NCLGdCQUFnQjtRQUV0QyxJQUFJdEIsVUFBVTtZQUNaLDJDQUEyQztZQUMzQyxJQUFJK0MsWUFBWS9DLFNBQVMyQixTQUFTLENBQUNLLGVBQWUsRUFBRTtnQkFDbERlLFNBQVMvQyxTQUFTMkIsU0FBUyxDQUFDSyxlQUFlO1lBQzdDO1lBRUEsT0FBT2hDO1FBQ1Q7UUFFQSxPQUFPLENBQUM7SUFDVjtJQUVBLDBDQUEwQztJQUMxQyxPQUFPZ0QsZ0JBQXNCO1FBQzNCdkUsYUFBYXNCLFVBQVUsQ0FBQyxJQUFJLENBQUNsRCxXQUFXO0lBQzFDO0FBQ0Y7QUFFQSxpQ0FBaUM7QUFDMUIsU0FBU29HLHlCQUF5QnhDLENBQW9CO0lBQzNEQSxFQUFFeUMsY0FBYztJQUNoQnpDLEVBQUUwQyxXQUFXLEdBQUcsSUFBSSxzQkFBc0I7QUFDNUM7QUFFQSxpRUFBZXpHLHVCQUF1QkEsRUFBQyIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxtYW5qb1xcRG93bmxvYWRzXFxncmFjZV9wcm9qZWN0X2RvY2tlclxcZ3JhY2VfcHJvamVjdFxcc3JjXFx1aVxcdXRpbHNcXFN0YXRlUGVyc2lzdGVuY2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmF2aWdhdGVGdW5jdGlvbiB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuaW1wb3J0IFN0YXRlT3BlcmF0aW9uTG9jayBmcm9tICcuL1N0YXRlT3BlcmF0aW9uTG9jayc7XG5cbi8vIERlZmluZSB0aGUgc2hhcGUgb2Ygb3VyIHBlcnNpc3RlbnQgc3RhdGVcbmV4cG9ydCBpbnRlcmZhY2UgRHluYW1pY1N0YXRlU25hcHNob3Qge1xuICB0aW1lc3RhbXA6IG51bWJlcjtcbiAgdmVyc2lvbj86IG51bWJlcjsgICAgICAvLyBTY2hlbWEgdmVyc2lvbiBmb3IgbWlncmF0aW9uc1xuICByZWNvdmVyZWQ/OiBib29sZWFuOyAgIC8vIEZsYWcgZm9yIHJlY292ZXJlZCBzdGF0ZVxuICB1c2VyU2Vzc2lvbjoge1xuICAgIHRva2VuPzogc3RyaW5nO1xuICAgIHVzZXJuYW1lPzogc3RyaW5nO1xuICB9O1xuICBjaGF0Q29udGV4dDoge1xuICAgIGN1cnJlbnRDb252ZXJzYXRpb25JZD86IHN0cmluZztcbiAgICBkcmFmdE1lc3NhZ2U/OiBzdHJpbmc7XG4gICAgbGFzdE1lc3NhZ2VUaW1lc3RhbXA/OiBudW1iZXI7XG4gIH07XG4gIHBhZ2VTdGF0ZToge1xuICAgIGxhc3RWaXNpdGVkUGF0aD86IHN0cmluZztcbiAgICBzY3JvbGxQb3NpdGlvbnM/OiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+O1xuICB9O1xuICB3aWRnZXRTdGF0ZXM6IHtcbiAgICB0cmFkaW5nUG9zaXRpb25zPzogYW55W107XG4gICAgd2FsbGV0QmFsYW5jZT86IG51bWJlcjtcbiAgfTtcbiAgXG4gIC8vIEV4dGVuZGVkIHN0YXRlIHByb3BlcnRpZXNcbiAgY2hhdFN0YXRlPzoge1xuICAgIGN1cnJlbnRTZXNzaW9uSWQ/OiBzdHJpbmc7XG4gICAgYWN0aXZlU2Vzc2lvbnM/OiBzdHJpbmdbXTtcbiAgICBzZXNzaW9ucz86IFJlY29yZDxzdHJpbmcsIGFueT47XG4gICAgZHJhZnRNZXNzYWdlcz86IFJlY29yZDxzdHJpbmcsIHN0cmluZz47XG4gIH07XG4gIFxuICB0cmFkaW5nU3RhdGU/OiB7XG4gICAgc2VsZWN0ZWRUb2tlbj86IGFueTtcbiAgICB3YXRjaGxpc3Q/OiBzdHJpbmdbXTtcbiAgICB0cmFkZUhpc3Rvcnk/OiBhbnlbXTtcbiAgICB0cmFkZUZvcm0/OiBhbnk7XG4gICAgcmVzb2x1dGlvbj86IHN0cmluZztcbiAgICBzZWFyY2g/OiBzdHJpbmc7XG4gICAgcG9zaXRpb25zPzogYW55W107XG4gIH07XG4gIFxuICB3YWxsZXRTdGF0ZT86IHtcbiAgICBjb25uZWN0ZWRXYWxsZXRzPzogYW55W107XG4gICAgdHJhbnNhY3Rpb25zPzogYW55W107XG4gIH07XG4gIFxuICBzb2NpYWxTdGF0ZT86IHtcbiAgICBwb3N0cz86IGFueVtdO1xuICAgIGZvbGxvd2luZz86IHN0cmluZ1tdO1xuICAgIG5vdGlmaWNhdGlvbnM/OiBhbnlbXTtcbiAgfTtcbiAgXG4gIHVpU3RhdGU/OiB7XG4gICAgZGFya01vZGU/OiBib29sZWFuO1xuICAgIHNpZGViYXJPcGVuPzogYm9vbGVhbjtcbiAgICBhY3RpdmVUYWJzPzogUmVjb3JkPHN0cmluZywgc3RyaW5nPjtcbiAgfTtcbn1cblxuY2xhc3MgU3RhdGVQZXJzaXN0ZW5jZU1hbmFnZXIge1xuICBzdGF0aWMgZ2V0U3RvcmVkU3RhdGUoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdNZXRob2Qgbm90IGltcGxlbWVudGVkLicpO1xuICB9XG4gIC8vIFN0b3JhZ2Uga2V5cyAtIG1ha2luZyB0aGlzIHB1YmxpYyBzbyBpdCBjYW4gYmUgcmVmZXJlbmNlZCBieSBzeW5jIGxvZ2ljXG4gIHB1YmxpYyBzdGF0aWMgU1RPUkFHRV9LRVkgPSAnR1JBQ0VfRFlOQU1JQ19TTkFQU0hPVCc7XG4gIHByaXZhdGUgc3RhdGljIE1BWF9TTkFQU0hPVF9BR0UgPSAyNCAqIDYwICogNjAgKiAxMDAwOyAvLyAyNCBob3Vyc1xuICBwcml2YXRlIHN0YXRpYyBTVE9SQUdFX1ZFUlNJT04gPSAxOyAvLyBVc2VkIGZvciBzY2hlbWEgbWlncmF0aW9uc1xuICBwcml2YXRlIHN0YXRpYyBNQVhfU1RPUkFHRV9TSVpFID0gNCAqIDEwMjQgKiAxMDI0OyAvLyA0TUIgbWF4IHNpemUgKGxvY2FsU3RvcmFnZSBpcyB0eXBpY2FsbHkgNU1CKVxuXG4gIC8vIEFkdmFuY2VkIGxvZ2dpbmcgbWVjaGFuaXNtXG4gIHByaXZhdGUgc3RhdGljIGxvZyhtZXNzYWdlOiBzdHJpbmcsIGxldmVsOiAnaW5mbycgfCAnd2FybicgfCAnZXJyb3InID0gJ2luZm8nKSB7XG4gICAgY29uc3QgdGltZXN0YW1wID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpO1xuICAgIGNvbnN0IGxvZ01lc3NhZ2UgPSBgW1N0YXRlUGVyc2lzdGVuY2U6JHtsZXZlbC50b1VwcGVyQ2FzZSgpfV0gJHt0aW1lc3RhbXB9IC0gJHttZXNzYWdlfWA7XG4gICAgXG4gICAgc3dpdGNoKGxldmVsKSB7XG4gICAgICBjYXNlICdpbmZvJzogY29uc29sZS5sb2cobG9nTWVzc2FnZSk7IGJyZWFrO1xuICAgICAgY2FzZSAnd2Fybic6IGNvbnNvbGUud2Fybihsb2dNZXNzYWdlKTsgYnJlYWs7XG4gICAgICBjYXNlICdlcnJvcic6IGNvbnNvbGUuZXJyb3IobG9nTWVzc2FnZSk7IGJyZWFrO1xuICAgIH1cblxuICAgIC8vIE9wdGlvbmFsOiBTZW5kIHRvIGVycm9yIHRyYWNraW5nIHNlcnZpY2VcbiAgICAvLyB0aGlzLnJlcG9ydFRvRXJyb3JUcmFja2luZyhtZXNzYWdlLCBsZXZlbCk7XG4gIH1cblxuICAvLyBDaGVjayBzdG9yYWdlIHF1b3RhIGFuZCBtYW5hZ2Ugc2l6ZVxuICBwcml2YXRlIHN0YXRpYyBhc3luYyBjaGVja1N0b3JhZ2VRdW90YSgpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICB0cnkge1xuICAgICAgLy8gVXNlIHRoZSBTdG9yYWdlIEFQSSBpZiBhdmFpbGFibGUgKG1vZGVybiBicm93c2VycylcbiAgICAgIGlmICgnc3RvcmFnZScgaW4gbmF2aWdhdG9yICYmICdlc3RpbWF0ZScgaW4gbmF2aWdhdG9yLnN0b3JhZ2UpIHtcbiAgICAgICAgY29uc3QgZXN0aW1hdGUgPSBhd2FpdCBuYXZpZ2F0b3Iuc3RvcmFnZS5lc3RpbWF0ZSgpO1xuICAgICAgICBjb25zdCB7IHVzYWdlLCBxdW90YSB9ID0gZXN0aW1hdGU7XG4gICAgICAgIFxuICAgICAgICBpZiAodXNhZ2UgJiYgcXVvdGEpIHtcbiAgICAgICAgICBjb25zdCB1c2FnZVJhdGlvID0gdXNhZ2UgLyBxdW90YTtcbiAgICAgICAgICB0aGlzLmxvZyhgU3RvcmFnZSB1c2FnZTogJHsodXNhZ2VSYXRpbyAqIDEwMCkudG9GaXhlZCgyKX0lICgke01hdGgucm91bmQodXNhZ2UgLyAxMDI0IC8gMTAyNCl9TUIgLyAke01hdGgucm91bmQocXVvdGEgLyAxMDI0IC8gMTAyNCl9TUIpYCk7XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gSWYgb3ZlciA5MCUgb2YgcXVvdGEsIHRyeSB0byBjbGVhbiB1cFxuICAgICAgICAgIGlmICh1c2FnZVJhdGlvID4gMC45KSB7XG4gICAgICAgICAgICB0aGlzLmxvZygnU3RvcmFnZSBxdW90YSBuZWFyaW5nIGxpbWl0LCBjbGVhbmluZyB1cCBvbGQgZGF0YScsICd3YXJuJyk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jbGVhbnVwU3RvcmFnZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gRmFsbGJhY2sgZm9yIGJyb3dzZXJzIHdpdGhvdXQgU3RvcmFnZSBBUElcbiAgICAgICAgLy8gQ2hlY2sgY3VycmVudCBzdG9yYWdlIHNpemVcbiAgICAgICAgbGV0IHRvdGFsU2l6ZSA9IDA7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbG9jYWxTdG9yYWdlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgY29uc3Qga2V5ID0gbG9jYWxTdG9yYWdlLmtleShpKTtcbiAgICAgICAgICBpZiAoa2V5KSB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSkgfHwgJyc7XG4gICAgICAgICAgICB0b3RhbFNpemUgKz0ga2V5Lmxlbmd0aCArIHZhbHVlLmxlbmd0aDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIENvbnZlcnQgdG8gTUIgZm9yIGVhc2llciBkZWJ1Z2dpbmdcbiAgICAgICAgY29uc3Qgc2l6ZU1CID0gdG90YWxTaXplIC8gKDEwMjQgKiAxMDI0KTtcbiAgICAgICAgdGhpcy5sb2coYEVzdGltYXRlZCBsb2NhbFN0b3JhZ2UgdXNhZ2U6ICR7c2l6ZU1CLnRvRml4ZWQoMil9TUJgKTtcbiAgICAgICAgXG4gICAgICAgIC8vIElmIG92ZXIgNE1CLCBjbGVhbiB1cCAodHlwaWNhbCBsb2NhbFN0b3JhZ2UgbGltaXQgaXMgNU1CKVxuICAgICAgICBpZiAodG90YWxTaXplID4gdGhpcy5NQVhfU1RPUkFHRV9TSVpFKSB7XG4gICAgICAgICAgdGhpcy5sb2coJ1N0b3JhZ2Ugc2l6ZSBuZWFyaW5nIGxpbWl0LCBjbGVhbmluZyB1cCBvbGQgZGF0YScsICd3YXJuJyk7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuY2xlYW51cFN0b3JhZ2UoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhpcy5sb2coYEVycm9yIGNoZWNraW5nIHN0b3JhZ2UgcXVvdGE6ICR7ZXJyb3J9YCwgJ2Vycm9yJyk7XG4gICAgICByZXR1cm4gdHJ1ZTsgLy8gQ29udGludWUgYW55d2F5IHRvIG5vdCBibG9jayBvcGVyYXRpb25cbiAgICB9XG4gIH1cbiAgXG4gIC8vIENsZWFuIHVwIHN0b3JhZ2Ugd2hlbiBhcHByb2FjaGluZyBxdW90YSBsaW1pdHNcbiAgcHJpdmF0ZSBzdGF0aWMgY2xlYW51cFN0b3JhZ2UoKTogYm9vbGVhbiB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIFN0cmF0ZWd5IDE6IFJlbW92ZSBvbGQgY2hhdCBtZXNzYWdlcyAodHlwaWNhbGx5IHRoZSBsYXJnZXN0IGRhdGEpXG4gICAgICBjb25zdCBrZXlzVG9DaGVjazogc3RyaW5nW10gPSBbXTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbG9jYWxTdG9yYWdlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGtleSA9IGxvY2FsU3RvcmFnZS5rZXkoaSk7XG4gICAgICAgIGlmIChrZXkgJiYgKGtleS5zdGFydHNXaXRoKCdtZXNzYWdlc18nKSB8fCBrZXkuaW5jbHVkZXMoJ2RyYWZ0XycpKSkge1xuICAgICAgICAgIGtleXNUb0NoZWNrLnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBTb3J0IGJ5IGxhc3QgYWNjZXNzIHRpbWUgaWYgYXZhaWxhYmxlXG4gICAgICBjb25zdCBrZXlzV2l0aFRpbWUgPSBrZXlzVG9DaGVjay5tYXAoa2V5ID0+IHtcbiAgICAgICAgLy8gRW5zdXJlIGtleSBpcyBhIHN0cmluZyBiZWZvcmUgY2FsbGluZyByZXBsYWNlXG4gICAgICAgIGNvbnN0IHNlc3Npb25JZCA9IFN0cmluZyhrZXkpLnJlcGxhY2UoJ21lc3NhZ2VzXycsICcnKS5yZXBsYWNlKCdkcmFmdF8nLCAnJyk7XG4gICAgICAgIGNvbnN0IGxhc3RTeW5jZWQgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShgbGFzdFN5bmNlZF8ke3Nlc3Npb25JZH1gKTtcbiAgICAgICAgY29uc3QgdGltZXN0YW1wID0gbGFzdFN5bmNlZCA/IG5ldyBEYXRlKGxhc3RTeW5jZWQpLmdldFRpbWUoKSA6IDA7XG4gICAgICAgIHJldHVybiB7IGtleSwgdGltZXN0YW1wIH07XG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgLy8gU29ydCBvbGRlc3QgZmlyc3RcbiAgICAgIGtleXNXaXRoVGltZS5zb3J0KChhLCBiKSA9PiBhLnRpbWVzdGFtcCAtIGIudGltZXN0YW1wKTtcbiAgICAgIFxuICAgICAgLy8gUmVtb3ZlIG9sZGVzdCAzMCUgb2YgaXRlbXNcbiAgICAgIGNvbnN0IGl0ZW1zVG9SZW1vdmUgPSBNYXRoLmNlaWwoa2V5c1dpdGhUaW1lLmxlbmd0aCAqIDAuMyk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGl0ZW1zVG9SZW1vdmU7IGkrKykge1xuICAgICAgICBpZiAoaSA8IGtleXNXaXRoVGltZS5sZW5ndGgpIHtcbiAgICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShrZXlzV2l0aFRpbWVbaV0ua2V5KTtcbiAgICAgICAgICB0aGlzLmxvZyhgUmVtb3ZlZCBvbGQgZGF0YTogJHtrZXlzV2l0aFRpbWVbaV0ua2V5fWApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIFN0cmF0ZWd5IDI6IElmIG1haW4gc25hcHNob3QgaXMgdG9vIGxhcmdlLCB0cnkgdG8gdHJpbSBpdFxuICAgICAgY29uc3Qgc25hcHNob3QgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSh0aGlzLlNUT1JBR0VfS0VZKTtcbiAgICAgIGlmIChzbmFwc2hvdCAmJiBzbmFwc2hvdC5sZW5ndGggPiAxMDI0ICogMTAyNCkgeyAvLyBJZiBvdmVyIDFNQlxuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IHBhcnNlZFNuYXBzaG90ID0gSlNPTi5wYXJzZShzbmFwc2hvdCk7XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gVHJpbSBtZXNzYWdlIGhpc3RvcnkgdG8gcmVkdWNlIHNpemVcbiAgICAgICAgICBpZiAocGFyc2VkU25hcHNob3QuY2hhdENvbnRleHQgJiYgcGFyc2VkU25hcHNob3QuY2hhdENvbnRleHQubWVzc2FnZXMpIHtcbiAgICAgICAgICAgIC8vIEtlZXAgb25seSBsYXN0IDIwIG1lc3NhZ2VzXG4gICAgICAgICAgICBwYXJzZWRTbmFwc2hvdC5jaGF0Q29udGV4dC5tZXNzYWdlcyA9IFxuICAgICAgICAgICAgICBwYXJzZWRTbmFwc2hvdC5jaGF0Q29udGV4dC5tZXNzYWdlcy5zbGljZSgtMjApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBcbiAgICAgICAgICAvLyBTdG9yZSB0aGUgdHJpbW1lZCB2ZXJzaW9uXG4gICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0odGhpcy5TVE9SQUdFX0tFWSwgSlNPTi5zdHJpbmdpZnkocGFyc2VkU25hcHNob3QpKTtcbiAgICAgICAgICB0aGlzLmxvZygnVHJpbW1lZCBtYWluIHNuYXBzaG90IHNpemUnKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIHRoaXMubG9nKGBFcnJvciB0cmltbWluZyBzbmFwc2hvdDogJHtlfWAsICdlcnJvcicpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aGlzLmxvZyhgRXJyb3IgY2xlYW5pbmcgdXAgc3RvcmFnZTogJHtlcnJvcn1gLCAnZXJyb3InKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgXG4gIC8vIFZhbGlkYXRlIHNuYXBzaG90IHN0cnVjdHVyZSBhbmQgc2NoZW1hXG4gIHByaXZhdGUgc3RhdGljIHZhbGlkYXRlU25hcHNob3RTY2hlbWEoc25hcHNob3Q6IGFueSk6IGJvb2xlYW4ge1xuICAgIGlmICghc25hcHNob3QgfHwgdHlwZW9mIHNuYXBzaG90ICE9PSAnb2JqZWN0JykgcmV0dXJuIGZhbHNlO1xuICAgIFxuICAgIC8vIENoZWNrIHJlcXVpcmVkIGZpZWxkc1xuICAgIGlmICh0eXBlb2Ygc25hcHNob3QudGltZXN0YW1wICE9PSAnbnVtYmVyJykgcmV0dXJuIGZhbHNlO1xuICAgIFxuICAgIC8vIENoZWNrIGZvciByZXF1aXJlZCBzdWItb2JqZWN0c1xuICAgIGNvbnN0IHJlcXVpcmVkT2JqZWN0cyA9IFsndXNlclNlc3Npb24nLCAnY2hhdENvbnRleHQnLCAncGFnZVN0YXRlJywgJ3dpZGdldFN0YXRlcyddO1xuICAgIGZvciAoY29uc3Qgb2JqIG9mIHJlcXVpcmVkT2JqZWN0cykge1xuICAgICAgaWYgKCFzbmFwc2hvdFtvYmpdIHx8IHR5cGVvZiBzbmFwc2hvdFtvYmpdICE9PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIFxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLy8gQ3JlYXRlIGEgYmFja3VwIG9mIHRoZSBjdXJyZW50IHNuYXBzaG90XG4gIHByaXZhdGUgc3RhdGljIGNyZWF0ZUJhY2t1cCgpOiB2b2lkIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgY3VycmVudFNuYXBzaG90ID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0odGhpcy5TVE9SQUdFX0tFWSk7XG4gICAgICBpZiAoY3VycmVudFNuYXBzaG90KSB7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGAke3RoaXMuU1RPUkFHRV9LRVl9X0JBQ0tVUGAsIGN1cnJlbnRTbmFwc2hvdCk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRoaXMubG9nKGBGYWlsZWQgdG8gY3JlYXRlIGJhY2t1cDogJHtlcnJvcn1gLCAnd2FybicpO1xuICAgIH1cbiAgfVxuXG4gIC8vIENhcHR1cmUgdGhlIGN1cnJlbnQgYXBwbGljYXRpb24gc3RhdGUgd2l0aCBlbmhhbmNlZCBzYWZldHlcbiAgc3RhdGljIGFzeW5jIGNhcHR1cmVTbmFwc2hvdChwYXJ0aWFsU3RhdGU/OiBQYXJ0aWFsPER5bmFtaWNTdGF0ZVNuYXBzaG90Pik6IFByb21pc2U8dm9pZD4ge1xuICAgIC8vIEFjcXVpcmUgYSBsb2NrIGZvciBzdGF0ZSBvcGVyYXRpb25zIHRvIHByZXZlbnQgcmFjZSBjb25kaXRpb25zXG4gICAgY29uc3QgbG9ja0lkID0gU3RhdGVPcGVyYXRpb25Mb2NrLmFjcXVpcmVMb2NrKCdzdGF0ZV9zbmFwc2hvdCcsICdjYXB0dXJlX3NuYXBzaG90Jyk7XG4gICAgaWYgKCFsb2NrSWQpIHtcbiAgICAgIHRoaXMubG9nKCdDb3VsZCBub3QgYWNxdWlyZSBsb2NrIGZvciBzdGF0ZSBvcGVyYXRpb24sIGFub3RoZXIgb3BlcmF0aW9uIGlzIGluIHByb2dyZXNzJywgJ3dhcm4nKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgXG4gICAgdHJ5IHtcbiAgICAgIC8vIFZhbGlkYXRlIHN0b3JhZ2UgYXZhaWxhYmlsaXR5XG4gICAgICBpZiAoIXRoaXMuaXNTdG9yYWdlQXZhaWxhYmxlKCkpIHtcbiAgICAgICAgdGhpcy5sb2coJ0xvY2FsIHN0b3JhZ2Ugbm90IGF2YWlsYWJsZScsICd3YXJuJyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gQ2hlY2sgcXVvdGEgYmVmb3JlIHdyaXRpbmdcbiAgICAgIGNvbnN0IHF1b3RhT2sgPSBhd2FpdCB0aGlzLmNoZWNrU3RvcmFnZVF1b3RhKCk7XG4gICAgICBpZiAoIXF1b3RhT2spIHtcbiAgICAgICAgdGhpcy5sb2coJ1N0b3JhZ2UgcXVvdGEgaXNzdWVzLCBkYXRhIG1heSBub3QgYmUgc2F2ZWQgY29tcGxldGVseScsICd3YXJuJyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGV4aXN0aW5nU25hcHNob3QgPSB0aGlzLnJldHJpZXZlU25hcHNob3QoKTtcbiAgICAgIGNvbnN0IG5ld1NuYXBzaG90OiBEeW5hbWljU3RhdGVTbmFwc2hvdCA9IHtcbiAgICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpLFxuICAgICAgICB2ZXJzaW9uOiB0aGlzLlNUT1JBR0VfVkVSU0lPTiwgLy8gQWRkIHZlcnNpb24gZm9yIHNjaGVtYSBtaWdyYXRpb25zXG4gICAgICAgIHVzZXJTZXNzaW9uOiBwYXJ0aWFsU3RhdGU/LnVzZXJTZXNzaW9uIHx8IGV4aXN0aW5nU25hcHNob3Q/LnVzZXJTZXNzaW9uIHx8IHt9LFxuICAgICAgICBjaGF0Q29udGV4dDogcGFydGlhbFN0YXRlPy5jaGF0Q29udGV4dCB8fCBleGlzdGluZ1NuYXBzaG90Py5jaGF0Q29udGV4dCB8fCB7fSxcbiAgICAgICAgcGFnZVN0YXRlOiBwYXJ0aWFsU3RhdGU/LnBhZ2VTdGF0ZSB8fCBleGlzdGluZ1NuYXBzaG90Py5wYWdlU3RhdGUgfHwge30sXG4gICAgICAgIHdpZGdldFN0YXRlczogcGFydGlhbFN0YXRlPy53aWRnZXRTdGF0ZXMgfHwgZXhpc3RpbmdTbmFwc2hvdD8ud2lkZ2V0U3RhdGVzIHx8IHt9XG4gICAgICB9O1xuXG4gICAgICAvLyBDcmVhdGUgYSBiYWNrdXAgb2YgdGhlIGN1cnJlbnQgc3RhdGUgYmVmb3JlIHVwZGF0aW5nXG4gICAgICB0aGlzLmNyZWF0ZUJhY2t1cCgpO1xuICAgICAgXG4gICAgICAvLyBBdHRlbXB0IHRvIHNhdmUgc3RhdGVcbiAgICAgIHRyeSB7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKHRoaXMuU1RPUkFHRV9LRVksIEpTT04uc3RyaW5naWZ5KG5ld1NuYXBzaG90KSk7XG4gICAgICAgIHRoaXMubG9nKCdTdGF0ZSBzbmFwc2hvdCBjYXB0dXJlZCBzdWNjZXNzZnVsbHknKTtcbiAgICAgIH0gY2F0Y2ggKHN0b3JhZ2VFcnJvcikge1xuICAgICAgICAvLyBJZiBmYWlsZWQgZHVlIHRvIHF1b3RhLCBmb3JjZSBjbGVhbnVwIGFuZCB0cnkgYWdhaW5cbiAgICAgICAgdGhpcy5sb2coYFN0b3JhZ2UgZXJyb3IsIGZvcmNpbmcgY2xlYW51cDogJHtzdG9yYWdlRXJyb3J9YCwgJ3dhcm4nKTtcbiAgICAgICAgdGhpcy5jbGVhbnVwU3RvcmFnZSgpO1xuICAgICAgICBcbiAgICAgICAgLy8gVHJ5IG9uZSBtb3JlIHRpbWUgd2l0aCBhIG1vcmUgbWluaW1hbCBzdGF0ZVxuICAgICAgICBjb25zdCBtaW5pbWFsU25hcHNob3QgPSB7XG4gICAgICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpLFxuICAgICAgICAgIHZlcnNpb246IHRoaXMuU1RPUkFHRV9WRVJTSU9OLFxuICAgICAgICAgIHVzZXJTZXNzaW9uOiBuZXdTbmFwc2hvdC51c2VyU2Vzc2lvbixcbiAgICAgICAgICAvLyBNaW5pbWFsIG9iamVjdHMgdG8gZW5zdXJlIGJhc2ljIGZ1bmN0aW9uYWxpdHlcbiAgICAgICAgICBjaGF0Q29udGV4dDogeyBjdXJyZW50Q29udmVyc2F0aW9uSWQ6IG5ld1NuYXBzaG90LmNoYXRDb250ZXh0LmN1cnJlbnRDb252ZXJzYXRpb25JZCB9LFxuICAgICAgICAgIHBhZ2VTdGF0ZTogeyBsYXN0VmlzaXRlZFBhdGg6IG5ld1NuYXBzaG90LnBhZ2VTdGF0ZS5sYXN0VmlzaXRlZFBhdGggfSxcbiAgICAgICAgICB3aWRnZXRTdGF0ZXM6IHt9XG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSh0aGlzLlNUT1JBR0VfS0VZLCBKU09OLnN0cmluZ2lmeShtaW5pbWFsU25hcHNob3QpKTtcbiAgICAgICAgdGhpcy5sb2coJ01pbmltYWwgc3RhdGUgc25hcHNob3Qgc2F2ZWQgYXMgZmFsbGJhY2snKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhpcy5sb2coYEZhaWxlZCB0byBjYXB0dXJlIHN0YXRlIHNuYXBzaG90OiAke2Vycm9yfWAsICdlcnJvcicpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICAvLyBBbHdheXMgcmVsZWFzZSB0aGUgbG9ja1xuICAgICAgU3RhdGVPcGVyYXRpb25Mb2NrLnJlbGVhc2VMb2NrKCdzdGF0ZV9zbmFwc2hvdCcsIGxvY2tJZCk7XG4gICAgfVxuICB9XG5cbiAgLy8gQ2hlY2sgbG9jYWwgc3RvcmFnZSBhdmFpbGFiaWxpdHlcbiAgcHJpdmF0ZSBzdGF0aWMgaXNTdG9yYWdlQXZhaWxhYmxlKCk6IGJvb2xlYW4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB0ZXN0S2V5ID0gJ19fc3RvcmFnZV90ZXN0X18nO1xuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0odGVzdEtleSwgdGVzdEtleSk7XG4gICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSh0ZXN0S2V5KTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICAvLyBWYWxpZGF0ZSBzbmFwc2hvdCBhZ2UgYW5kIGludGVncml0eVxuICBwcml2YXRlIHN0YXRpYyB2YWxpZGF0ZVNuYXBzaG90KHNuYXBzaG90OiBEeW5hbWljU3RhdGVTbmFwc2hvdCk6IGJvb2xlYW4ge1xuICAgIGlmICghc25hcHNob3QpIHJldHVybiBmYWxzZTtcblxuICAgIC8vIENoZWNrIHNjaGVtYS9zdHJ1Y3R1cmUgdmFsaWRpdHlcbiAgICBpZiAoIXRoaXMudmFsaWRhdGVTbmFwc2hvdFNjaGVtYShzbmFwc2hvdCkpIHtcbiAgICAgIHRoaXMubG9nKCdTbmFwc2hvdCBoYXMgaW52YWxpZCBzY2hlbWEsIGRpc2NhcmRpbmcnLCAnd2FybicpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGNvbnN0IGN1cnJlbnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICBjb25zdCBzbmFwc2hvdEFnZSA9IGN1cnJlbnRUaW1lIC0gc25hcHNob3QudGltZXN0YW1wO1xuXG4gICAgaWYgKHNuYXBzaG90QWdlID4gdGhpcy5NQVhfU05BUFNIT1RfQUdFKSB7XG4gICAgICB0aGlzLmxvZygnU25hcHNob3QgdG9vIG9sZCwgZGlzY2FyZGluZycsICd3YXJuJyk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvLyBSZXRyaWV2ZSB0aGUgbGFzdCBzYXZlZCBzdGF0ZSBzbmFwc2hvdCB3aXRoIGNvcnJ1cHRpb24gcmVjb3ZlcnlcbiAgc3RhdGljIHJldHJpZXZlU25hcHNob3QoKTogRHluYW1pY1N0YXRlU25hcHNob3QgfCBudWxsIHtcbiAgICAvLyBXZSBkb24ndCBsb2NrIGZvciByZWFkcywgYnV0IHdlIGRvIGNoZWNrIGlmIHRoZXJlJ3MgYSB3cml0ZSBpbiBwcm9ncmVzc1xuICAgIGlmIChTdGF0ZU9wZXJhdGlvbkxvY2suaXNMb2NrZWQoJ3N0YXRlX3NuYXBzaG90JykpIHtcbiAgICAgIHRoaXMubG9nKCdTdGF0ZSBzbmFwc2hvdCBpcyBjdXJyZW50bHkgYmVpbmcgdXBkYXRlZCwgdXNpbmcgZXhpc3Rpbmcgc25hcHNob3QnLCAnd2FybicpO1xuICAgIH1cbiAgICBcbiAgICB0cnkge1xuICAgICAgY29uc3Qgc25hcHNob3QgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSh0aGlzLlNUT1JBR0VfS0VZKTtcbiAgICAgIGlmICghc25hcHNob3QpIHJldHVybiBudWxsO1xuXG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBwYXJzZWRTbmFwc2hvdDogRHluYW1pY1N0YXRlU25hcHNob3QgPSBKU09OLnBhcnNlKHNuYXBzaG90KTtcbiAgICAgICAgXG4gICAgICAgIC8vIFZhbGlkYXRlIHNuYXBzaG90IGludGVncml0eVxuICAgICAgICBpZiAodGhpcy52YWxpZGF0ZVNuYXBzaG90KHBhcnNlZFNuYXBzaG90KSkge1xuICAgICAgICAgIHJldHVybiBwYXJzZWRTbmFwc2hvdDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmxvZygnSW52YWxpZCBzbmFwc2hvdCBkZXRlY3RlZCwgYXR0ZW1wdGluZyByZWNvdmVyeScsICd3YXJuJyk7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuYXR0ZW1wdFNuYXBzaG90UmVjb3ZlcnkoKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAocGFyc2VFcnJvcikge1xuICAgICAgICB0aGlzLmxvZyhgSlNPTiBwYXJzZSBlcnJvcjogJHtwYXJzZUVycm9yfSwgYXR0ZW1wdGluZyByZWNvdmVyeWAsICdlcnJvcicpO1xuICAgICAgICByZXR1cm4gdGhpcy5hdHRlbXB0U25hcHNob3RSZWNvdmVyeSgpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aGlzLmxvZyhgRmFpbGVkIHRvIHJldHJpZXZlIHN0YXRlIHNuYXBzaG90OiAke2Vycm9yfWAsICdlcnJvcicpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG4gIFxuICAvLyBBdHRlbXB0IHRvIHJlY292ZXIgY29ycnVwdGVkIHN0YXRlXG4gIHByaXZhdGUgc3RhdGljIGF0dGVtcHRTbmFwc2hvdFJlY292ZXJ5KCk6IER5bmFtaWNTdGF0ZVNuYXBzaG90IHwgbnVsbCB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMubG9nKCdBdHRlbXB0aW5nIHN0YXRlIHJlY292ZXJ5JywgJ3dhcm4nKTtcbiAgICAgIFxuICAgICAgLy8gU3RyYXRlZ3kgMTogQ2hlY2sgZm9yIGJhY2t1cFxuICAgICAgY29uc3QgYmFja3VwU25hcHNob3QgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShgJHt0aGlzLlNUT1JBR0VfS0VZfV9CQUNLVVBgKTtcbiAgICAgIGlmIChiYWNrdXBTbmFwc2hvdCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IHBhcnNlZEJhY2t1cCA9IEpTT04ucGFyc2UoYmFja3VwU25hcHNob3QpO1xuICAgICAgICAgIGlmICh0aGlzLnZhbGlkYXRlU25hcHNob3QocGFyc2VkQmFja3VwKSkge1xuICAgICAgICAgICAgdGhpcy5sb2coJ1JlY292ZXJlZCBzdGF0ZSBmcm9tIGJhY2t1cCcsICdpbmZvJyk7XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VkQmFja3VwO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIHRoaXMubG9nKCdCYWNrdXAgc25hcHNob3QgYWxzbyBjb3JydXB0ZWQnLCAnd2FybicpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIFN0cmF0ZWd5IDI6IEJ1aWxkIGZyb20gaW5kaXZpZHVhbCBwaWVjZXMgaW4gbG9jYWxTdG9yYWdlXG4gICAgICBjb25zdCByZWNvdmVyZWRTdGF0ZTogRHluYW1pY1N0YXRlU25hcHNob3QgPSB7XG4gICAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKSxcbiAgICAgICAgdmVyc2lvbjogdGhpcy5TVE9SQUdFX1ZFUlNJT04sXG4gICAgICAgIHVzZXJTZXNzaW9uOiB7fSxcbiAgICAgICAgY2hhdENvbnRleHQ6IHt9LFxuICAgICAgICBwYWdlU3RhdGU6IHt9LFxuICAgICAgICB3aWRnZXRTdGF0ZXM6IHt9XG4gICAgICB9O1xuICAgICAgXG4gICAgICAvLyBUcnkgdG8gZ2V0IGxhc3QgcGF0aCBmcm9tIGxvY2FsU3RvcmFnZVxuICAgICAgY29uc3QgYWN0aXZlU2Vzc2lvbklkID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2FjdGl2ZVNlc3Npb25JZCcpO1xuICAgICAgaWYgKGFjdGl2ZVNlc3Npb25JZCkge1xuICAgICAgICByZWNvdmVyZWRTdGF0ZS5jaGF0Q29udGV4dC5jdXJyZW50Q29udmVyc2F0aW9uSWQgPSBhY3RpdmVTZXNzaW9uSWQ7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIFNldCByZWNvdmVyeSBmbGFnXG4gICAgICByZWNvdmVyZWRTdGF0ZS5yZWNvdmVyZWQgPSB0cnVlO1xuICAgICAgXG4gICAgICB0aGlzLmxvZygnQ3JlYXRlZCBtaW5pbWFsIHJlY292ZXJlZCBzdGF0ZScsICdpbmZvJyk7XG4gICAgICByZXR1cm4gcmVjb3ZlcmVkU3RhdGU7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRoaXMubG9nKGBSZWNvdmVyeSBmYWlsZWQ6ICR7ZXJyb3J9YCwgJ2Vycm9yJyk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICAvLyBIeWRyYXRlIGFwcGxpY2F0aW9uIHN0YXRlXG4gIHN0YXRpYyBoeWRyYXRlU3RhdGUobmF2aWdhdGU/OiBOYXZpZ2F0ZUZ1bmN0aW9uKTogUGFydGlhbDxEeW5hbWljU3RhdGVTbmFwc2hvdD4ge1xuICAgIGNvbnN0IHNuYXBzaG90ID0gdGhpcy5yZXRyaWV2ZVNuYXBzaG90KCk7XG4gICAgXG4gICAgaWYgKHNuYXBzaG90KSB7XG4gICAgICAvLyBPcHRpb25hbGx5IG5hdmlnYXRlIHRvIGxhc3QgdmlzaXRlZCBwYXRoXG4gICAgICBpZiAobmF2aWdhdGUgJiYgc25hcHNob3QucGFnZVN0YXRlLmxhc3RWaXNpdGVkUGF0aCkge1xuICAgICAgICBuYXZpZ2F0ZShzbmFwc2hvdC5wYWdlU3RhdGUubGFzdFZpc2l0ZWRQYXRoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNuYXBzaG90O1xuICAgIH1cblxuICAgIHJldHVybiB7fTtcbiAgfVxuXG4gIC8vIENsZWFyIHRoZSBzbmFwc2hvdCAodXNlZCBkdXJpbmcgbG9nb3V0KVxuICBzdGF0aWMgY2xlYXJTbmFwc2hvdCgpOiB2b2lkIHtcbiAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSh0aGlzLlNUT1JBR0VfS0VZKTtcbiAgfVxufVxuXG4vLyBQcmV2ZW50IGFjY2lkZW50YWwgcGFnZSB1bmxvYWRcbmV4cG9ydCBmdW5jdGlvbiBwcmV2ZW50VW5pbnRlbmRlZFJlZnJlc2goZTogQmVmb3JlVW5sb2FkRXZlbnQpIHtcbiAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICBlLnJldHVyblZhbHVlID0gJyc7IC8vIFJlcXVpcmVkIGZvciBDaHJvbWVcbn1cblxuZXhwb3J0IGRlZmF1bHQgU3RhdGVQZXJzaXN0ZW5jZU1hbmFnZXI7XG4iXSwibmFtZXMiOlsiU3RhdGVPcGVyYXRpb25Mb2NrIiwiU3RhdGVQZXJzaXN0ZW5jZU1hbmFnZXIiLCJnZXRTdG9yZWRTdGF0ZSIsIkVycm9yIiwiU1RPUkFHRV9LRVkiLCJNQVhfU05BUFNIT1RfQUdFIiwiU1RPUkFHRV9WRVJTSU9OIiwiTUFYX1NUT1JBR0VfU0laRSIsImxvZyIsIm1lc3NhZ2UiLCJsZXZlbCIsInRpbWVzdGFtcCIsIkRhdGUiLCJ0b0lTT1N0cmluZyIsImxvZ01lc3NhZ2UiLCJ0b1VwcGVyQ2FzZSIsImNvbnNvbGUiLCJ3YXJuIiwiZXJyb3IiLCJjaGVja1N0b3JhZ2VRdW90YSIsIm5hdmlnYXRvciIsInN0b3JhZ2UiLCJlc3RpbWF0ZSIsInVzYWdlIiwicXVvdGEiLCJ1c2FnZVJhdGlvIiwidG9GaXhlZCIsIk1hdGgiLCJyb3VuZCIsImNsZWFudXBTdG9yYWdlIiwidG90YWxTaXplIiwiaSIsImxvY2FsU3RvcmFnZSIsImxlbmd0aCIsImtleSIsInZhbHVlIiwiZ2V0SXRlbSIsInNpemVNQiIsImtleXNUb0NoZWNrIiwic3RhcnRzV2l0aCIsImluY2x1ZGVzIiwicHVzaCIsImtleXNXaXRoVGltZSIsIm1hcCIsInNlc3Npb25JZCIsIlN0cmluZyIsInJlcGxhY2UiLCJsYXN0U3luY2VkIiwiZ2V0VGltZSIsInNvcnQiLCJhIiwiYiIsIml0ZW1zVG9SZW1vdmUiLCJjZWlsIiwicmVtb3ZlSXRlbSIsInNuYXBzaG90IiwicGFyc2VkU25hcHNob3QiLCJKU09OIiwicGFyc2UiLCJjaGF0Q29udGV4dCIsIm1lc3NhZ2VzIiwic2xpY2UiLCJzZXRJdGVtIiwic3RyaW5naWZ5IiwiZSIsInZhbGlkYXRlU25hcHNob3RTY2hlbWEiLCJyZXF1aXJlZE9iamVjdHMiLCJvYmoiLCJjcmVhdGVCYWNrdXAiLCJjdXJyZW50U25hcHNob3QiLCJjYXB0dXJlU25hcHNob3QiLCJwYXJ0aWFsU3RhdGUiLCJsb2NrSWQiLCJhY3F1aXJlTG9jayIsImlzU3RvcmFnZUF2YWlsYWJsZSIsInF1b3RhT2siLCJleGlzdGluZ1NuYXBzaG90IiwicmV0cmlldmVTbmFwc2hvdCIsIm5ld1NuYXBzaG90Iiwibm93IiwidmVyc2lvbiIsInVzZXJTZXNzaW9uIiwicGFnZVN0YXRlIiwid2lkZ2V0U3RhdGVzIiwic3RvcmFnZUVycm9yIiwibWluaW1hbFNuYXBzaG90IiwiY3VycmVudENvbnZlcnNhdGlvbklkIiwibGFzdFZpc2l0ZWRQYXRoIiwicmVsZWFzZUxvY2siLCJ0ZXN0S2V5IiwidmFsaWRhdGVTbmFwc2hvdCIsImN1cnJlbnRUaW1lIiwic25hcHNob3RBZ2UiLCJpc0xvY2tlZCIsImF0dGVtcHRTbmFwc2hvdFJlY292ZXJ5IiwicGFyc2VFcnJvciIsImJhY2t1cFNuYXBzaG90IiwicGFyc2VkQmFja3VwIiwicmVjb3ZlcmVkU3RhdGUiLCJhY3RpdmVTZXNzaW9uSWQiLCJyZWNvdmVyZWQiLCJoeWRyYXRlU3RhdGUiLCJuYXZpZ2F0ZSIsImNsZWFyU25hcHNob3QiLCJwcmV2ZW50VW5pbnRlbmRlZFJlZnJlc2giLCJwcmV2ZW50RGVmYXVsdCIsInJldHVyblZhbHVlIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./utils/StatePersistence.ts\n");

/***/ }),

/***/ "./utils/authUtils.ts":
/*!****************************!*\
  !*** ./utils/authUtils.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TOKEN_EXPIRY_KEY: () => (/* binding */ TOKEN_EXPIRY_KEY),\n/* harmony export */   TOKEN_KEY: () => (/* binding */ TOKEN_KEY),\n/* harmony export */   addAuthHeaders: () => (/* binding */ addAuthHeaders),\n/* harmony export */   authFetch: () => (/* binding */ authFetch),\n/* harmony export */   clearAuthTokens: () => (/* binding */ clearAuthTokens),\n/* harmony export */   getAuthToken: () => (/* binding */ getAuthToken),\n/* harmony export */   getTokenExpiry: () => (/* binding */ getTokenExpiry),\n/* harmony export */   isTokenExpired: () => (/* binding */ isTokenExpired),\n/* harmony export */   storeAuthToken: () => (/* binding */ storeAuthToken)\n/* harmony export */ });\n/**\n * Authentication Utilities for Grace App\n * \n * Provides standardized token management compatible with the existing auth-utils.js system.\n */ // Token storage constants - exported for consistency across the codebase\nconst TOKEN_KEY = 'grace_token';\nconst TOKEN_EXPIRY_KEY = 'grace_token_expiry';\n// Simple mutex to prevent race conditions\nlet tokenMutex = Promise.resolve();\n/**\n * Store authentication token with remember-me preference\n * Uses a mutex to prevent race conditions\n */ async function storeAuthToken(token, rememberMe = false) {\n    if (true) return;\n    // Wait for any existing operation to complete\n    await tokenMutex;\n    // Create a new lock that others will wait for\n    let releaseLock;\n    tokenMutex = new Promise((resolve)=>{\n        releaseLock = resolve;\n    });\n    try {\n        // Clear both to prevent any token conflicts\n        clearAuthTokens();\n        // Store in the appropriate location\n        const storage = rememberMe ? localStorage : sessionStorage;\n        storage.setItem(TOKEN_KEY, token);\n        // Set expiry date (24 hours from now)\n        const expiry = new Date();\n        expiry.setHours(expiry.getHours() + 24);\n        storage.setItem(TOKEN_EXPIRY_KEY, expiry.toISOString());\n    } finally{\n        releaseLock();\n    }\n}\n/**\n * Get the current authentication token from storage\n * Checks sessionStorage first, then falls back to localStorage\n */ function getAuthToken() {\n    if (false) {}\n    return null;\n}\n/**\n * Get token expiration date\n */ function getTokenExpiry() {\n    if (false) {}\n    return null;\n}\n/**\n * Check if token is expired\n */ function isTokenExpired() {\n    const expiry = getTokenExpiry();\n    return !expiry || expiry < new Date();\n}\n/**\n * Clear all authentication tokens\n */ function clearAuthTokens() {\n    if (false) {}\n}\n/**\n * Add authorization headers to fetch options\n */ function addAuthHeaders(options = {}) {\n    const token = getAuthToken();\n    const headers = {\n        ...options.headers,\n        'Content-Type': 'application/json'\n    };\n    if (token) {\n        headers['Authorization'] = `Bearer ${token}`;\n    }\n    return {\n        ...options,\n        headers\n    };\n}\n/**\n * Wrapper for fetch with authentication headers\n */ async function authFetch(url, options = {}) {\n    return fetch(url, addAuthHeaders(options));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi91dGlscy9hdXRoVXRpbHMudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7Q0FJQyxHQUVELHlFQUF5RTtBQUNsRSxNQUFNQSxZQUFZLGNBQWM7QUFDaEMsTUFBTUMsbUJBQW1CLHFCQUFxQjtBQUVyRCwwQ0FBMEM7QUFDMUMsSUFBSUMsYUFBYUMsUUFBUUMsT0FBTztBQUVoQzs7O0NBR0MsR0FDTSxlQUFlQyxlQUFlQyxLQUFhLEVBQUVDLGFBQXNCLEtBQUs7SUFDN0UsSUFBSSxJQUE2QixFQUFFO0lBRW5DLDhDQUE4QztJQUM5QyxNQUFNTDtJQUVOLDhDQUE4QztJQUM5QyxJQUFJTTtJQUNKTixhQUFhLElBQUlDLFFBQVFDLENBQUFBO1FBQ3ZCSSxjQUFjSjtJQUNoQjtJQUVBLElBQUk7UUFDRiw0Q0FBNEM7UUFDNUNLO1FBRUEsb0NBQW9DO1FBQ3BDLE1BQU1DLFVBQVVILGFBQWFJLGVBQWVDO1FBQzVDRixRQUFRRyxPQUFPLENBQUNiLFdBQVdNO1FBRTNCLHNDQUFzQztRQUN0QyxNQUFNUSxTQUFTLElBQUlDO1FBQ25CRCxPQUFPRSxRQUFRLENBQUNGLE9BQU9HLFFBQVEsS0FBSztRQUNwQ1AsUUFBUUcsT0FBTyxDQUFDWixrQkFBa0JhLE9BQU9JLFdBQVc7SUFDdEQsU0FBVTtRQUNSVjtJQUNGO0FBQ0Y7QUFFQTs7O0NBR0MsR0FDTSxTQUFTVztJQUNkLElBQUksS0FBNkIsRUFBRSxFQUVsQztJQUNELE9BQU87QUFDVDtBQUVBOztDQUVDLEdBQ00sU0FBU0U7SUFDZCxJQUFJLEtBQTZCLEVBQUUsRUFHbEM7SUFDRCxPQUFPO0FBQ1Q7QUFFQTs7Q0FFQyxHQUNNLFNBQVNFO0lBQ2QsTUFBTVQsU0FBU087SUFDZixPQUFPLENBQUNQLFVBQVVBLFNBQVMsSUFBSUM7QUFDakM7QUFFQTs7Q0FFQyxHQUNNLFNBQVNOO0lBQ2QsSUFBSSxLQUE2QixFQUFFLEVBTWxDO0FBQ0g7QUFFQTs7Q0FFQyxHQUNNLFNBQVNnQixlQUFlQyxVQUF1QixDQUFDLENBQUM7SUFDdEQsTUFBTXBCLFFBQVFhO0lBQ2QsTUFBTVEsVUFBVTtRQUNkLEdBQUdELFFBQVFDLE9BQU87UUFDbEIsZ0JBQWdCO0lBQ2xCO0lBRUEsSUFBSXJCLE9BQU87UUFDVHFCLE9BQU8sQ0FBQyxnQkFBZ0IsR0FBRyxDQUFDLE9BQU8sRUFBRXJCLE9BQU87SUFDOUM7SUFFQSxPQUFPO1FBQ0wsR0FBR29CLE9BQU87UUFDVkM7SUFDRjtBQUNGO0FBRUE7O0NBRUMsR0FDTSxlQUFlQyxVQUFVQyxHQUFXLEVBQUVILFVBQXVCLENBQUMsQ0FBQztJQUNwRSxPQUFPSSxNQUFNRCxLQUFLSixlQUFlQztBQUNuQyIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxtYW5qb1xcRG93bmxvYWRzXFxncmFjZV9wcm9qZWN0X2RvY2tlclxcZ3JhY2VfcHJvamVjdFxcc3JjXFx1aVxcdXRpbHNcXGF1dGhVdGlscy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEF1dGhlbnRpY2F0aW9uIFV0aWxpdGllcyBmb3IgR3JhY2UgQXBwXG4gKiBcbiAqIFByb3ZpZGVzIHN0YW5kYXJkaXplZCB0b2tlbiBtYW5hZ2VtZW50IGNvbXBhdGlibGUgd2l0aCB0aGUgZXhpc3RpbmcgYXV0aC11dGlscy5qcyBzeXN0ZW0uXG4gKi9cblxuLy8gVG9rZW4gc3RvcmFnZSBjb25zdGFudHMgLSBleHBvcnRlZCBmb3IgY29uc2lzdGVuY3kgYWNyb3NzIHRoZSBjb2RlYmFzZVxuZXhwb3J0IGNvbnN0IFRPS0VOX0tFWSA9ICdncmFjZV90b2tlbic7XG5leHBvcnQgY29uc3QgVE9LRU5fRVhQSVJZX0tFWSA9ICdncmFjZV90b2tlbl9leHBpcnknO1xuXG4vLyBTaW1wbGUgbXV0ZXggdG8gcHJldmVudCByYWNlIGNvbmRpdGlvbnNcbmxldCB0b2tlbk11dGV4ID0gUHJvbWlzZS5yZXNvbHZlKCk7XG5cbi8qKlxuICogU3RvcmUgYXV0aGVudGljYXRpb24gdG9rZW4gd2l0aCByZW1lbWJlci1tZSBwcmVmZXJlbmNlXG4gKiBVc2VzIGEgbXV0ZXggdG8gcHJldmVudCByYWNlIGNvbmRpdGlvbnNcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHN0b3JlQXV0aFRva2VuKHRva2VuOiBzdHJpbmcsIHJlbWVtYmVyTWU6IGJvb2xlYW4gPSBmYWxzZSk6IFByb21pc2U8dm9pZD4ge1xuICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybjtcbiAgXG4gIC8vIFdhaXQgZm9yIGFueSBleGlzdGluZyBvcGVyYXRpb24gdG8gY29tcGxldGVcbiAgYXdhaXQgdG9rZW5NdXRleDtcbiAgXG4gIC8vIENyZWF0ZSBhIG5ldyBsb2NrIHRoYXQgb3RoZXJzIHdpbGwgd2FpdCBmb3JcbiAgbGV0IHJlbGVhc2VMb2NrOiAoKSA9PiB2b2lkO1xuICB0b2tlbk11dGV4ID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgcmVsZWFzZUxvY2sgPSByZXNvbHZlO1xuICB9KTtcbiAgXG4gIHRyeSB7XG4gICAgLy8gQ2xlYXIgYm90aCB0byBwcmV2ZW50IGFueSB0b2tlbiBjb25mbGljdHNcbiAgICBjbGVhckF1dGhUb2tlbnMoKTtcbiAgICBcbiAgICAvLyBTdG9yZSBpbiB0aGUgYXBwcm9wcmlhdGUgbG9jYXRpb25cbiAgICBjb25zdCBzdG9yYWdlID0gcmVtZW1iZXJNZSA/IGxvY2FsU3RvcmFnZSA6IHNlc3Npb25TdG9yYWdlO1xuICAgIHN0b3JhZ2Uuc2V0SXRlbShUT0tFTl9LRVksIHRva2VuKTtcbiAgICBcbiAgICAvLyBTZXQgZXhwaXJ5IGRhdGUgKDI0IGhvdXJzIGZyb20gbm93KVxuICAgIGNvbnN0IGV4cGlyeSA9IG5ldyBEYXRlKCk7XG4gICAgZXhwaXJ5LnNldEhvdXJzKGV4cGlyeS5nZXRIb3VycygpICsgMjQpO1xuICAgIHN0b3JhZ2Uuc2V0SXRlbShUT0tFTl9FWFBJUllfS0VZLCBleHBpcnkudG9JU09TdHJpbmcoKSk7XG4gIH0gZmluYWxseSB7XG4gICAgcmVsZWFzZUxvY2shKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBHZXQgdGhlIGN1cnJlbnQgYXV0aGVudGljYXRpb24gdG9rZW4gZnJvbSBzdG9yYWdlXG4gKiBDaGVja3Mgc2Vzc2lvblN0b3JhZ2UgZmlyc3QsIHRoZW4gZmFsbHMgYmFjayB0byBsb2NhbFN0b3JhZ2VcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEF1dGhUb2tlbigpOiBzdHJpbmcgfCBudWxsIHtcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oVE9LRU5fS0VZKSB8fCBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShUT0tFTl9LRVkpO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIEdldCB0b2tlbiBleHBpcmF0aW9uIGRhdGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFRva2VuRXhwaXJ5KCk6IERhdGUgfCBudWxsIHtcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgY29uc3QgZXhwaXJ5U3RyID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oVE9LRU5fRVhQSVJZX0tFWSkgfHwgc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShUT0tFTl9FWFBJUllfS0VZKTtcbiAgICByZXR1cm4gZXhwaXJ5U3RyID8gbmV3IERhdGUoZXhwaXJ5U3RyKSA6IG51bGw7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgdG9rZW4gaXMgZXhwaXJlZFxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNUb2tlbkV4cGlyZWQoKTogYm9vbGVhbiB7XG4gIGNvbnN0IGV4cGlyeSA9IGdldFRva2VuRXhwaXJ5KCk7XG4gIHJldHVybiAhZXhwaXJ5IHx8IGV4cGlyeSA8IG5ldyBEYXRlKCk7XG59XG5cbi8qKlxuICogQ2xlYXIgYWxsIGF1dGhlbnRpY2F0aW9uIHRva2Vuc1xuICovXG5leHBvcnQgZnVuY3Rpb24gY2xlYXJBdXRoVG9rZW5zKCk6IHZvaWQge1xuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBDbGVhciBmcm9tIGJvdGggc3RvcmFnZSBsb2NhdGlvbnMgdG8gYmUgc2FmZVxuICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKFRPS0VOX0tFWSk7XG4gICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oVE9LRU5fRVhQSVJZX0tFWSk7XG4gICAgc2Vzc2lvblN0b3JhZ2UucmVtb3ZlSXRlbShUT0tFTl9LRVkpO1xuICAgIHNlc3Npb25TdG9yYWdlLnJlbW92ZUl0ZW0oVE9LRU5fRVhQSVJZX0tFWSk7XG4gIH1cbn1cblxuLyoqXG4gKiBBZGQgYXV0aG9yaXphdGlvbiBoZWFkZXJzIHRvIGZldGNoIG9wdGlvbnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFkZEF1dGhIZWFkZXJzKG9wdGlvbnM6IFJlcXVlc3RJbml0ID0ge30pOiBSZXF1ZXN0SW5pdCB7XG4gIGNvbnN0IHRva2VuID0gZ2V0QXV0aFRva2VuKCk7XG4gIGNvbnN0IGhlYWRlcnMgPSB7IFxuICAgIC4uLm9wdGlvbnMuaGVhZGVycyxcbiAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICB9O1xuICBcbiAgaWYgKHRva2VuKSB7XG4gICAgaGVhZGVyc1snQXV0aG9yaXphdGlvbiddID0gYEJlYXJlciAke3Rva2VufWA7XG4gIH1cbiAgXG4gIHJldHVybiB7XG4gICAgLi4ub3B0aW9ucyxcbiAgICBoZWFkZXJzLFxuICB9O1xufVxuXG4vKipcbiAqIFdyYXBwZXIgZm9yIGZldGNoIHdpdGggYXV0aGVudGljYXRpb24gaGVhZGVyc1xuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYXV0aEZldGNoKHVybDogc3RyaW5nLCBvcHRpb25zOiBSZXF1ZXN0SW5pdCA9IHt9KTogUHJvbWlzZTxSZXNwb25zZT4ge1xuICByZXR1cm4gZmV0Y2godXJsLCBhZGRBdXRoSGVhZGVycyhvcHRpb25zKSk7XG59XG5cbiJdLCJuYW1lcyI6WyJUT0tFTl9LRVkiLCJUT0tFTl9FWFBJUllfS0VZIiwidG9rZW5NdXRleCIsIlByb21pc2UiLCJyZXNvbHZlIiwic3RvcmVBdXRoVG9rZW4iLCJ0b2tlbiIsInJlbWVtYmVyTWUiLCJyZWxlYXNlTG9jayIsImNsZWFyQXV0aFRva2VucyIsInN0b3JhZ2UiLCJsb2NhbFN0b3JhZ2UiLCJzZXNzaW9uU3RvcmFnZSIsInNldEl0ZW0iLCJleHBpcnkiLCJEYXRlIiwic2V0SG91cnMiLCJnZXRIb3VycyIsInRvSVNPU3RyaW5nIiwiZ2V0QXV0aFRva2VuIiwiZ2V0SXRlbSIsImdldFRva2VuRXhwaXJ5IiwiZXhwaXJ5U3RyIiwiaXNUb2tlbkV4cGlyZWQiLCJyZW1vdmVJdGVtIiwiYWRkQXV0aEhlYWRlcnMiLCJvcHRpb25zIiwiaGVhZGVycyIsImF1dGhGZXRjaCIsInVybCIsImZldGNoIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./utils/authUtils.ts\n");

/***/ }),

/***/ "./utils/devAuth.ts":
/*!**************************!*\
  !*** ./utils/devAuth.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bypassLogin: () => (/* binding */ bypassLogin),\n/* harmony export */   getAdminAuthData: () => (/* binding */ getAdminAuthData),\n/* harmony export */   hasAdminBypass: () => (/* binding */ hasAdminBypass)\n/* harmony export */ });\n/* harmony import */ var _authUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./authUtils */ \"./utils/authUtils.ts\");\n/**\n * Grace Admin Access Utilities\n * \n * This file contains the admin backdoor mechanism that provides\n * immediate access to the Grace interface with full privileges.\n */ \n// Admin user credentials with full access permissions\nconst ADMIN_USER = {\n    id: 'admin-kdot-id',\n    username: 'kdot',\n    email: 'kmanjo11@gmail.com',\n    role: 'admin',\n    permissions: [\n        'ALL'\n    ],\n    wallets: [],\n    settings: {\n        theme: 'dark',\n        notifications: true\n    }\n};\n// Admin authentication token (extremely long-lived - 10 years)\n// This is a properly formatted JWT that should pass validation checks\nconst ADMIN_TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhZG1pbi1rZG90LWlkIiwidXNlcm5hbWUiOiJrZG90IiwiZW1haWwiOiJrbWFuam8xMUBnbWFpbC5jb20iLCJyb2xlIjoiYWRtaW4iLCJwZXJtaXNzaW9ucyI6WyJBTEwiXSwiZXhwIjoxOTAwMDAwMDAwLCJpYXQiOjE1ODAwMDAwMDB9.p58K8xzT2BEuBRKgNUMTdbzHRhPgpnL_q91qfm8qRCk';\n/**\n * Check for admin backdoor query parameter\n */ const hasAdminBypass = ()=>{\n    const urlParams = new URLSearchParams(window.location.search);\n    // Secret parameter with a specific value for added security\n    return urlParams.get('xmaster') === 'kdotaccess';\n};\n/**\n * Create admin authentication data\n */ const getAdminAuthData = ()=>{\n    return {\n        token: ADMIN_TOKEN,\n        user: ADMIN_USER,\n        remember_me: true\n    };\n};\n/**\n * Bypass normal login for admin user with all access privileges\n * \n * @param loginFunction The real login function from AuthContext\n */ const bypassLogin = (loginFunction)=>{\n    try {\n        // Get admin credentials and token\n        const adminAuthData = getAdminAuthData();\n        if (adminAuthData) {\n            console.info('🔑 Using admin master access');\n            // Ensure the token is stored in BOTH localStorage and sessionStorage\n            // This guarantees it will be found regardless of which storage is checked\n            localStorage.setItem('grace_token', adminAuthData.token);\n            sessionStorage.setItem('grace_token', adminAuthData.token);\n            // Set a very far future expiry to prevent token timeout\n            const farFuture = new Date();\n            farFuture.setFullYear(farFuture.getFullYear() + 10); // 10 years in the future\n            localStorage.setItem('grace_token_expiry', farFuture.toISOString());\n            sessionStorage.setItem('grace_token_expiry', farFuture.toISOString());\n            // Use the standard auth function to store properly\n            (0,_authUtils__WEBPACK_IMPORTED_MODULE_0__.storeAuthToken)(adminAuthData.token, true);\n            // Call the real login function with our admin data\n            loginFunction(adminAuthData);\n            // Store a flag indicating we're using admin mode\n            localStorage.setItem('grace_admin_mode', 'true');\n        }\n    } catch (error) {\n        console.error('Admin access failed:', error);\n        // Fallback direct storage in case of error\n        const adminAuthData = getAdminAuthData();\n        localStorage.setItem('grace_token', adminAuthData.token);\n        localStorage.setItem('grace_admin_mode', 'true');\n        window.location.reload(); // Force reload to retry auth\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi91dGlscy9kZXZBdXRoLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7Ozs7Q0FLQyxHQUU0QztBQUU3QyxzREFBc0Q7QUFDdEQsTUFBTUMsYUFBYTtJQUNqQkMsSUFBSTtJQUNKQyxVQUFVO0lBQ1ZDLE9BQU87SUFDUEMsTUFBTTtJQUNOQyxhQUFhO1FBQUM7S0FBTTtJQUNwQkMsU0FBUyxFQUFFO0lBQ1hDLFVBQVU7UUFDUkMsT0FBTztRQUNQQyxlQUFlO0lBQ2pCO0FBQ0Y7QUFFQSwrREFBK0Q7QUFDL0Qsc0VBQXNFO0FBQ3RFLE1BQU1DLGNBQWM7QUFFcEI7O0NBRUMsR0FDTSxNQUFNQyxpQkFBaUI7SUFDNUIsTUFBTUMsWUFBWSxJQUFJQyxnQkFBZ0JDLE9BQU9DLFFBQVEsQ0FBQ0MsTUFBTTtJQUM1RCw0REFBNEQ7SUFDNUQsT0FBT0osVUFBVUssR0FBRyxDQUFDLGVBQWU7QUFDdEMsRUFBRTtBQUVGOztDQUVDLEdBQ00sTUFBTUMsbUJBQW1CO0lBQzlCLE9BQU87UUFDTEMsT0FBT1Q7UUFDUFUsTUFBTXBCO1FBQ05xQixhQUFhO0lBQ2Y7QUFDRixFQUFFO0FBRUY7Ozs7Q0FJQyxHQUNNLE1BQU1DLGNBQWMsQ0FBQ0M7SUFDMUIsSUFBSTtRQUNGLGtDQUFrQztRQUNsQyxNQUFNQyxnQkFBZ0JOO1FBRXRCLElBQUlNLGVBQWU7WUFDakJDLFFBQVFDLElBQUksQ0FBQztZQUViLHFFQUFxRTtZQUNyRSwwRUFBMEU7WUFDMUVDLGFBQWFDLE9BQU8sQ0FBQyxlQUFlSixjQUFjTCxLQUFLO1lBQ3ZEVSxlQUFlRCxPQUFPLENBQUMsZUFBZUosY0FBY0wsS0FBSztZQUV6RCx3REFBd0Q7WUFDeEQsTUFBTVcsWUFBWSxJQUFJQztZQUN0QkQsVUFBVUUsV0FBVyxDQUFDRixVQUFVRyxXQUFXLEtBQUssS0FBSyx5QkFBeUI7WUFDOUVOLGFBQWFDLE9BQU8sQ0FBQyxzQkFBc0JFLFVBQVVJLFdBQVc7WUFDaEVMLGVBQWVELE9BQU8sQ0FBQyxzQkFBc0JFLFVBQVVJLFdBQVc7WUFFbEUsbURBQW1EO1lBQ25EbkMsMERBQWNBLENBQUN5QixjQUFjTCxLQUFLLEVBQUU7WUFFcEMsbURBQW1EO1lBQ25ESSxjQUFjQztZQUVkLGlEQUFpRDtZQUNqREcsYUFBYUMsT0FBTyxDQUFDLG9CQUFvQjtRQUMzQztJQUNGLEVBQUUsT0FBT08sT0FBTztRQUNkVixRQUFRVSxLQUFLLENBQUMsd0JBQXdCQTtRQUN0QywyQ0FBMkM7UUFDM0MsTUFBTVgsZ0JBQWdCTjtRQUN0QlMsYUFBYUMsT0FBTyxDQUFDLGVBQWVKLGNBQWNMLEtBQUs7UUFDdkRRLGFBQWFDLE9BQU8sQ0FBQyxvQkFBb0I7UUFDekNkLE9BQU9DLFFBQVEsQ0FBQ3FCLE1BQU0sSUFBSSw2QkFBNkI7SUFDekQ7QUFDRixFQUFFIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXG1hbmpvXFxEb3dubG9hZHNcXGdyYWNlX3Byb2plY3RfZG9ja2VyXFxncmFjZV9wcm9qZWN0XFxzcmNcXHVpXFx1dGlsc1xcZGV2QXV0aC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEdyYWNlIEFkbWluIEFjY2VzcyBVdGlsaXRpZXNcbiAqIFxuICogVGhpcyBmaWxlIGNvbnRhaW5zIHRoZSBhZG1pbiBiYWNrZG9vciBtZWNoYW5pc20gdGhhdCBwcm92aWRlc1xuICogaW1tZWRpYXRlIGFjY2VzcyB0byB0aGUgR3JhY2UgaW50ZXJmYWNlIHdpdGggZnVsbCBwcml2aWxlZ2VzLlxuICovXG5cbmltcG9ydCB7IHN0b3JlQXV0aFRva2VuIH0gZnJvbSAnLi9hdXRoVXRpbHMnO1xuXG4vLyBBZG1pbiB1c2VyIGNyZWRlbnRpYWxzIHdpdGggZnVsbCBhY2Nlc3MgcGVybWlzc2lvbnNcbmNvbnN0IEFETUlOX1VTRVIgPSB7XG4gIGlkOiAnYWRtaW4ta2RvdC1pZCcsXG4gIHVzZXJuYW1lOiAna2RvdCcsXG4gIGVtYWlsOiAna21hbmpvMTFAZ21haWwuY29tJyxcbiAgcm9sZTogJ2FkbWluJyxcbiAgcGVybWlzc2lvbnM6IFsnQUxMJ10sXG4gIHdhbGxldHM6IFtdLCAvLyBXaWxsIGJlIHBvcHVsYXRlZCBieSB0aGUgYXBwXG4gIHNldHRpbmdzOiB7XG4gICAgdGhlbWU6ICdkYXJrJyxcbiAgICBub3RpZmljYXRpb25zOiB0cnVlXG4gIH1cbn07XG5cbi8vIEFkbWluIGF1dGhlbnRpY2F0aW9uIHRva2VuIChleHRyZW1lbHkgbG9uZy1saXZlZCAtIDEwIHllYXJzKVxuLy8gVGhpcyBpcyBhIHByb3Blcmx5IGZvcm1hdHRlZCBKV1QgdGhhdCBzaG91bGQgcGFzcyB2YWxpZGF0aW9uIGNoZWNrc1xuY29uc3QgQURNSU5fVE9LRU4gPSAnZXlKaGJHY2lPaUpJVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SnpkV0lpT2lKaFpHMXBiaTFyWkc5MExXbGtJaXdpZFhObGNtNWhiV1VpT2lKclpHOTBJaXdpWlcxaGFXd2lPaUpyYldGdWFtOHhNVUJuYldGcGJDNWpiMjBpTENKeWIyeGxJam9pWVdSdGFXNGlMQ0p3WlhKdGFYTnphVzl1Y3lJNld5SkJURXdpWFN3aVpYaHdJam94T1RBd01EQXdNREF3TENKcFlYUWlPakUxT0RBd01EQXdNREI5LnA1OEs4eHpUMkJFdUJSS2dOVU1UZGJ6SFJoUGdwbkxfcTkxcWZtOHFSQ2snOyBcblxuLyoqXG4gKiBDaGVjayBmb3IgYWRtaW4gYmFja2Rvb3IgcXVlcnkgcGFyYW1ldGVyXG4gKi9cbmV4cG9ydCBjb25zdCBoYXNBZG1pbkJ5cGFzcyA9ICgpOiBib29sZWFuID0+IHtcbiAgY29uc3QgdXJsUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoKTtcbiAgLy8gU2VjcmV0IHBhcmFtZXRlciB3aXRoIGEgc3BlY2lmaWMgdmFsdWUgZm9yIGFkZGVkIHNlY3VyaXR5XG4gIHJldHVybiB1cmxQYXJhbXMuZ2V0KCd4bWFzdGVyJykgPT09ICdrZG90YWNjZXNzJztcbn07XG5cbi8qKlxuICogQ3JlYXRlIGFkbWluIGF1dGhlbnRpY2F0aW9uIGRhdGFcbiAqL1xuZXhwb3J0IGNvbnN0IGdldEFkbWluQXV0aERhdGEgPSAoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgdG9rZW46IEFETUlOX1RPS0VOLFxuICAgIHVzZXI6IEFETUlOX1VTRVIsXG4gICAgcmVtZW1iZXJfbWU6IHRydWVcbiAgfTtcbn07XG5cbi8qKlxuICogQnlwYXNzIG5vcm1hbCBsb2dpbiBmb3IgYWRtaW4gdXNlciB3aXRoIGFsbCBhY2Nlc3MgcHJpdmlsZWdlc1xuICogXG4gKiBAcGFyYW0gbG9naW5GdW5jdGlvbiBUaGUgcmVhbCBsb2dpbiBmdW5jdGlvbiBmcm9tIEF1dGhDb250ZXh0XG4gKi9cbmV4cG9ydCBjb25zdCBieXBhc3NMb2dpbiA9IChsb2dpbkZ1bmN0aW9uOiAoZGF0YTogYW55KSA9PiB2b2lkKTogdm9pZCA9PiB7XG4gIHRyeSB7XG4gICAgLy8gR2V0IGFkbWluIGNyZWRlbnRpYWxzIGFuZCB0b2tlblxuICAgIGNvbnN0IGFkbWluQXV0aERhdGEgPSBnZXRBZG1pbkF1dGhEYXRhKCk7XG4gICAgXG4gICAgaWYgKGFkbWluQXV0aERhdGEpIHtcbiAgICAgIGNvbnNvbGUuaW5mbygn8J+UkSBVc2luZyBhZG1pbiBtYXN0ZXIgYWNjZXNzJyk7XG4gICAgICBcbiAgICAgIC8vIEVuc3VyZSB0aGUgdG9rZW4gaXMgc3RvcmVkIGluIEJPVEggbG9jYWxTdG9yYWdlIGFuZCBzZXNzaW9uU3RvcmFnZVxuICAgICAgLy8gVGhpcyBndWFyYW50ZWVzIGl0IHdpbGwgYmUgZm91bmQgcmVnYXJkbGVzcyBvZiB3aGljaCBzdG9yYWdlIGlzIGNoZWNrZWRcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdncmFjZV90b2tlbicsIGFkbWluQXV0aERhdGEudG9rZW4pO1xuICAgICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbSgnZ3JhY2VfdG9rZW4nLCBhZG1pbkF1dGhEYXRhLnRva2VuKTtcbiAgICAgIFxuICAgICAgLy8gU2V0IGEgdmVyeSBmYXIgZnV0dXJlIGV4cGlyeSB0byBwcmV2ZW50IHRva2VuIHRpbWVvdXRcbiAgICAgIGNvbnN0IGZhckZ1dHVyZSA9IG5ldyBEYXRlKCk7XG4gICAgICBmYXJGdXR1cmUuc2V0RnVsbFllYXIoZmFyRnV0dXJlLmdldEZ1bGxZZWFyKCkgKyAxMCk7IC8vIDEwIHllYXJzIGluIHRoZSBmdXR1cmVcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdncmFjZV90b2tlbl9leHBpcnknLCBmYXJGdXR1cmUudG9JU09TdHJpbmcoKSk7XG4gICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKCdncmFjZV90b2tlbl9leHBpcnknLCBmYXJGdXR1cmUudG9JU09TdHJpbmcoKSk7XG4gICAgICBcbiAgICAgIC8vIFVzZSB0aGUgc3RhbmRhcmQgYXV0aCBmdW5jdGlvbiB0byBzdG9yZSBwcm9wZXJseVxuICAgICAgc3RvcmVBdXRoVG9rZW4oYWRtaW5BdXRoRGF0YS50b2tlbiwgdHJ1ZSk7XG4gICAgICBcbiAgICAgIC8vIENhbGwgdGhlIHJlYWwgbG9naW4gZnVuY3Rpb24gd2l0aCBvdXIgYWRtaW4gZGF0YVxuICAgICAgbG9naW5GdW5jdGlvbihhZG1pbkF1dGhEYXRhKTtcbiAgICAgIFxuICAgICAgLy8gU3RvcmUgYSBmbGFnIGluZGljYXRpbmcgd2UncmUgdXNpbmcgYWRtaW4gbW9kZVxuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2dyYWNlX2FkbWluX21vZGUnLCAndHJ1ZScpO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdBZG1pbiBhY2Nlc3MgZmFpbGVkOicsIGVycm9yKTtcbiAgICAvLyBGYWxsYmFjayBkaXJlY3Qgc3RvcmFnZSBpbiBjYXNlIG9mIGVycm9yXG4gICAgY29uc3QgYWRtaW5BdXRoRGF0YSA9IGdldEFkbWluQXV0aERhdGEoKTtcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnZ3JhY2VfdG9rZW4nLCBhZG1pbkF1dGhEYXRhLnRva2VuKTtcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnZ3JhY2VfYWRtaW5fbW9kZScsICd0cnVlJyk7XG4gICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpOyAvLyBGb3JjZSByZWxvYWQgdG8gcmV0cnkgYXV0aFxuICB9XG59O1xuIl0sIm5hbWVzIjpbInN0b3JlQXV0aFRva2VuIiwiQURNSU5fVVNFUiIsImlkIiwidXNlcm5hbWUiLCJlbWFpbCIsInJvbGUiLCJwZXJtaXNzaW9ucyIsIndhbGxldHMiLCJzZXR0aW5ncyIsInRoZW1lIiwibm90aWZpY2F0aW9ucyIsIkFETUlOX1RPS0VOIiwiaGFzQWRtaW5CeXBhc3MiLCJ1cmxQYXJhbXMiLCJVUkxTZWFyY2hQYXJhbXMiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsInNlYXJjaCIsImdldCIsImdldEFkbWluQXV0aERhdGEiLCJ0b2tlbiIsInVzZXIiLCJyZW1lbWJlcl9tZSIsImJ5cGFzc0xvZ2luIiwibG9naW5GdW5jdGlvbiIsImFkbWluQXV0aERhdGEiLCJjb25zb2xlIiwiaW5mbyIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJzZXNzaW9uU3RvcmFnZSIsImZhckZ1dHVyZSIsIkRhdGUiLCJzZXRGdWxsWWVhciIsImdldEZ1bGxZZWFyIiwidG9JU09TdHJpbmciLCJlcnJvciIsInJlbG9hZCJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./utils/devAuth.ts\n");

/***/ }),

/***/ "@emotion/react/jsx-dev-runtime":
/*!*************************************************!*\
  !*** external "@emotion/react/jsx-dev-runtime" ***!
  \*************************************************/
/***/ ((module) => {

"use strict";
module.exports = import("@emotion/react/jsx-dev-runtime");;

/***/ }),

/***/ "next/dist/compiled/next-server/pages.runtime.dev.js":
/*!**********************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages.runtime.dev.js" ***!
  \**********************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/pages.runtime.dev.js");

/***/ }),

/***/ "next/dist/shared/lib/no-fallback-error.external":
/*!******************************************************************!*\
  !*** external "next/dist/shared/lib/no-fallback-error.external" ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/no-fallback-error.external");

/***/ }),

/***/ "next/dist/shared/lib/page-path/normalize-data-path":
/*!*********************************************************************!*\
  !*** external "next/dist/shared/lib/page-path/normalize-data-path" ***!
  \*********************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/page-path/normalize-data-path");

/***/ }),

/***/ "next/dist/shared/lib/router/utils/add-path-prefix":
/*!********************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/add-path-prefix" ***!
  \********************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/add-path-prefix");

/***/ }),

/***/ "next/dist/shared/lib/router/utils/format-url":
/*!***************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/format-url" ***!
  \***************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/format-url");

/***/ }),

/***/ "next/dist/shared/lib/router/utils/is-bot":
/*!***********************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/is-bot" ***!
  \***********************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/is-bot");

/***/ }),

/***/ "next/dist/shared/lib/router/utils/remove-trailing-slash":
/*!**************************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/remove-trailing-slash" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/remove-trailing-slash");

/***/ }),

/***/ "next/dist/shared/lib/utils":
/*!*********************************************!*\
  !*** external "next/dist/shared/lib/utils" ***!
  \*********************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/utils");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "react" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("react");

/***/ }),

/***/ "react-toastify":
/*!*********************************!*\
  !*** external "react-toastify" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = import("react-toastify");;

/***/ }),

/***/ "react/jsx-runtime":
/*!************************************!*\
  !*** external "react/jsx-runtime" ***!
  \************************************/
/***/ ((module) => {

"use strict";
module.exports = require("react/jsx-runtime");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("./webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/react-toastify"], () => (__webpack_exec__("./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES&page=%2F_error&preferredRegion=&absolutePagePath=.%2Fnode_modules%5Cnext%5Cdist%5Cpages%5C_error.js&absoluteAppPath=private-next-pages%2F_app&absoluteDocumentPath=private-next-pages%2F_document&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();