"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "(pages-dir-browser)/./components/AuthContext.tsx":
/*!************************************!*\
  !*** ./components/AuthContext.tsx ***!
  \************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthProvider: () => (/* binding */ AuthProvider),\n/* harmony export */   useAuth: () => (/* binding */ useAuth)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(pages-dir-browser)/./node_modules/.pnpm/react@19.1.1/node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(pages-dir-browser)/./node_modules/.pnpm/react@19.1.1/node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _api_apiClient__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../api/apiClient */ \"(pages-dir-browser)/./api/apiClient.ts\");\n/* harmony import */ var _utils_devAuth__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/devAuth */ \"(pages-dir-browser)/./utils/devAuth.ts\");\n/* harmony import */ var _utils_authUtils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/authUtils */ \"(pages-dir-browser)/./utils/authUtils.ts\");\n// src/ui/components/AuthContext.tsx\n\nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\n\n// Import admin backdoor utilities\n\n// Import standardized auth utils\n\nconst TOKEN_EXPIRY_KEY = 'grace_token_expiry';\nconst REFRESH_TOKEN_KEY = 'grace_refresh_token';\nconst TOKEN_VERIFY_INTERVAL = 60000; // Check token validity every 60 seconds\n// Improved session persistence utility to avoid conflicts with form state\nconst SessionPersistence = {\n    STORAGE_KEY: 'GRACE_SESSION_SNAPSHOT',\n    // Safely capture session snapshot with minimal data to avoid interference\n    captureSnapshot (user, token) {\n        try {\n            if (!user || !token) {\n                this.clearSnapshot();\n                return;\n            }\n            // Store only essential user identification data\n            // Avoid storing complete state that might conflict with forms\n            const snapshot = {\n                timestamp: Date.now(),\n                user: {\n                    id: user.id,\n                    username: user.username,\n                    email: user.email\n                },\n                // Don't store the actual token, just indicate authentication\n                authenticated: true\n            };\n            // Use sessionStorage instead of localStorage to avoid persisting between browser sessions\n            // This helps prevent stale data from affecting forms on future visits\n            sessionStorage.setItem(this.STORAGE_KEY, JSON.stringify(snapshot));\n        } catch (error) {\n            console.warn('Failed to capture session snapshot', error);\n        // Silently fail - don't let snapshot errors affect the application\n        }\n    },\n    // Retrieve session snapshot with validation\n    retrieveSnapshot () {\n        try {\n            const snapshotStr = sessionStorage.getItem(this.STORAGE_KEY);\n            if (!snapshotStr) return {\n                user: null,\n                token: null\n            };\n            const snapshot = JSON.parse(snapshotStr);\n            // Validate snapshot with expiration check (30 minutes)\n            const MAX_AGE = 30 * 60 * 1000; // 30 minutes in milliseconds\n            const isExpired = Date.now() - (snapshot.timestamp || 0) > MAX_AGE;\n            if (snapshot && snapshot.user && !isExpired) {\n                return {\n                    user: snapshot.user,\n                    // Get actual token from authUtils to ensure consistency\n                    token: (0,_utils_authUtils__WEBPACK_IMPORTED_MODULE_4__.getAuthToken)()\n                };\n            }\n            // Clear expired snapshot\n            if (isExpired) this.clearSnapshot();\n            return {\n                user: null,\n                token: null\n            };\n        } catch (error) {\n            console.warn('Failed to retrieve session snapshot', error);\n            this.clearSnapshot(); // Clear invalid snapshot\n            return {\n                user: null,\n                token: null\n            };\n        }\n    },\n    // Clear session snapshot\n    clearSnapshot () {\n        try {\n            sessionStorage.removeItem(this.STORAGE_KEY);\n        } catch (error) {\n            console.warn('Failed to clear session snapshot', error);\n        }\n    }\n};\nconst AuthContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(null);\nfunction AuthProvider(param) {\n    let { children } = param;\n    _s();\n    const [user, setUser] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const [isAuthenticated, setIsAuthenticated] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    // Use state for token to ensure it's updated when changed\n    const [token, setToken] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)((0,_utils_authUtils__WEBPACK_IMPORTED_MODULE_4__.getAuthToken)());\n    // Add flag to prevent verification immediately after login\n    const [skipNextVerification, setSkipNextVerification] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    // Update token state whenever auth state changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"AuthProvider.useEffect\": ()=>{\n            setToken((0,_utils_authUtils__WEBPACK_IMPORTED_MODULE_4__.getAuthToken)());\n        }\n    }[\"AuthProvider.useEffect\"], [\n        isAuthenticated\n    ]);\n    // Admin backdoor for quick access\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"AuthProvider.useEffect\": ()=>{\n            // Check if we should use the admin backdoor\n            if ((0,_utils_devAuth__WEBPACK_IMPORTED_MODULE_3__.hasAdminBypass)() && !isAuthenticated && !token) {\n                (0,_utils_devAuth__WEBPACK_IMPORTED_MODULE_3__.bypassLogin)(login);\n            }\n        }\n    }[\"AuthProvider.useEffect\"], []);\n    // Verify auth tokens on mount and set interval\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"AuthProvider.useEffect\": ()=>{\n            let isMounted = true;\n            const verifyOnMount = {\n                \"AuthProvider.useEffect.verifyOnMount\": async ()=>{\n                    // Skip initial verification if there's no token\n                    if ( true && !(0,_utils_authUtils__WEBPACK_IMPORTED_MODULE_4__.getAuthToken)()) {\n                        console.log('AuthContext: No token found on mount, skipping verification');\n                        if (isMounted) setLoading(false);\n                        return;\n                    }\n                    console.log('AuthContext: Verifying token on mount');\n                    // Verify token on component mount\n                    await verifyToken();\n                    // Handle case where verification completed but component was unmounted\n                    if (isMounted) setLoading(false);\n                }\n            }[\"AuthProvider.useEffect.verifyOnMount\"];\n            verifyOnMount();\n            // Set up periodic token verification\n            const interval = setInterval({\n                \"AuthProvider.useEffect.interval\": ()=>{\n                    if (!skipNextVerification) {\n                        verifyToken();\n                    } else {\n                        // Reset skip flag after using it once\n                        setSkipNextVerification(false);\n                    }\n                }\n            }[\"AuthProvider.useEffect.interval\"], TOKEN_VERIFY_INTERVAL);\n            return ({\n                \"AuthProvider.useEffect\": ()=>{\n                    isMounted = false;\n                    clearInterval(interval);\n                }\n            })[\"AuthProvider.useEffect\"];\n        }\n    }[\"AuthProvider.useEffect\"], []);\n    // Verify user token with backend\n    const verifyToken = async ()=>{\n        // If no token exists, there's nothing to verify\n        const token = (0,_utils_authUtils__WEBPACK_IMPORTED_MODULE_4__.getAuthToken)();\n        if (!token) {\n            console.log('AuthContext: No token to verify');\n            setIsAuthenticated(false);\n            setUser(null);\n            setLoading(false);\n            return false;\n        }\n        try {\n            console.log('AuthContext: Verifying token with backend');\n            setLoading(true);\n            const response = await _api_apiClient__WEBPACK_IMPORTED_MODULE_2__[\"default\"].get(_api_apiClient__WEBPACK_IMPORTED_MODULE_2__.API_ENDPOINTS.AUTH.VERIFY_TOKEN);\n            if (response.success && response.data) {\n                // Token is valid, update user data\n                console.log('AuthContext: Token verified successfully');\n                setIsAuthenticated(true);\n                setUser(response.data.user || {});\n                setToken(token); // Ensure token state matches storage\n                return true;\n            }\n            var _response_statusCode;\n            // Non-success HTTP response\n            const status = (_response_statusCode = response.statusCode) !== null && _response_statusCode !== void 0 ? _response_statusCode : 0;\n            if (status === 401 || status === 403) {\n                console.log('AuthContext: Token verification failed with unauthorized status:', status);\n                clearAuthState();\n                return false;\n            }\n            // For other errors (5xx, 0, etc.), keep current auth state to avoid flicker\n            console.warn('AuthContext: Verification non-success but not unauthorized. Preserving auth state.', {\n                status,\n                error: response.error\n            });\n            return false;\n        } catch (error) {\n            // Network or unexpected error: preserve current auth state\n            const msg = error instanceof Error ? error.message : 'Unknown error';\n            console.error('Token verification error, preserving auth state:', msg);\n            return false;\n        } finally{\n            setLoading(false);\n        }\n    };\n    // Enhanced logging utility for authentication events\n    const logAuthEvent = function(eventType) {\n        let details = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        const timestamp = new Date().toISOString();\n        const logEntry = {\n            timestamp,\n            eventType,\n            ...details\n        };\n        // Optional: Send to backend logging service or store locally\n        console.log(JSON.stringify(logEntry));\n        // Store in local storage for potential debugging\n        try {\n            const authLogs = JSON.parse(localStorage.getItem('auth_logs') || '[]');\n            authLogs.push(logEntry);\n            // Keep only last 50 log entries\n            localStorage.setItem('auth_logs', JSON.stringify(authLogs.slice(-50)));\n        } catch (e) {\n            console.error('Failed to log authentication event', e);\n        }\n    };\n    // Check if user has a wallet and generate one if not available\n    const checkAndGenerateWallet = async ()=>{\n        try {\n            var _walletResponse_data_wallet, _walletResponse_data;\n            // Skip if not authenticated\n            if (!isAuthenticated || !token) {\n                return;\n            }\n            // First check if wallet already exists\n            const walletResponse = await _api_apiClient__WEBPACK_IMPORTED_MODULE_2__[\"default\"].get(_api_apiClient__WEBPACK_IMPORTED_MODULE_2__.API_ENDPOINTS.WALLET.INFO, {});\n            // If no wallet or wallet address is empty, generate a new one\n            if (!walletResponse.success || !((_walletResponse_data = walletResponse.data) === null || _walletResponse_data === void 0 ? void 0 : (_walletResponse_data_wallet = _walletResponse_data.wallet) === null || _walletResponse_data_wallet === void 0 ? void 0 : _walletResponse_data_wallet.wallet_address)) {\n                console.log('No wallet found for user, generating a new internal wallet...');\n                // Generate a new wallet\n                const generateResponse = await _api_apiClient__WEBPACK_IMPORTED_MODULE_2__[\"default\"].post(_api_apiClient__WEBPACK_IMPORTED_MODULE_2__.API_ENDPOINTS.WALLET.GENERATE, {});\n                if (generateResponse.success) {\n                    var _generateResponse_data_wallet, _generateResponse_data, _generateResponse_data1;\n                    console.log('Wallet generated successfully:', (_generateResponse_data = generateResponse.data) === null || _generateResponse_data === void 0 ? void 0 : (_generateResponse_data_wallet = _generateResponse_data.wallet) === null || _generateResponse_data_wallet === void 0 ? void 0 : _generateResponse_data_wallet.wallet_address);\n                    // You could set wallet info in state here if needed\n                    return (_generateResponse_data1 = generateResponse.data) === null || _generateResponse_data1 === void 0 ? void 0 : _generateResponse_data1.wallet;\n                } else {\n                    console.error('Failed to generate wallet:', generateResponse.error);\n                }\n            } else {\n                var _walletResponse_data_wallet1, _walletResponse_data1, _walletResponse_data2;\n                console.log('User wallet already exists:', (_walletResponse_data1 = walletResponse.data) === null || _walletResponse_data1 === void 0 ? void 0 : (_walletResponse_data_wallet1 = _walletResponse_data1.wallet) === null || _walletResponse_data_wallet1 === void 0 ? void 0 : _walletResponse_data_wallet1.wallet_address);\n                return (_walletResponse_data2 = walletResponse.data) === null || _walletResponse_data2 === void 0 ? void 0 : _walletResponse_data2.wallet;\n            }\n        } catch (error) {\n            console.error('Error checking/generating wallet:', error instanceof Error ? error.message : 'Unknown error');\n        }\n    };\n    // Implement token refresh functionality with exponential backoff\n    const refreshToken = async function() {\n        let retryCount = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;\n        const MAX_RETRIES = 3;\n        const BASE_DELAY = 1000; // 1 second initial delay\n        try {\n            var _response_data;\n            logAuthEvent('TOKEN_REFRESH_ATTEMPT', {\n                retryCount\n            });\n            // Exponential backoff with jitter\n            if (retryCount > 0) {\n                const delay = BASE_DELAY * Math.pow(2, retryCount) * (1 + Math.random());\n                await new Promise((resolve)=>setTimeout(resolve, delay));\n            }\n            // Use the dedicated refresh token endpoint\n            const response = await _api_apiClient__WEBPACK_IMPORTED_MODULE_2__[\"default\"].post(_api_apiClient__WEBPACK_IMPORTED_MODULE_2__.API_ENDPOINTS.AUTH.REFRESH_TOKEN, {});\n            if (!response.success || !((_response_data = response.data) === null || _response_data === void 0 ? void 0 : _response_data.token)) {\n                throw new Error('Token refresh failed: Invalid response');\n            }\n            const { token, username } = response.data;\n            // Determine storage type based on where the current token is stored\n            const inLocalStorage = localStorage.getItem(_utils_authUtils__WEBPACK_IMPORTED_MODULE_4__.TOKEN_KEY) !== null;\n            const rememberMe = inLocalStorage; // If in localStorage, user wanted persistent login\n            // Store the new token with the same preference\n            await (0,_utils_authUtils__WEBPACK_IMPORTED_MODULE_4__.storeAuthToken)(token, rememberMe);\n            // Update local token state\n            setToken(token);\n            setIsAuthenticated(true);\n            // Optional: Update username if provided\n            if (username) {\n                setUser((prevUser)=>({\n                        ...prevUser,\n                        username\n                    }));\n            }\n            logAuthEvent('TOKEN_REFRESH_SUCCESS', {\n                username\n            });\n            return true;\n        } catch (error) {\n            const errorMessage = error instanceof Error ? error.message : 'Unknown refresh error';\n            logAuthEvent('TOKEN_REFRESH_FAILURE', {\n                errorMessage,\n                retryCount,\n                errorStack: error instanceof Error ? error.stack : undefined\n            });\n            // Implement retry mechanism\n            if (retryCount < MAX_RETRIES) {\n                console.warn(\"Token refresh attempt \".concat(retryCount + 1, \" failed. Retrying...\"));\n                return refreshToken(retryCount + 1);\n            }\n            // Final fallback: logout after max retries\n            console.error('Token refresh failed after maximum retries');\n            logout();\n            return false;\n        }\n    };\n    // Login with credentials\n    const login = async (data)=>{\n        try {\n            console.log('AuthContext: login function called with data:', data);\n            // Some API clients save the token directly to storage and strip it from payload\n            // Fall back to reading from storage if not present on the response object\n            if (!data.token) {\n                const storedToken = (0,_utils_authUtils__WEBPACK_IMPORTED_MODULE_4__.getAuthToken)();\n                console.log('AuthContext: token missing in payload, using stored token:', !!storedToken);\n                if (storedToken) {\n                    data.token = storedToken;\n                } else {\n                    throw new Error('No token found in login data or storage');\n                }\n            }\n            console.log('AuthContext: Processing login with token');\n            // Store token with remember me preference if provided\n            const rememberMe = data.remember_me !== undefined ? data.remember_me : true; // Default to true for persistent login\n            // Store token and wait for it to complete\n            await (0,_utils_authUtils__WEBPACK_IMPORTED_MODULE_4__.storeAuthToken)(data.token, rememberMe);\n            console.log('AuthContext: Token stored successfully');\n            // Update application state\n            setToken(data.token); // Ensure token state is synchronized\n            setUser(data.user || {});\n            setIsAuthenticated(true);\n            setLoading(false); // Ensure loading state is turned off\n            console.log('AuthContext: State updated - isAuthenticated: true, user:', data.user);\n            // Capture minimal session data after successful login\n            if (data.user) {\n                SessionPersistence.captureSnapshot(data.user, data.token);\n            }\n            // Set flag to skip next verification cycle to avoid race condition\n            setSkipNextVerification(true);\n            // Log successful login state update\n            console.log('AuthContext: Login complete, auth state updated');\n            // Automatically check for wallet and generate if needed\n            // This ensures every user has a wallet automatically\n            setTimeout(()=>{\n                checkAndGenerateWallet();\n            }, 500); // Small delay to ensure auth is fully established\n            return true; // Signal successful login\n        } catch (error) {\n            console.error('Login failed:', error instanceof Error ? error.message : 'Unknown error');\n            // Ensure auth state is reset if login fails\n            (0,_utils_authUtils__WEBPACK_IMPORTED_MODULE_4__.clearAuthTokens)();\n            SessionPersistence.clearSnapshot();\n            setToken(null);\n            setUser(null);\n            setIsAuthenticated(false);\n            setLoading(false);\n            return false; // Signal failed login\n        }\n    };\n    // Clear auth state - reusable function for both logout and failed auth\n    const clearAuthState = ()=>{\n        (0,_utils_authUtils__WEBPACK_IMPORTED_MODULE_4__.clearAuthTokens)();\n        setToken(null);\n        setUser(null);\n        setIsAuthenticated(false);\n        SessionPersistence.clearSnapshot();\n    };\n    // Clear auth state\n    const logout = async ()=>{\n        logAuthEvent('logout_initiated');\n        try {\n            // Attempt to call logout endpoint if we have a token\n            if ((0,_utils_authUtils__WEBPACK_IMPORTED_MODULE_4__.getAuthToken)()) {\n                await _api_apiClient__WEBPACK_IMPORTED_MODULE_2__[\"default\"].post(_api_apiClient__WEBPACK_IMPORTED_MODULE_2__.API_ENDPOINTS.AUTH.LOGOUT, {});\n            }\n        } catch (error) {\n            console.error('Error during logout:', error);\n        // Continue with logout regardless of API errors\n        } finally{\n            // Always clear local state and storage\n            clearAuthState();\n            // Log the event\n            logAuthEvent('logout_complete');\n        }\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(AuthContext.Provider, {\n        value: {\n            user,\n            login,\n            logout,\n            loading,\n            refreshToken,\n            isAuthenticated\n        },\n        children: children\n    }, void 0, false, {\n        fileName: \"/Users/wonkasworld/Downloads/grace-project/src/ui/components/AuthContext.tsx\",\n        lineNumber: 447,\n        columnNumber: 5\n    }, this);\n}\n_s(AuthProvider, \"weT8k2eN96VyKLNkgO1xu2THofc=\");\n_c = AuthProvider;\nconst useAuth = ()=>{\n    _s1();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(AuthContext);\n    if (!context) {\n        throw new Error('useAuth must be used within an AuthProvider');\n    }\n    return context;\n};\n_s1(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./components/AuthContext.tsx\n"));

/***/ })

});